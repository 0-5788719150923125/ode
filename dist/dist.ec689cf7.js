importScripts("./dev-browser.190f45ae.js");
// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"kKT5V":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = true;
var HMR_ENV_HASH = "a8fb9c35fdafe466";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "3cd8b5f7ec689cf7";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"bxRei":[function(require,module,exports) {
var __dirname = "node_modules/@tensorflow/tfjs-node-gpu/dist";
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.io = exports.version = void 0;
// Register all kernels.
require("b0eb6e5fbeea27b");
var tf = require("ac40bccb1e9ae941");
var path = require("2020ee2950104f3c");
var callbacks_1 = require("86ee63a0a019cf3e");
var file_system_1 = require("94a5d74a60084567");
var nodeIo = require("7e4e36572e701380");
var nodejs_kernel_backend_1 = require("978ac5d68a88a6e7");
var nodeVersion = require("16b96b543a3bc969");
// tslint:disable-next-line:no-require-imports
var binary = require("936889f66ba28f3e");
var bindingPath = binary.find(path.resolve(path.join(__dirname, "/../package.json")));
// Check if the node native addon module exists.
// tslint:disable-next-line:no-require-imports
var fs = require("f2d568c82fa2d0b3");
if (!fs.existsSync(bindingPath)) throw new Error("The Node.js native addon module (tfjs_binding.node) can not be found at path: " + String(bindingPath) + ". \nPlease run command " + "'npm rebuild @tensorflow/tfjs-node" + (String(bindingPath).indexOf("tfjs-node-gpu") > 0 ? "-gpu" : "") + " --build-addon-from-source' to " + "rebuild the native addon module. \nIf you have problem with building " + "the addon module, please check " + "https://github.com/tensorflow/tfjs/blob/master/tfjs-node/" + "WINDOWS_TROUBLESHOOTING.md or file an issue.");
// tslint:disable-next-line:no-require-imports
var bindings = require(bindingPath);
// Merge version and io namespaces.
exports.version = __assign(__assign({}, tf.version), {
    "tfjs-node": nodeVersion.version
});
exports.io = __assign(__assign({}, tf.io), nodeIo);
// Export all union package symbols
__exportStar(require("ac40bccb1e9ae941"), exports);
__exportStar(require("73936caaf27eea3b"), exports);
// tslint:disable-next-line:no-require-imports
var pjson = require("51bed1ef73c5bf22");
// Side effects for default initialization of Node backend.
tf.registerBackend("tensorflow", function() {
    return new nodejs_kernel_backend_1.NodeJSKernelBackend(bindings, pjson.name);
}, 3 /* priority */ );
var success = tf.setBackend("tensorflow");
if (!success) throw new Error("Could not initialize TensorFlow backend.");
// Register the model saving and loading handlers for the 'file://' URL scheme.
tf.io.registerLoadRouter(file_system_1.nodeFileSystemRouter);
tf.io.registerSaveRouter(file_system_1.nodeFileSystemRouter);
// Register the ProgbarLogger for Model.fit() at verbosity level 1.
tf.registerCallbackConstructor(1, callbacks_1.ProgbarLogger);

},{"b0eb6e5fbeea27b":"2CW5E","ac40bccb1e9ae941":"hadS1","2020ee2950104f3c":"i1BLo","86ee63a0a019cf3e":"8AvI3","94a5d74a60084567":"lVBbf","7e4e36572e701380":"2YCVU","978ac5d68a88a6e7":"4Q85s","16b96b543a3bc969":"1YeyC","936889f66ba28f3e":"71swr","f2d568c82fa2d0b3":"4oI9L","73936caaf27eea3b":"66q6O","51bed1ef73c5bf22":"3VD5v"}],"2CW5E":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.
var tfjs_1 = require("a528e19a6901e4d7");
var _FusedMatMul_1 = require("7c9fe9ab96df2571");
var Abs_1 = require("cd30154b47574ddd");
var Acos_1 = require("db8d3b9bc5bff4cc");
var Acosh_1 = require("1adeb75841657a74");
var Add_1 = require("ab400b44ea1323ce");
var AddN_1 = require("60d7ecdb637930e8");
var All_1 = require("9a4d64adb593600");
var Any_1 = require("1258a6c73bde99fb");
var ArgMax_1 = require("ffc81676ac2cd881");
var ArgMin_1 = require("e22a8446cb969c8b");
var Asin_1 = require("b83c7928a5f15914");
var Asinh_1 = require("b183aa7d013cca35");
var Atan_1 = require("6fdf8fc6deafb1be");
var Atan2_1 = require("fb0be27368bb69ef");
var Atanh_1 = require("a38859eda97fbbae");
var AvgPool_1 = require("90dcf40498bae33");
var AvgPool3D_1 = require("9d4b153f8e2b6255");
var AvgPool3DGrad_1 = require("11d55fe21269bba8");
var AvgPoolGrad_1 = require("c3426b2474fa8840");
var BatchMatMul_1 = require("d31158720b5bbf94");
var BatchToSpaceND_1 = require("8eadf8baed891442");
var Bincount_1 = require("5942ace3e9041550");
var BroadcastArgs_1 = require("a503f417cbb220fe");
var Cast_1 = require("cb522ab21a2fce43");
var Ceil_1 = require("cf61eedc80811f0c");
var ClipByValue_1 = require("59919e2c7d442d1a");
var Complex_1 = require("f080e783f1d0b701");
var ComplexAbs_1 = require("d776fbe91b824a69");
var Concat_1 = require("edc48b38b03fb9f5");
var Conv2D_1 = require("f6d40ecdfc6fad9b");
var Conv2DBackpropFilter_1 = require("9e7448ea1f1d064");
var Conv2DBackpropInput_1 = require("8bc4ae6325c995a1");
var Conv3D_1 = require("9893ed3578ae753f");
var Conv3DBackpropFilterV2_1 = require("31e99df086d83c2e");
var Conv3DBackpropInputV2_1 = require("65a3f85cadf9c2c7");
var Cos_1 = require("f9e0d5ce20538540");
var Cosh_1 = require("2907f699a70e6e7f");
var CropAndResize_1 = require("132ead4611343deb");
var Cumprod_1 = require("815ad5ed418ce0af");
var Cumsum_1 = require("f8994f362250b2b9");
var DepthToSpace_1 = require("532461c7254870e3");
var DepthwiseConv2dNative_1 = require("89d65d2a5574af63");
var DepthwiseConv2dNativeBackpropFilter_1 = require("12ff7d919549c59b");
var DepthwiseConv2dNativeBackpropInput_1 = require("4e599dfff72aa1e3");
var Diag_1 = require("7530e8ae41de1640");
var Dilation2D_1 = require("75adcef4d8991289");
var Dilation2DBackpropFilter_1 = require("a3a4bb54969fb271");
var Dilation2DBackpropInput_1 = require("6fe0fff1ce18eb5c");
var Einsum_1 = require("b4547e954ed0e2db");
var Elu_1 = require("2d2deafe4faac566");
var EluGrad_1 = require("360c48668043aa46");
var Equal_1 = require("1d0f767d7ce6d78a");
var Erf_1 = require("7a6850f0b73f0ee9");
var Exp_1 = require("c942b646db5ef387");
var ExpandDims_1 = require("ed51d24751d0581d");
var Expm1_1 = require("25f0bb41e8059c4f");
var FFT_1 = require("f390ece404422ed6");
var Fill_1 = require("9eeab5dfce2104bd");
var FlipLeftRight_1 = require("87e91fd138c47f56");
var Floor_1 = require("7b72c61fdddaad8d");
var FloorDiv_1 = require("e6a5a051ad17012f");
var FusedBatchNorm_1 = require("d022d7cb20761fd8");
var FusedConv2D_1 = require("8eeb825abd712f84");
var FusedDepthwiseConv2D_1 = require("6969ae9ec79451c8");
var GatherNd_1 = require("545564c5143bd800");
var GatherV2_1 = require("cbce7605adeaa564");
var Greater_1 = require("12e0a29c6dd67796");
var GreaterEqual_1 = require("d881a19b157c16ab");
var Identity_1 = require("2d209cca9dd460c9");
var IFFT_1 = require("4258186c5fdbf9ff");
var Imag_1 = require("3931efedf4c13553");
var IsFinite_1 = require("2fd35aee4e0c6939");
var IsInf_1 = require("cbe85b8b82a1a415");
var IsNan_1 = require("143ed3585157b05d");
var LeakyRelu_1 = require("ddf4efb6879b360d");
var Less_1 = require("c2900a73c1305958");
var LessEqual_1 = require("5d8a6b10f439ad25");
var LinSpace_1 = require("e4f05ca9a41f0822");
var Log_1 = require("bc2cfda46c4edc35");
var Log1p_1 = require("1564d8e968a12b5d");
var LogicalAnd_1 = require("ac8d3ba2a50c46ba");
var LogicalNot_1 = require("f86f31588f9a2f6c");
var LogicalOr_1 = require("59c6024e48a31a34");
var LRN_1 = require("5640c348e816eca");
var LRNGrad_1 = require("69dfea12c04cd083");
var Max_1 = require("36e5f192e9dd882b");
var Maximum_1 = require("1981af176a61891a");
var MaxPool_1 = require("c7a5ac27d2aa1e78");
var MaxPool3D_1 = require("54c6feb9f999b07");
var MaxPool3DGrad_1 = require("734d677fd50a5c07");
var MaxPoolGrad_1 = require("b2ab493308efbe38");
var Mean_1 = require("a51c1709f1086f2b");
var Min_1 = require("c8896970e99c39f9");
var Minimum_1 = require("dff6d5ddd7c6fc3d");
var MirrorPad_1 = require("f65b61bd6a6535eb");
var Mod_1 = require("d3f1f6c8c901900e");
var Multinomial_1 = require("1be7ce2beb8c2dd1");
var Multiply_1 = require("924e9c867f3c000b");
var Neg_1 = require("7fcf0f4014f61b6f");
var NonMaxSuppressionV3_1 = require("4730c74bb137d640");
var NonMaxSuppressionV4_1 = require("ce241e321fa20e48");
var NonMaxSuppressionV5_1 = require("e6bcdeaaf0e05ebc");
var NotEqual_1 = require("225ab3cae4ae84fe");
var OneHot_1 = require("cac0d60de44c6959");
var OnesLike_1 = require("32116a13025bc698");
var Pack_1 = require("502929dd99b15995");
var PadV2_1 = require("5a6fea3c1d7fa3f6");
var Pow_1 = require("40078a29bf0cc077");
var Prelu_1 = require("90942e011c84698d");
var Prod_1 = require("3faaae23024cfc9d");
var Range_1 = require("3809bd7cf48a08c5");
var Real_1 = require("58637c288d98578e");
var RealDiv_1 = require("e78f6e2f6e1e5015");
var Reciprocal_1 = require("e041bbdf996dec5f");
var Relu_1 = require("8dec611141fe6474");
var Relu6_1 = require("dfbc6e247796ac63");
var Reshape_1 = require("4d7333e24cfbcbe5");
var ResizeBilinear_1 = require("2d48aa39703a42a6");
var ResizeBilinearGrad_1 = require("bed3f5adb5ceb627");
var ResizeNearestNeighbor_1 = require("58445efb3fc0e3a8");
var ResizeNearestNeighborGrad_1 = require("f6fa64936f9c1e00");
var Reverse_1 = require("2ca68c07c503111b");
var Round_1 = require("477926550a1e0788");
var Rsqrt_1 = require("da80332d46a449f3");
var ScatterNd_1 = require("73ac874e147f2f8c");
var Select_1 = require("4c938e438349f123");
var Selu_1 = require("4ffbfdfbe147fe25");
var Sigmoid_1 = require("1266deb82d8bae7e");
var Sign_1 = require("dedfdc6517a1b35c");
var Sin_1 = require("2334922d3c85c0dd");
var Sinh_1 = require("587d37d41e361f04");
var Slice_1 = require("552e2ecd1c2eb7c5");
var Softmax_1 = require("a21d2996c443d6f1");
var Softplus_1 = require("74c50b9c4a880e83");
var SpaceToBatchND_1 = require("c5ba73ac078c5732");
var SparseToDense_1 = require("4e06e1f546028890");
var SplitV_1 = require("67ff023633794ff");
var Sqrt_1 = require("c6e263154a490e71");
var Square_1 = require("1fe88727126d5807");
var SquaredDifference_1 = require("328052fc776c75a3");
var StaticRegexReplace_1 = require("3c95c16d69df00d0");
var Step_1 = require("d1de87df49bbcb67");
var StridedSlice_1 = require("317faf35a31b2946");
var Sub_1 = require("94f3cda100c36d65");
var Sum_1 = require("62581cffe2659315");
var Tan_1 = require("a53108fc523ed111");
var Tanh_1 = require("566ed6668968ffe4");
var TensorScatterUpdate_1 = require("b957a865df310b47");
var Tile_1 = require("4a080efafbb3183a");
var TopK_1 = require("919aa74e161e419a");
var Transpose_1 = require("c99e4420c0837924");
var Unique_1 = require("db4778405e48704c");
var Unpack_1 = require("eb044ea995a25769");
var UnsortedSegmentSum_1 = require("5f5aed599959041");
var ZerosLike_1 = require("1b42f1e168f2c42e");
// List all kernel configs here
var kernelConfigs = [
    FFT_1.FFTConfig,
    IFFT_1.IFFTConfig,
    LRN_1.LRNConfig,
    LRNGrad_1.LRNGradConfig,
    _FusedMatMul_1._fusedMatMulConfig,
    Abs_1.absConfig,
    Acos_1.acosConfig,
    Acosh_1.acoshConfig,
    Add_1.addConfig,
    AddN_1.addNConfig,
    All_1.allConfig,
    Any_1.anyConfig,
    ArgMax_1.argMaxConfig,
    ArgMin_1.argMinConfig,
    Asin_1.asinConfig,
    Asinh_1.asinhConfig,
    Atan2_1.atan2Config,
    Atan_1.atanConfig,
    Atanh_1.atanhConfig,
    AvgPool3D_1.avgPool3DConfig,
    AvgPool3DGrad_1.avgPool3DGradConfig,
    AvgPool_1.avgPoolConfig,
    AvgPoolGrad_1.avgPoolGradConfig,
    BatchMatMul_1.batchMatMulConfig,
    BatchToSpaceND_1.batchToSpaceNDConfig,
    BroadcastArgs_1.broadcastArgsConfig,
    Cast_1.castConfig,
    Ceil_1.ceilConfig,
    ClipByValue_1.clipByValueConfig,
    ComplexAbs_1.complexAbsConfig,
    Complex_1.complexConfig,
    Concat_1.concatConfig,
    Conv2DBackpropFilter_1.conv2DBackpropFilterConfig,
    Conv2DBackpropInput_1.conv2DBackpropInputConfig,
    Conv2D_1.conv2DConfig,
    Conv3DBackpropFilterV2_1.conv3DBackpropFilterV2Config,
    Conv3DBackpropInputV2_1.conv3DBackpropInputV2Config,
    Conv3D_1.conv3DConfig,
    Cos_1.cosConfig,
    Cosh_1.coshConfig,
    CropAndResize_1.cropAndResizeConfig,
    Cumprod_1.cumprodConfig,
    Cumsum_1.cumsumConfig,
    Bincount_1.bincountConfig,
    DepthToSpace_1.depthToSpaceConfig,
    DepthwiseConv2dNativeBackpropFilter_1.depthwiseConv2dNativeBackpropFilterConfig,
    DepthwiseConv2dNativeBackpropInput_1.depthwiseConv2dNativeBackpropInputConfig,
    DepthwiseConv2dNative_1.depthwiseConv2dNativeConfig,
    Diag_1.diagConfig,
    Dilation2DBackpropFilter_1.dilation2dBackpropFilterConfig,
    Dilation2DBackpropInput_1.dilation2dBackpropInputConfig,
    Dilation2D_1.dilation2dConfig,
    Elu_1.eluConfig,
    EluGrad_1.eluGradConfig,
    Einsum_1.einsumConfig,
    Equal_1.equalConfig,
    Erf_1.erfConfig,
    Exp_1.expConfig,
    ExpandDims_1.expandDimsConfig,
    Expm1_1.expm1Config,
    Fill_1.fillConfig,
    FlipLeftRight_1.flipLeftRightConfig,
    Floor_1.floorConfig,
    FloorDiv_1.floorDivConfig,
    FusedBatchNorm_1.fusedBatchNormConfig,
    FusedConv2D_1.fusedConv2DConfig,
    FusedDepthwiseConv2D_1.fusedDepthwiseConv2DConfig,
    GatherNd_1.gatherNdConfig,
    GatherV2_1.gatherV2Config,
    Greater_1.greaterConfig,
    GreaterEqual_1.greaterEqualConfig,
    Identity_1.identityConfig,
    Imag_1.imagConfig,
    IsFinite_1.isFiniteConfig,
    IsInf_1.isInfConfig,
    IsNan_1.isNanConfig,
    LeakyRelu_1.leakyReluConfig,
    Less_1.lessConfig,
    LessEqual_1.lessEqualConfig,
    LinSpace_1.linSpaceConfig,
    Log1p_1.log1pConfig,
    Log_1.logConfig,
    LogicalAnd_1.logicalAndConfig,
    LogicalNot_1.logicalNotConfig,
    LogicalOr_1.logicalOrConfig,
    Max_1.maxConfig,
    MaxPool3D_1.maxPool3DConfig,
    MaxPool3DGrad_1.maxPool3DGradConfig,
    MaxPool_1.maxPoolConfig,
    MaxPoolGrad_1.maxPoolGradConfig,
    Maximum_1.maximumConfig,
    Mean_1.meanConfig,
    Min_1.minConfig,
    Minimum_1.minimumConfig,
    MirrorPad_1.mirrorPadConfig,
    Mod_1.modConfig,
    Multinomial_1.multinomialConfig,
    Multiply_1.multiplyConfig,
    Neg_1.negConfig,
    NonMaxSuppressionV3_1.nonMaxSuppressionV3Config,
    NonMaxSuppressionV4_1.nonMaxSuppressionV4Config,
    NonMaxSuppressionV5_1.nonMaxSuppressionV5Config,
    NotEqual_1.notEqualConfig,
    OneHot_1.oneHotConfig,
    OnesLike_1.onesLikeConfig,
    Pack_1.packConfig,
    PadV2_1.padV2Config,
    Pow_1.powConfig,
    Prelu_1.preluConfig,
    Prod_1.prodConfig,
    Range_1.rangeConfig,
    Real_1.realConfig,
    RealDiv_1.realDivConfig,
    Reciprocal_1.reciprocalConfig,
    Relu6_1.relu6Config,
    Relu_1.reluConfig,
    Reshape_1.reshapeConfig,
    ResizeBilinear_1.resizeBilinearConfig,
    ResizeBilinearGrad_1.resizeBilinearGradConfig,
    ResizeNearestNeighbor_1.resizeNearestNeighborConfig,
    ResizeNearestNeighborGrad_1.resizeNearestNeighborGradConfig,
    Reverse_1.reverseConfig,
    Round_1.roundConfig,
    Rsqrt_1.rsqrtConfig,
    ScatterNd_1.scatterNdConfig,
    Select_1.selectConfig,
    Selu_1.seluConfig,
    Sigmoid_1.sigmoidConfig,
    Sign_1.signConfig,
    Sin_1.sinConfig,
    Sinh_1.sinhConfig,
    Slice_1.sliceConfig,
    Softmax_1.softmaxConfig,
    Softplus_1.softplusConfig,
    SpaceToBatchND_1.spaceToBatchNDConfig,
    SparseToDense_1.sparseToDenseConfig,
    SplitV_1.splitVConfig,
    Sqrt_1.sqrtConfig,
    Square_1.squareConfig,
    SquaredDifference_1.squaredDifferenceConfig,
    StaticRegexReplace_1.staticRegexReplaceConfig,
    Step_1.stepConfig,
    StridedSlice_1.stridedSliceConfig,
    Sub_1.subConfig,
    Sum_1.sumConfig,
    Tan_1.tanConfig,
    Tanh_1.tanhConfig,
    TensorScatterUpdate_1.tensorScatterUpdateConfig,
    Tile_1.tileConfig,
    TopK_1.topKConfig,
    Transpose_1.transposeConfig,
    Unique_1.uniqueConfig,
    Unpack_1.unpackConfig,
    UnsortedSegmentSum_1.unsortedSegmentSumConfig,
    ZerosLike_1.zerosLikeConfig
];
for(var _i = 0, kernelConfigs_1 = kernelConfigs; _i < kernelConfigs_1.length; _i++){
    var kernelConfig = kernelConfigs_1[_i];
    (0, tfjs_1.registerKernel)(kernelConfig);
}

},{"a528e19a6901e4d7":"hadS1","7c9fe9ab96df2571":"9hGeP","cd30154b47574ddd":"fSXGg","db8d3b9bc5bff4cc":"awrpb","1adeb75841657a74":"bFsMB","ab400b44ea1323ce":"5wDQc","60d7ecdb637930e8":"6pTwM","9a4d64adb593600":"i07Kb","1258a6c73bde99fb":"cgUhO","ffc81676ac2cd881":"1M6qH","e22a8446cb969c8b":"7oDs6","b83c7928a5f15914":"zVFmB","b183aa7d013cca35":"hcD3M","6fdf8fc6deafb1be":"jjqdo","fb0be27368bb69ef":"7ADzL","a38859eda97fbbae":"2JjPw","90dcf40498bae33":"g9G5B","9d4b153f8e2b6255":"iBmDF","11d55fe21269bba8":"f1GDX","c3426b2474fa8840":"iPsFf","d31158720b5bbf94":"lerop","8eadf8baed891442":"6tmQW","5942ace3e9041550":"iR3H3","a503f417cbb220fe":"hzNwZ","cb522ab21a2fce43":"aITqz","cf61eedc80811f0c":"jVBFM","59919e2c7d442d1a":"2Y76z","f080e783f1d0b701":"biLlR","d776fbe91b824a69":"aZM7P","edc48b38b03fb9f5":"fTUTW","f6d40ecdfc6fad9b":"jetZD","9e7448ea1f1d064":"7iOij","8bc4ae6325c995a1":"fUEPn","9893ed3578ae753f":"3MmS9","31e99df086d83c2e":"bjck6","65a3f85cadf9c2c7":"7J8En","f9e0d5ce20538540":"cLKwg","2907f699a70e6e7f":"dx82A","132ead4611343deb":"e44lb","815ad5ed418ce0af":"b2Q7S","f8994f362250b2b9":"lIC0e","532461c7254870e3":"au0dN","89d65d2a5574af63":"bnj5u","12ff7d919549c59b":"geGL4","4e599dfff72aa1e3":"6gQT8","7530e8ae41de1640":"eGc5I","75adcef4d8991289":"9MXi6","a3a4bb54969fb271":"kj7jB","6fe0fff1ce18eb5c":"ixHqt","b4547e954ed0e2db":"iGhVY","2d2deafe4faac566":"gW7LK","360c48668043aa46":"57NZ6","1d0f767d7ce6d78a":"cb1r4","7a6850f0b73f0ee9":"koqSD","c942b646db5ef387":"l3fb5","ed51d24751d0581d":"lQoGN","25f0bb41e8059c4f":"bnyd2","f390ece404422ed6":"3LbYz","9eeab5dfce2104bd":"gka0h","87e91fd138c47f56":"4quxP","7b72c61fdddaad8d":"ezxvs","e6a5a051ad17012f":"hQEvD","d022d7cb20761fd8":"eEEpj","8eeb825abd712f84":"hC9rP","6969ae9ec79451c8":"5E6wv","545564c5143bd800":"7eK7s","cbce7605adeaa564":"b794N","12e0a29c6dd67796":"6EZVF","d881a19b157c16ab":"9Akbh","2d209cca9dd460c9":"atIkl","4258186c5fdbf9ff":"6o99g","3931efedf4c13553":"5H52Y","2fd35aee4e0c6939":"4Qv6W","cbe85b8b82a1a415":"dsWD8","143ed3585157b05d":"4UgH6","ddf4efb6879b360d":"jxm7C","c2900a73c1305958":"cq8s4","5d8a6b10f439ad25":"eDaOa","e4f05ca9a41f0822":"1FJam","bc2cfda46c4edc35":"1F1dd","1564d8e968a12b5d":"5JqFE","ac8d3ba2a50c46ba":"9YdRJ","f86f31588f9a2f6c":"eaYT5","59c6024e48a31a34":"7gRlF","5640c348e816eca":"detYc","69dfea12c04cd083":"1myAw","36e5f192e9dd882b":"7Kv6O","1981af176a61891a":"1ILpv","c7a5ac27d2aa1e78":"kx5tj","54c6feb9f999b07":"8jri0","734d677fd50a5c07":"49kc9","b2ab493308efbe38":"j7eMz","a51c1709f1086f2b":"fmVFT","c8896970e99c39f9":"8X7Vj","dff6d5ddd7c6fc3d":"4kQ6w","f65b61bd6a6535eb":"6ZIm8","d3f1f6c8c901900e":"2KqsU","1be7ce2beb8c2dd1":"gTfx5","924e9c867f3c000b":"8ou37","7fcf0f4014f61b6f":"lmtV4","4730c74bb137d640":"hZ3A9","ce241e321fa20e48":"eGm9t","e6bcdeaaf0e05ebc":"3uHWN","225ab3cae4ae84fe":"76Lsj","cac0d60de44c6959":"3FQhy","32116a13025bc698":"7y8Bt","502929dd99b15995":"jOgRY","5a6fea3c1d7fa3f6":"lDZbD","40078a29bf0cc077":"9cn8A","90942e011c84698d":"9wAEu","3faaae23024cfc9d":"izwMZ","3809bd7cf48a08c5":"j4Fpn","58637c288d98578e":"3zBCx","e78f6e2f6e1e5015":"2aZi2","e041bbdf996dec5f":"hxSrE","8dec611141fe6474":"hU4F9","dfbc6e247796ac63":"eZzhs","4d7333e24cfbcbe5":"iw3MS","2d48aa39703a42a6":"khUA9","bed3f5adb5ceb627":"cY5hV","58445efb3fc0e3a8":"8oGjj","f6fa64936f9c1e00":"47vM8","2ca68c07c503111b":"3JRig","477926550a1e0788":"fc2RO","da80332d46a449f3":"73GqI","73ac874e147f2f8c":"4NF0R","4c938e438349f123":"cGWPa","4ffbfdfbe147fe25":"gYEP4","1266deb82d8bae7e":"dYjZi","dedfdc6517a1b35c":"b3U6H","2334922d3c85c0dd":"21RSs","587d37d41e361f04":"9uXtE","552e2ecd1c2eb7c5":"3w1Al","a21d2996c443d6f1":"j7rjx","74c50b9c4a880e83":"iPTk8","c5ba73ac078c5732":"Ivgvw","4e06e1f546028890":"g66ny","67ff023633794ff":"bZXXJ","c6e263154a490e71":"4vw28","1fe88727126d5807":"YIRk8","328052fc776c75a3":"ht8H5","3c95c16d69df00d0":"40dkc","d1de87df49bbcb67":"9ngih","317faf35a31b2946":"gvgaL","94f3cda100c36d65":"aMWXs","62581cffe2659315":"ds089","a53108fc523ed111":"jw98q","566ed6668968ffe4":"a61gY","b957a865df310b47":"l1okl","4a080efafbb3183a":"4OpxP","919aa74e161e419a":"22JJD","c99e4420c0837924":"eYyPd","db4778405e48704c":"bAS50","eb044ea995a25769":"2IFuc","5f5aed599959041":"f1RQZ","1b42f1e168f2c42e":"71LAu"}],"9hGeP":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports._fusedMatMulConfig = void 0;
var tfjs_1 = require("b5a75128120e4198");
exports._fusedMatMulConfig = {
    kernelName: tfjs_1._FusedMatMul,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b, bias = _a.bias, preluActivationWeights = _a.preluActivationWeights;
        var backend = args.backend;
        var _b = args.attrs, transposeA = _b.transposeA, transposeB = _b.transposeB, activation = _b.activation, leakyreluAlpha = _b.leakyreluAlpha;
        // Core TensorFlow does not have a fused BatchMatMul op. Combine calls to
        // achieve the same results:
        return (0, tfjs_1.tidy)(function() {
            var result = (0, tfjs_1.matMul)(a, b, transposeA, transposeB);
            if (bias != null) result = (0, tfjs_1.add)(result, bias);
            result = backend.applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);
            return result;
        });
    }
};

},{"b5a75128120e4198":"hadS1"}],"fSXGg":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.absConfig = void 0;
var tfjs_1 = require("8195fcbb35546360");
var nodejs_kernel_backend_1 = require("32491f2b0f46dafb");
exports.absConfig = {
    kernelName: tfjs_1.Abs,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        if (x.dtype === "complex64") {
            var opAttrs = [
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tout", "float32")
            ];
            return backend.executeSingleOutput("ComplexAbs", opAttrs, [
                x
            ]);
        }
        return backend.executeSingleInput(tfjs_1.Abs, x);
    }
};

},{"8195fcbb35546360":"hadS1","32491f2b0f46dafb":"4Q85s"}],"4Q85s":[function(require,module,exports) {
var process = require("39cd1a106e4e778e");
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ensureTensorflowBackend = exports.createOpAttr = exports.createTensorsTypeOpAttr = exports.getTFDType = exports.nodeBackend = exports.NodeJSKernelBackend = void 0;
var tf = require("3a5335d47e3fdfe7");
var tfjs_1 = require("3a5335d47e3fdfe7");
var util_1 = require("614541cc1b9ef6a9");
var int64_tensors_1 = require("b2468ac75806e2a2");
// tslint:disable-next-line:no-require-imports
var messages = require("a4077dccdc6b5ceb");
var NodeJSKernelBackend = /** @class */ function(_super) {
    __extends(NodeJSKernelBackend, _super);
    function NodeJSKernelBackend(binding, packageName) {
        var _this = _super.call(this) || this;
        _this.binding = binding;
        _this.isGPUPackage = packageName === "@tensorflow/tfjs-node-gpu";
        _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();
        _this.tensorMap = new tf.DataStorage(_this, tf.engine());
        return _this;
    }
    NodeJSKernelBackend.prototype.getDTypeInteger = function(dtype) {
        switch(dtype){
            case "float32":
                return this.binding.TF_FLOAT;
            case "int32":
                return this.binding.TF_INT32;
            case "bool":
                return this.binding.TF_BOOL;
            case "complex64":
                return this.binding.TF_COMPLEX64;
            case "string":
                return this.binding.TF_STRING;
            default:
                throw new Error("Unsupported DType: ".concat(dtype));
        }
    };
    NodeJSKernelBackend.prototype.typeAttributeFromTensor = function(value) {
        return this.getDTypeInteger(value.dtype);
    };
    // Creates a new Tensor and maps the dataId to the passed in ID.
    NodeJSKernelBackend.prototype.createOutputTensor = function(metadata) {
        var newId = {};
        this.tensorMap.set(newId, {
            shape: metadata.shape,
            dtype: metadata.dtype,
            id: metadata.id,
            values: null,
            refCount: 1
        });
        var dtype;
        switch(metadata.dtype){
            case this.binding.TF_FLOAT:
                dtype = "float32";
                break;
            case this.binding.TF_INT32:
                dtype = "int32";
                break;
            case this.binding.TF_INT64:
                console.warn("INT64 output tensor will be stored as BigInt64Array.");
                // INT64 is not supported in TFJS yet, cast it to int32.
                dtype = "int32";
                break;
            case this.binding.TF_BOOL:
                dtype = "bool";
                break;
            case this.binding.TF_COMPLEX64:
                dtype = "complex64";
                break;
            case this.binding.TF_STRING:
                dtype = "string";
                break;
            case this.binding.TF_RESOURCE:
                // NOTE(cais): We currently represent resource-type Tensors
                // as string of ubytes.
                dtype = "string";
                break;
            case this.binding.TF_UINT8:
                // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not
                // supported in TFJS yet, cast it to int32.
                dtype = "int32";
                break;
            default:
                throw new Error("Unknown dtype enum ".concat(metadata.dtype));
        }
        // TODO(yassogba) Enable this once all the kernels are removed from backend.
        // We can then change the return type from Tensor to TensorInfo.
        // return {dataId: newId, shape: metadata.shape, dtype};
        var tensorInfo = {
            dataId: newId,
            shape: metadata.shape,
            dtype: dtype
        };
        return tf.engine().makeTensorFromTensorInfo(tensorInfo);
    };
    // Prepares Tensor instances for Op execution.
    NodeJSKernelBackend.prototype.getInputTensorIds = function(tensors) {
        var ids = [];
        for(var i = 0; i < tensors.length; i++)if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {
            // Then `tensors[i]` is a Int64Scalar, which we currently represent
            // using an `Int32Array`.
            var value = tensors[i].valueArray;
            var id = this.binding.createTensor([], this.binding.TF_INT64, value);
            ids.push(id);
        } else {
            var info = this.tensorMap.get(tensors[i].dataId);
            // TODO - what about ID in this case? Handle in write()??
            if (info.values != null) {
                // Values were delayed to write into the TensorHandle. Do that before
                // Op execution and clear stored values.
                info.id = this.binding.createTensor(info.shape, info.dtype, info.values);
                info.values = null;
            }
            ids.push(info.id);
        }
        return ids;
    };
    NodeJSKernelBackend.prototype.createReductionOpAttrs = function(tensor, keepDims) {
        if (keepDims === void 0) keepDims = false;
        return [
            {
                name: "keep_dims",
                type: this.binding.TF_ATTR_BOOL,
                value: keepDims
            },
            createTensorsTypeOpAttr("T", tensor.dtype),
            createTensorsTypeOpAttr("Tidx", "int32")
        ];
    };
    NodeJSKernelBackend.prototype.floatPrecision = function() {
        return 32;
    };
    NodeJSKernelBackend.prototype.epsilon = function() {
        return _super.prototype.epsilon.call(this);
    };
    /**
     * Executes an op that has a single input and output.
     *
     * Helper function to wrap executeSingleOutput in a particular case.
     * @param name The name of the Op to execute.
     * @param input The input Tensor for the Op.
     */ NodeJSKernelBackend.prototype.executeSingleInput = function(name, input) {
        var opAttrs = [
            createTensorsTypeOpAttr("T", input.dtype)
        ];
        return this.executeSingleOutput(name, opAttrs, [
            input
        ]);
    };
    /**
     * Executes a TensorFlow Eager Op that provides one output Tensor.
     * @param name The name of the Op to execute.
     * @param opAttrs The list of Op attributes required to execute.
     * @param inputs The list of input Tensors for the Op.
     * @return A resulting Tensor from Op execution.
     */ NodeJSKernelBackend.prototype.executeSingleOutput = function(name, opAttrs, inputs) {
        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);
        return this.createOutputTensor(outputMetadata[0]);
    };
    /**
     * Executes a TensorFlow Eager Op that provides multiple output Tensors.
     * @param name The name of the Op to execute.
     * @param opAttrs The list of Op attributes required to execute.
     * @param inputs The list of input Tensors for the Op.
     * @param numOutputs The number of output Tensors for Op execution.
     * @return A resulting Tensor array from Op execution.
     */ NodeJSKernelBackend.prototype.executeMultipleOutputs = function(name, opAttrs, inputs, numOutputs) {
        var _this = this;
        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);
        return outputMetadata.map(function(m) {
            return _this.createOutputTensor(m);
        });
    };
    NodeJSKernelBackend.prototype.numDataIds = function() {
        return this.tensorMap.numDataIds();
    };
    NodeJSKernelBackend.prototype.dispose = function() {};
    NodeJSKernelBackend.prototype.read = function(dataId) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.readSync(dataId)
                ];
            });
        });
    };
    NodeJSKernelBackend.prototype.readSync = function(dataId) {
        if (!this.tensorMap.has(dataId)) throw new Error("Tensor ".concat(dataId, " was not registered!"));
        var info = this.tensorMap.get(dataId);
        if (info.values != null) return info.values;
        else return this.binding.tensorDataSync(info.id);
    };
    /**
     * Dispose the memory if the dataId has 0 refCount. Return true if the memory
     * is released, false otherwise.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */ NodeJSKernelBackend.prototype.disposeData = function(dataId, force) {
        if (force === void 0) force = false;
        // No-op if already disposed.
        if (this.tensorMap.has(dataId)) {
            var id = this.tensorMap.get(dataId).id;
            this.tensorMap.get(dataId).refCount--;
            if (!force && this.tensorMap.get(dataId).refCount > 0) return false;
            if (id != null && id >= 0) this.binding.deleteTensor(id);
            this.tensorMap.delete(dataId);
        }
        return true;
    };
    /** Return refCount of a `TensorData`. */ NodeJSKernelBackend.prototype.refCount = function(dataId) {
        if (this.tensorMap.has(dataId)) {
            var tensorData = this.tensorMap.get(dataId);
            return tensorData.refCount;
        }
        return 0;
    };
    NodeJSKernelBackend.prototype.incRef = function(dataId) {
        this.tensorMap.get(dataId).refCount++;
    };
    NodeJSKernelBackend.prototype.move = function(dataId, values, shape, dtype, refCount) {
        this.tensorMap.set(dataId, {
            shape: shape,
            dtype: getTFDType(dtype),
            values: values,
            id: -1,
            refCount: refCount
        });
    };
    NodeJSKernelBackend.prototype.write = function(values, shape, dtype) {
        var dataId = {};
        this.move(dataId, values, shape, dtype, 1);
        return dataId;
    };
    NodeJSKernelBackend.prototype.applyActivation = function(input, activation, preluActivationWeights, leakyreluAlpha) {
        var result = input;
        if (activation != null) {
            if (activation === "linear") ;
            else if (activation === "relu") result = tf.relu(result);
            else if (activation === "prelu") result = tf.prelu(result, preluActivationWeights);
            else if (activation === "leakyrelu") result = tf.leakyRelu(result, leakyreluAlpha);
            else if (activation === "elu") result = tf.elu(result);
            else if (activation === "relu6") result = tf.relu6(result);
            else if (activation === "sigmoid") result = tf.sigmoid(result);
            else throw new Error("Activation: ".concat(activation, " has not been implemented for the Node.js backend"));
        }
        return result;
    };
    NodeJSKernelBackend.prototype.divide = function(a, b) {
        var opAttrs = [
            createTensorsTypeOpAttr("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return this.executeSingleOutput("Div", opAttrs, [
            a,
            b
        ]);
    };
    NodeJSKernelBackend.prototype.divNoNan = function(a, b) {
        var opAttrs = [
            createTensorsTypeOpAttr("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return this.executeSingleOutput("DivNoNan", opAttrs, [
            a,
            b
        ]);
    };
    NodeJSKernelBackend.prototype.where = function(condition) {
        return this.executeSingleOutput("Where", [], [
            condition
        ]);
    };
    NodeJSKernelBackend.prototype.topKValues = function(x, k) {
        throw new Error("Method not implemented.");
    };
    NodeJSKernelBackend.prototype.topKIndices = function(x, k) {
        throw new Error("Method not implemented.");
    };
    NodeJSKernelBackend.prototype.int = function(x) {
        throw new Error("Method not implemented.");
    };
    NodeJSKernelBackend.prototype.decodeJpeg = function(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {
        var opAttrs = [
            {
                name: "channels",
                type: this.binding.TF_ATTR_INT,
                value: channels
            },
            {
                name: "ratio",
                type: this.binding.TF_ATTR_INT,
                value: ratio
            },
            {
                name: "fancy_upscaling",
                type: this.binding.TF_ATTR_BOOL,
                value: fancyUpscaling
            },
            {
                name: "try_recover_truncated",
                type: this.binding.TF_ATTR_BOOL,
                value: tryRecoverTruncated
            },
            {
                name: "acceptable_fraction",
                type: this.binding.TF_ATTR_FLOAT,
                value: acceptableFraction
            },
            {
                name: "dct_method",
                type: this.binding.TF_ATTR_STRING,
                value: dctMethod
            }
        ];
        var inputArgs = [
            (0, tfjs_1.scalar)(contents, "string")
        ];
        return this.executeSingleOutput("DecodeJpeg", opAttrs, inputArgs);
    };
    NodeJSKernelBackend.prototype.decodePng = function(contents, channels) {
        var opAttrs = [
            {
                name: "channels",
                type: this.binding.TF_ATTR_INT,
                value: channels
            }
        ];
        var inputArgs = [
            (0, tfjs_1.scalar)(contents, "string")
        ];
        return this.executeSingleOutput("DecodePng", opAttrs, inputArgs);
    };
    NodeJSKernelBackend.prototype.decodeBmp = function(contents, channels) {
        var opAttrs = [
            {
                name: "channels",
                type: this.binding.TF_ATTR_INT,
                value: channels
            }
        ];
        var inputArgs = [
            (0, tfjs_1.scalar)(contents, "string")
        ];
        return this.executeSingleOutput("DecodeBmp", opAttrs, inputArgs);
    };
    NodeJSKernelBackend.prototype.decodeGif = function(contents) {
        var inputArgs = [
            (0, tfjs_1.scalar)(contents, "string")
        ];
        return this.executeSingleOutput("DecodeGif", [], inputArgs);
    };
    NodeJSKernelBackend.prototype.executeEncodeImageOp = function(name, opAttrs, imageData, imageShape) {
        var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);
        var outputMetadata = this.binding.executeOp(name, opAttrs, [
            inputTensorId
        ], 1);
        this.binding.deleteTensor(inputTensorId);
        var outputTensorInfo = outputMetadata[0];
        // prevent the tensor data from being converted to a UTF8 string, since
        // the encoded data is not valid UTF8
        outputTensorInfo.dtype = this.binding.TF_UINT8;
        return this.createOutputTensor(outputTensorInfo);
    };
    NodeJSKernelBackend.prototype.encodeJpeg = function(imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {
        var opAttrs = [
            {
                name: "format",
                type: this.binding.TF_ATTR_STRING,
                value: format
            },
            {
                name: "quality",
                type: this.binding.TF_ATTR_INT,
                value: quality
            },
            {
                name: "progressive",
                type: this.binding.TF_ATTR_BOOL,
                value: progressive
            },
            {
                name: "optimize_size",
                type: this.binding.TF_ATTR_BOOL,
                value: optimizeSize
            },
            {
                name: "chroma_downsampling",
                type: this.binding.TF_ATTR_BOOL,
                value: chromaDownsampling
            },
            {
                name: "density_unit",
                type: this.binding.TF_ATTR_STRING,
                value: densityUnit
            },
            {
                name: "x_density",
                type: this.binding.TF_ATTR_INT,
                value: xDensity
            },
            {
                name: "y_density",
                type: this.binding.TF_ATTR_INT,
                value: yDensity
            },
            {
                name: "xmp_metadata",
                type: this.binding.TF_ATTR_STRING,
                value: xmpMetadata
            }
        ];
        return this.executeEncodeImageOp("EncodeJpeg", opAttrs, imageData, imageShape);
    };
    NodeJSKernelBackend.prototype.encodePng = function(imageData, imageShape, compression) {
        var opAttrs = [
            {
                name: "compression",
                type: this.binding.TF_ATTR_INT,
                value: compression
            }
        ];
        return this.executeEncodeImageOp("EncodePng", opAttrs, imageData, imageShape);
    };
    NodeJSKernelBackend.prototype.deleteSavedModel = function(id) {
        this.binding.deleteSavedModel(id);
    };
    NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function(path, tags) {
        return this.binding.loadSavedModel(path, tags);
    };
    NodeJSKernelBackend.prototype.getMappedInputTensorIds = function(inputs, inputTensorInfos) {
        var tensorIds = this.getInputTensorIds(inputs);
        var newTensors = [];
        for(var i = 0; i < inputs.length; i++)if (inputTensorInfos[i] != null) {
            if (inputTensorInfos[i].tfDtype === "DT_UINT8") {
                var data = Uint8Array.from(inputs[i].dataSync());
                var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);
                tensorIds[i] = inputTensorId;
                newTensors.push(i);
            } else if (inputTensorInfos[i].tfDtype === "DT_INT64") {
                var data = (0, int64_tensors_1.encodeInt32ArrayAsInt64)(inputs[i].dataSync());
                var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);
                tensorIds[i] = inputTensorId;
                newTensors.push(i);
            }
        }
        return {
            tensorIds: tensorIds,
            newTensors: newTensors
        };
    };
    NodeJSKernelBackend.prototype.runSavedModel = function(id, inputs, inputTensorInfos, outputOpNames) {
        var _this = this;
        var _a = this.getMappedInputTensorIds(inputs, inputTensorInfos), tensorIds = _a.tensorIds, newTensors = _a.newTensors;
        var outputMetadata = this.binding.runSavedModel(id, tensorIds, inputTensorInfos.map(function(info) {
            return info.name;
        }).join(","), outputOpNames.join(","));
        for(var i = 0; i < tensorIds.length; i++)if (newTensors.includes(i)) this.binding.deleteTensor(tensorIds[i]);
        return outputMetadata.map(function(m) {
            return _this.createOutputTensor(m);
        });
    };
    // ------------------------------------------------------------
    // TensorBoard-related (tfjs-node-specific) backend kernels.
    NodeJSKernelBackend.prototype.summaryWriter = function(logdir) {
        var opAttrs = [
            {
                name: "shared_name",
                type: this.binding.TF_ATTR_STRING,
                value: "logdir:".concat(logdir)
            },
            {
                name: "container",
                type: this.binding.TF_ATTR_STRING,
                value: ""
            }
        ];
        var writerResource = this.executeSingleOutput("SummaryWriter", opAttrs, []);
        return writerResource;
    };
    NodeJSKernelBackend.prototype.createSummaryFileWriter = function(resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {
        var inputArgs = [
            resourceHandle,
            (0, tfjs_1.scalar)(logdir),
            (0, tfjs_1.scalar)(maxQueue == null ? 10 : maxQueue, "int32"),
            (0, tfjs_1.scalar)(flushMillis == null ? 120000 : flushMillis, "int32"),
            (0, tfjs_1.scalar)(filenameSuffix == null ? ".v2" : filenameSuffix)
        ];
        this.executeMultipleOutputs("CreateSummaryFileWriter", [], inputArgs, 0);
    };
    NodeJSKernelBackend.prototype.writeScalarSummary = function(resourceHandle, step, name, value) {
        var _this = this;
        (0, tfjs_1.tidy)(function() {
            tfjs_1.util.assert(Number.isInteger(step), function() {
                return "step is expected to be an integer, but is instead ".concat(step);
            });
            var inputArgs = [
                resourceHandle,
                new int64_tensors_1.Int64Scalar(step),
                (0, tfjs_1.scalar)(name, "string")
            ];
            var typeAttr;
            if (typeof value === "number") {
                inputArgs.push((0, tfjs_1.scalar)(value));
                typeAttr = _this.binding.TF_FLOAT;
            } else {
                // `value` is a Scalar.
                tfjs_1.util.assert(value.rank === 0, function() {
                    return "A non-scalar tensor (rank ".concat(value.rank, ") is passed to ") + "writeScalarSummary()";
                });
                inputArgs.push(value);
                typeAttr = _this.typeAttributeFromTensor(value);
            }
            var opAttrs = [
                {
                    name: "T",
                    type: _this.binding.TF_ATTR_TYPE,
                    value: typeAttr
                }
            ];
            var ids = _this.getInputTensorIds(inputArgs);
            _this.binding.executeOp("WriteScalarSummary", opAttrs, ids, 0);
            // release the tensorflow tensor for Int64Scalar value of step
            _this.binding.deleteTensor(ids[1]);
        });
    };
    NodeJSKernelBackend.prototype.writeHistogramSummary = function(resourceHandle, step, name, data, bucketCount, description) {
        var _this = this;
        (0, tfjs_1.tidy)(function() {
            tfjs_1.util.assert(Number.isInteger(step), function() {
                return "step is expected to be an integer, but is instead ".concat(step);
            });
            // We use the WriteSummary op, and not WriteHistogramSummary. The
            // difference is that WriteHistogramSummary takes a tensor of any shape,
            // and places the values in 30 buckets, while WriteSummary expects a
            // tensor which already describes the bucket widths and counts.
            //
            // If we were to use WriteHistogramSummary, we wouldn't have to
            // implement the "bucketization" of the input tensor, but we also
            // wouldn't have control over the number of buckets, or the description
            // of the graph.
            //
            // Therefore, we instead use WriteSummary, which makes it possible to
            // support these features. However, the trade-off is that we have to
            // implement our own "bucketization", and have to write the summary as a
            // protobuf message.
            var content = new messages.HistogramPluginData().setVersion(0);
            var pluginData = new messages.SummaryMetadata.PluginData().setPluginName("histograms").setContent(content.serializeBinary());
            var summary = new messages.SummaryMetadata().setPluginData(pluginData).setDisplayName(null).setSummaryDescription(description);
            var summaryTensor = (0, tfjs_1.scalar)(summary.serializeBinary(), "string");
            var nameTensor = (0, tfjs_1.scalar)(name, "string");
            var stepScalar = new int64_tensors_1.Int64Scalar(step);
            var buckets = _this.buckets(data, bucketCount);
            tfjs_1.util.assert(buckets.rank === 2 && buckets.shape[1] === 3, function() {
                return "Expected buckets to have shape [k, 3], but they had shape ".concat(buckets.shape);
            });
            tfjs_1.util.assert(buckets.dtype === "float32", function() {
                return "Expected buckets to have dtype float32, but they had dtype ".concat(buckets.dtype);
            });
            var inputArgs = [
                resourceHandle,
                stepScalar,
                buckets,
                nameTensor,
                summaryTensor
            ];
            var typeAttr = _this.typeAttributeFromTensor(buckets);
            var opAttrs = [
                {
                    name: "T",
                    type: _this.binding.TF_ATTR_TYPE,
                    value: typeAttr
                }
            ];
            var ids = _this.getInputTensorIds(inputArgs);
            _this.binding.executeOp("WriteSummary", opAttrs, ids, 0);
            // release the tensorflow tensor for Int64Scalar value of step
            _this.binding.deleteTensor(ids[1]);
        });
    };
    NodeJSKernelBackend.prototype.flushSummaryWriter = function(resourceHandle) {
        var inputArgs = [
            resourceHandle
        ];
        this.executeMultipleOutputs("FlushSummaryWriter", [], inputArgs, 0);
    };
    /**
     * Group data into histogram buckets.
     *
     * @param data A `Tensor` of any shape. Must be castable to `float32`
     * @param bucketCount Optional positive `number`
     * @returns A `Tensor` of shape `[k, 3]` and type `float32`. The `i`th row
     *     is
     *   a triple `[leftEdge, rightEdge, count]` for a single bucket. The value
     * of `k` is either `bucketCount`, `1` or `0`.
     */ NodeJSKernelBackend.prototype.buckets = function(data, bucketCount) {
        if (data.size === 0) return tf.tensor([], [
            0,
            3
        ], "float32");
        // 30 is the default number of buckets in the TensorFlow Python
        // implementation. See
        // https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/histogram/summary_v2.py
        bucketCount = bucketCount !== undefined ? bucketCount : 30;
        tfjs_1.util.assert(Number.isInteger(bucketCount) && bucketCount > 0, function() {
            return "Expected bucket count to be a strictly positive integer, but it was " + "".concat(bucketCount);
        });
        data = data.flatten();
        data = data.cast("float32");
        var min = data.min();
        var max = data.max();
        var range = max.sub(min);
        var isSingular = range.equal(0).arraySync() !== 0;
        if (isSingular) {
            var center = min;
            var bucketStart = center.sub(0.5);
            var bucketEnd = center.add(0.5);
            var bucketCounts_1 = tf.scalar(data.size, "float32");
            return tf.concat([
                bucketStart,
                bucketEnd,
                bucketCounts_1
            ]).reshape([
                1,
                3
            ]);
        }
        var bucketWidth = range.div(bucketCount);
        var offsets = data.sub(min);
        var bucketIndices = offsets.floorDiv(bucketWidth).cast("int32");
        var clampedIndices = tf.minimum(bucketIndices, bucketCount - 1).cast("int32");
        var oneHots = tf.oneHot(clampedIndices, bucketCount);
        var bucketCounts = oneHots.sum(0).cast("int32");
        var edges = tf.linspace(min.arraySync(), max.arraySync(), bucketCount + 1);
        // Ensure last value in edges is max (TF's linspace op doesn't do this)
        edges = tf.concat([
            edges.slice(0, bucketCount),
            max.reshape([
                1
            ])
        ], 0);
        var leftEdges = edges.slice(0, bucketCount);
        var rightEdges = edges.slice(1, bucketCount);
        return tf.stack([
            leftEdges,
            rightEdges,
            bucketCounts.cast("float32")
        ]).transpose();
    };
    // ~ TensorBoard-related (tfjs-node-specific) backend kernels.
    // ------------------------------------------------------------
    NodeJSKernelBackend.prototype.memory = function() {
        // Due to automatic garbage collection, the numbers are unreliable.
        // TODO(kreeger): Since there is finalization in C, count the true
        // number of undisposed tensors.
        return {
            unreliable: true
        };
    };
    NodeJSKernelBackend.prototype.time = function(f) {
        return __awaiter(this, void 0, void 0, function() {
            var start, elapsed;
            return __generator(this, function(_a) {
                start = process.hrtime();
                f();
                elapsed = process.hrtime(start);
                return [
                    2 /*return*/ ,
                    {
                        kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000
                    }
                ];
            });
        });
    };
    NodeJSKernelBackend.prototype.getNumOfSavedModels = function() {
        return this.binding.getNumOfSavedModels();
    };
    NodeJSKernelBackend.prototype.getNumOfTFTensors = function() {
        return this.binding.getNumOfTensors();
    };
    return NodeJSKernelBackend;
}(tfjs_1.KernelBackend);
exports.NodeJSKernelBackend = NodeJSKernelBackend;
/** Returns an instance of the Node.js backend. */ function nodeBackend() {
    return tf.findBackend("tensorflow");
}
exports.nodeBackend = nodeBackend;
/** Returns the TF dtype for a given DataType. */ function getTFDType(dataType) {
    var binding = nodeBackend().binding;
    switch(dataType){
        case "float32":
            return binding.TF_FLOAT;
        case "int32":
            return binding.TF_INT32;
        case "bool":
            return binding.TF_BOOL;
        case "complex64":
            return binding.TF_COMPLEX64;
        case "string":
            return binding.TF_STRING;
        // tslint:disable-next-line:no-any
        case "int64":
            // int64 is not a generally supported dtype in TensorFlow.js
            // (tfjs-core). However, it needs to be included here for the purpose of
            // writing the `step` value to TensorBoard via WriteScalarSummary and
            // other op kernels.
            return binding.TF_INT64;
        default:
            var errorMessage = "Unknown dtype: ".concat(dataType);
            throw new Error(errorMessage);
    }
}
exports.getTFDType = getTFDType;
/**
 * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of
 * Tensors.
 */ function createTensorsTypeOpAttr(attrName, tensorsOrDtype) {
    if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) throw new Error("Invalid input tensors value.");
    return {
        name: attrName,
        type: nodeBackend().binding.TF_ATTR_TYPE,
        value: tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype) ? getTFDTypeForInputs(tensorsOrDtype) : getTFDType(tensorsOrDtype)
    };
}
exports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;
// TODO(yassogba) remove? who uses this?
function createOpAttr(attrName, tensorsOrDtype, value) {
    if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) throw new Error("Invalid input tensors value.");
    return {
        name: attrName,
        type: nodeBackend().binding.TF_BOOL,
        value: value
    };
}
exports.createOpAttr = createOpAttr;
/** Returns the dtype number for a single or list of input Tensors. */ function getTFDTypeForInputs(tensors) {
    if ((0, util_1.isNullOrUndefined)(tensors)) throw new Error("Invalid input tensors value.");
    if ((0, util_1.isArray)(tensors)) {
        for(var i = 0; i < tensors.length; i++)return getTFDType(tensors[i].dtype);
        return -1;
    } else return getTFDType(tensors.dtype);
}
function ensureTensorflowBackend() {
    tf.util.assert(tf.getBackend() === "tensorflow", function() {
        return 'Expect the current backend to be "tensorflow", but got "'.concat(tf.getBackend(), '"');
    });
}
exports.ensureTensorflowBackend = ensureTensorflowBackend;

},{"39cd1a106e4e778e":"kKEHw","3a5335d47e3fdfe7":"hadS1","614541cc1b9ef6a9":"h4AnS","b2468ac75806e2a2":"1QMGs","a4077dccdc6b5ceb":"1Mnfm"}],"h4AnS":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("bc23a3ea4a141c0b");
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === "%%") return "%";
        if (i >= len) return x;
        switch(x){
            case "%s":
                return String(args[i++]);
            case "%d":
                return Number(args[i++]);
            case "%j":
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return "[Circular]";
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += " " + x;
    else str += " " + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === "undefined") return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error("%s %d: %s", set, pid, msg);
            };
        } else debugs[set] = function() {};
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    "bold": [
        1,
        22
    ],
    "italic": [
        3,
        23
    ],
    "underline": [
        4,
        24
    ],
    "inverse": [
        7,
        27
    ],
    "white": [
        37,
        39
    ],
    "grey": [
        90,
        39
    ],
    "black": [
        30,
        39
    ],
    "blue": [
        34,
        39
    ],
    "cyan": [
        36,
        39
    ],
    "green": [
        32,
        39
    ],
    "magenta": [
        35,
        39
    ],
    "red": [
        31,
        39
    ],
    "yellow": [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    "special": "cyan",
    "number": "yellow",
    "boolean": "yellow",
    "undefined": "grey",
    "null": "bold",
    "string": "green",
    "date": "magenta",
    // "name": intentionally not styling
    "regexp": "red"
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
        if (isError(value)) return formatError(value);
    }
    var base = "", array = false, braces = [
        "{",
        "}"
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            "[",
            "]"
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = " " + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        else return ctx.stylize("[Object]", "special");
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
    if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
    }
    if (isNumber(value)) return ctx.stylize("" + value, "number");
    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push("");
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
        else str = ctx.stylize("[Getter]", "special");
    } else if (desc.set) str = ctx.stylize("[Setter]", "special");
    if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf("\n") > -1) {
                if (array) str = str.split("\n").map(function(line) {
                    return "  " + line;
                }).join("\n").slice(2);
                else str = "\n" + str.split("\n").map(function(line) {
                    return "   " + line;
                }).join("\n");
            }
        } else str = ctx.stylize("[Circular]", "special");
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.slice(1, -1);
            name = ctx.stylize(name, "name");
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
        }
    }
    return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require("6a1c15bae847a134");
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("a42137cd7fc8700d");
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(":");
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(" ");
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require("a792e8e3e2aa1973");
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"bc23a3ea4a141c0b":"kKEHw","6a1c15bae847a134":"5WMGx","a42137cd7fc8700d":"8CRCz","a792e8e3e2aa1973":"8TdOm"}],"5WMGx":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
var isArgumentsObject = require("6b5f9ae3e436d527");
var isGeneratorFunction = require("285c2b8081bf4b68");
var whichTypedArray = require("e95b88ccd80e1671");
var isTypedArray = require("7db151546a22c2a8");
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== "undefined";
var SymbolSupported = typeof Symbol !== "undefined";
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== "object") return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === "Uint8Array";
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === "Uint8ClampedArray";
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === "Uint16Array";
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === "Uint32Array";
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === "Int8Array";
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === "Int16Array";
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === "Int32Array";
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === "Float32Array";
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === "Float64Array";
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === "BigInt64Array";
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === "BigUint64Array";
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === "[object Map]";
}
isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === "undefined") return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === "[object Set]";
}
isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === "undefined") return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === "[object WeakMap]";
}
isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === "undefined") return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === "[object WeakSet]";
}
isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === "[object ArrayBuffer]";
}
isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === "undefined") return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === "[object DataView]";
}
isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === "undefined") return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === "[object SharedArrayBuffer]";
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === "undefined") return false;
    if (typeof isSharedArrayBufferToString.working === "undefined") isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === "[object AsyncFunction]";
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === "[object Map Iterator]";
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === "[object Set Iterator]";
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === "[object Generator]";
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === "[object WebAssembly.Module]";
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    "isProxy",
    "isExternal",
    "isModuleNamespaceObject"
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + " is not supported in userland");
        }
    });
});

},{"6b5f9ae3e436d527":"kG9o4","285c2b8081bf4b68":"fFywx","e95b88ccd80e1671":"76zk9","7db151546a22c2a8":"dPPDl"}],"kG9o4":[function(require,module,exports) {
"use strict";
var hasToStringTag = require("e2b01ce809f132fb")();
var callBound = require("649cbf9949986a39");
var $toString = callBound("Object.prototype.toString");
var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) return false;
    return $toString(value) === "[object Arguments]";
};
var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"e2b01ce809f132fb":"93Ahn","649cbf9949986a39":"3u0uq"}],"93Ahn":[function(require,module,exports) {
"use strict";
var hasSymbols = require("2ef89576d4959bff");
/** @type {import('.')} */ module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"2ef89576d4959bff":"5UNSS"}],"5UNSS":[function(require,module,exports) {
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if (typeof Symbol.iterator === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"3u0uq":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8b08ecb81cf4de17");
var callBind = require("266fc50410cfc4a");
var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"8b08ecb81cf4de17":"ipdBX","266fc50410cfc4a":"dr8J5"}],"ipdBX":[function(require,module,exports) {
"use strict";
var undefined1;
var $Error = require("ff34c740859aa28e");
var $EvalError = require("349515b7ea9b6cef");
var $RangeError = require("9da01653b2dd9abf");
var $ReferenceError = require("68586abd6b0136da");
var $SyntaxError = require("662263fdbc077fc8");
var $TypeError = require("abdfc34e5f6bb86");
var $URIError = require("daca1f932429e03e");
var $Function = Function;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({}, "");
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("1f00f712d594ccf")();
var hasProto = require("23730654306aa64c")();
var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
} // eslint-disable-line no-proto
 : null);
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
if (getProto) try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS["%Error.prototype%"] = errorProto;
}
var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen && getProto) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};
var bind = require("7c5e688e48cd07b0");
var hasOwn = require("af36d49b4b8c6c7c");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"ff34c740859aa28e":"j3m0s","349515b7ea9b6cef":"4JSrX","9da01653b2dd9abf":"loPe8","68586abd6b0136da":"jqo7e","662263fdbc077fc8":"1AaDu","abdfc34e5f6bb86":"5ErIS","daca1f932429e03e":"bwSU2","1f00f712d594ccf":"8zZFZ","23730654306aa64c":"kth8R","7c5e688e48cd07b0":"3mjrB","af36d49b4b8c6c7c":"8hWq0"}],"j3m0s":[function(require,module,exports) {
"use strict";
/** @type {import('.')} */ module.exports = Error;

},{}],"4JSrX":[function(require,module,exports) {
"use strict";
/** @type {import('./eval')} */ module.exports = EvalError;

},{}],"loPe8":[function(require,module,exports) {
"use strict";
/** @type {import('./range')} */ module.exports = RangeError;

},{}],"jqo7e":[function(require,module,exports) {
"use strict";
/** @type {import('./ref')} */ module.exports = ReferenceError;

},{}],"1AaDu":[function(require,module,exports) {
"use strict";
/** @type {import('./syntax')} */ module.exports = SyntaxError;

},{}],"5ErIS":[function(require,module,exports) {
"use strict";
/** @type {import('./type')} */ module.exports = TypeError;

},{}],"bwSU2":[function(require,module,exports) {
"use strict";
/** @type {import('./uri')} */ module.exports = URIError;

},{}],"8zZFZ":[function(require,module,exports) {
"use strict";
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = require("3fb25678c62d2fce");
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if (typeof origSymbol("foo") !== "symbol") return false;
    if (typeof Symbol("bar") !== "symbol") return false;
    return hasSymbolSham();
};

},{"3fb25678c62d2fce":"5UNSS"}],"kth8R":[function(require,module,exports) {
"use strict";
var test = {
    __proto__: null,
    foo: {}
};
var $Object = Object;
/** @type {import('.')} */ module.exports = function hasProto() {
    // @ts-expect-error: TS errors on an inherited property for some reason
    return ({
        __proto__: test
    }).foo === test.foo && !(test instanceof $Object);
};

},{}],"3mjrB":[function(require,module,exports) {
"use strict";
var implementation = require("12e173b4dbaee960");
module.exports = Function.prototype.bind || implementation;

},{"12e173b4dbaee960":"itj1A"}],"itj1A":[function(require,module,exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = "[object Function]";
var concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1)arr[i] = a[i];
    for(var j = 0; j < b.length; j += 1)arr[j + a.length] = b[j];
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1)arr[j] = arrLike[i];
    return arr;
};
var joiny = function(arr, joiner) {
    var str = "";
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) str += joiner;
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, concatty(args, arguments));
            if (Object(result) === result) return result;
            return this;
        }
        return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs[i] = "$" + i;
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"8hWq0":[function(require,module,exports) {
"use strict";
var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require("126cb75e62f8e17b");
/** @type {import('.')} */ module.exports = bind.call(call, $hasOwn);

},{"126cb75e62f8e17b":"3mjrB"}],"dr8J5":[function(require,module,exports) {
"use strict";
var bind = require("4f9d84d5de4909bc");
var GetIntrinsic = require("68d2ad3775278f43");
var setFunctionLength = require("f4b53071c102d4e");
var $TypeError = require("761613670c43be80");
var $apply = GetIntrinsic("%Function.prototype.apply%");
var $call = GetIntrinsic("%Function.prototype.call%");
var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
var $defineProperty = require("3426ee59b177cf96");
var $max = GetIntrinsic("%Math.max%");
module.exports = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") throw new $TypeError("a function is required");
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
};
var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, "apply", {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"4f9d84d5de4909bc":"3mjrB","68d2ad3775278f43":"ipdBX","f4b53071c102d4e":"5lo5g","761613670c43be80":"5ErIS","3426ee59b177cf96":"dXLwa"}],"5lo5g":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8b1c9107ef1524f2");
var define = require("37dd1486f0f556ef");
var hasDescriptors = require("6a9d2b46085df706")();
var gOPD = require("2d412b0f532d1834");
var $TypeError = require("4352c534d27fe477");
var $floor = GetIntrinsic("%Math.floor%");
/** @typedef {(...args: unknown[]) => unknown} Func */ /** @type {<T extends Func = Func>(fn: T, length: number, loose?: boolean) => T} */ module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") throw new $TypeError("`fn` is not a function");
    if (typeof length !== "number" || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) throw new $TypeError("`length` must be a positive 32-bit integer");
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) functionLengthIsConfigurable = false;
        if (desc && !desc.writable) functionLengthIsWritable = false;
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) define(/** @type {Parameters<define>[0]} */ fn, "length", length, true, true);
        else define(/** @type {Parameters<define>[0]} */ fn, "length", length);
    }
    return fn;
};

},{"8b1c9107ef1524f2":"ipdBX","37dd1486f0f556ef":"iagib","6a9d2b46085df706":"7jwG1","2d412b0f532d1834":"5A0H0","4352c534d27fe477":"5ErIS"}],"iagib":[function(require,module,exports) {
"use strict";
var $defineProperty = require("f17fd23367965521");
var $SyntaxError = require("50f12088ee0f6bb");
var $TypeError = require("45c79de2b2f9c949");
var gopd = require("3f9bd39335781ec7");
/** @type {import('.')} */ module.exports = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") throw new $TypeError("`obj` must be an object or a function`");
    if (typeof property !== "string" && typeof property !== "symbol") throw new $TypeError("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") throw new $TypeError("`loose`, if provided, must be a boolean");
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
    else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
    obj[property] = value; // eslint-disable-line no-param-reassign
    else throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
};

},{"f17fd23367965521":"dXLwa","50f12088ee0f6bb":"1AaDu","45c79de2b2f9c949":"5ErIS","3f9bd39335781ec7":"5A0H0"}],"dXLwa":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8e0b8e4026aaf38a");
/** @type {import('.')} */ var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
if ($defineProperty) try {
    $defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = false;
}
module.exports = $defineProperty;

},{"8e0b8e4026aaf38a":"ipdBX"}],"5A0H0":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("693e651525841e04");
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) try {
    $gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"693e651525841e04":"ipdBX"}],"7jwG1":[function(require,module,exports) {
"use strict";
var $defineProperty = require("1c3b0ce871129f60");
var hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!$defineProperty) return null;
    try {
        return $defineProperty([], "length", {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = hasPropertyDescriptors;

},{"1c3b0ce871129f60":"dXLwa"}],"fFywx":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require("b42ab74c25dbb155")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function("return function*() {}")();
    } catch (e) {}
};
var GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== "function") return false;
    if (isFnRegex.test(fnToStr.call(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"b42ab74c25dbb155":"93Ahn"}],"76zk9":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var forEach = require("2941d48f36957e3c");
var availableTypedArrays = require("beaf5502a5823cce");
var callBind = require("e5d203a1b4c809f9");
var callBound = require("83f633f9b335db8f");
var gOPD = require("ce6b45c571ba4e3e");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("9e7ef6c88184c56")();
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound("String.prototype.slice");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
var $indexOf = callBound("Array.prototype.indexOf", true) || /** @type {(array: readonly unknown[], value: unknown) => keyof array} */ function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
/** @typedef {Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array} TypedArray */ /** @typedef {'Int8Array' | 'Uint8Array' | 'Uint8ClampedArray' | 'Int16Array' | 'Uint16Array' | 'Int32Array' | 'Uint32Array' | 'Float32Array' | 'Float64Array' | 'BigInt64Array' | 'BigUint64Array'} TypedArrayName */ /** @type {{ [k in `\$${TypedArrayName}`]?: (receiver: TypedArray) => string | typeof Uint8Array.prototype.slice.call | typeof Uint8Array.prototype.set.call } & { __proto__: null }} */ var cache = {
    __proto__: null
};
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        // @ts-expect-error TS won't narrow inside a closure
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            // @ts-expect-error TS won't narrow inside a closure
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        // @ts-expect-error TODO: fix
        cache["$" + typedArray] = callBind(descriptor.get);
    }
});
else forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    var fn = arr.slice || arr.set;
    if (fn) // @ts-expect-error TODO: fix
    cache["$" + typedArray] = callBind(fn);
});
/** @type {import('.')} */ var tryTypedArrays = function tryAllTypedArrays(value) {
    /** @type {ReturnType<tryAllTypedArrays>} */ var found = false;
    forEach(// eslint-disable-next-line no-extra-parens
    /** @type {Record<`\$${TypedArrayName}`, typeof cache>} */ /** @type {any} */ cache, /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */ function(getter, typedArray) {
        if (!found) try {
            // @ts-expect-error TODO: fix
            if ("$" + getter(value) === typedArray) found = $slice(typedArray, 1);
        } catch (e) {}
    });
    return found;
};
/** @type {import('.')} */ var trySlices = function tryAllSlices(value) {
    /** @type {ReturnType<tryAllSlices>} */ var found = false;
    forEach(// eslint-disable-next-line no-extra-parens
    /** @type {any} */ cache, /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */ function(getter, name) {
        if (!found) try {
            // @ts-expect-error TODO: fix
            getter(value);
            found = $slice(name, 1);
        } catch (e) {}
    });
    return found;
};
/** @type {import('.')} */ module.exports = function whichTypedArray(value) {
    if (!value || typeof value !== "object") return false;
    if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) return tag;
        if (tag !== "Object") return false;
        // node < 0.6 hits here on real Typed Arrays
        return trySlices(value);
    }
    if (!gOPD) return null;
     // unknown engine
    return tryTypedArrays(value);
};

},{"2941d48f36957e3c":"8SJ87","beaf5502a5823cce":"64b6i","e5d203a1b4c809f9":"dr8J5","83f633f9b335db8f":"3u0uq","ce6b45c571ba4e3e":"5A0H0","9e7ef6c88184c56":"93Ahn"}],"8SJ87":[function(require,module,exports) {
"use strict";
var isCallable = require("e50ebc24bbb25feb");
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++)if (hasOwnProperty.call(array, i)) {
        if (receiver == null) iterator(array[i], i, array);
        else iterator.call(receiver, array[i], i, array);
    }
};
var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++)// no such thing as a sparse string.
    if (receiver == null) iterator(string.charAt(i), i, string);
    else iterator.call(receiver, string.charAt(i), i, string);
};
var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object)if (hasOwnProperty.call(object, k)) {
        if (receiver == null) iterator(object[k], k, object);
        else iterator.call(receiver, object[k], k, object);
    }
};
var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) throw new TypeError("iterator must be a function");
    var receiver;
    if (arguments.length >= 3) receiver = thisArg;
    if (toStr.call(list) === "[object Array]") forEachArray(list, iterator, receiver);
    else if (typeof list === "string") forEachString(list, iterator, receiver);
    else forEachObject(list, iterator, receiver);
};
module.exports = forEach;

},{"e50ebc24bbb25feb":"kDEYR"}],"kDEYR":[function(require,module,exports) {
"use strict";
var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") try {
    badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
            throw isCallableMarker;
        }
    });
    isCallableMarker = {};
    // eslint-disable-next-line no-throw-literal
    reflectApply(function() {
        throw 42;
    }, null, badArrayLike);
} catch (_) {
    if (_ !== isCallableMarker) reflectApply = null;
}
else reflectApply = null;
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
    try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
    } catch (e) {
        return false; // not a function
    }
};
var tryFunctionObject = function tryFunctionToStr(value) {
    try {
        if (isES6ClassFn(value)) return false;
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
var toStr = Object.prototype.toString;
var objectClass = "[object Object]";
var fnClass = "[object Function]";
var genClass = "[object GeneratorFunction]";
var ddaClass = "[object HTMLAllCollection]"; // IE 11
var ddaClass2 = "[object HTML document.all class]";
var ddaClass3 = "[object HTMLCollection]"; // IE 9-10
var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag; // better: use `has-tostringtag`
var isIE68 = !(0 in [
    , 
]); // eslint-disable-line no-sparse-arrays, comma-spacing
var isDDA = function isDocumentDotAll() {
    return false;
};
if (typeof document === "object") {
    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) isDDA = function isDocumentDotAll(value) {
        /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
             || str === objectClass // IE 6-8
            ) && value("") == null; // eslint-disable-line eqeqeq
        } catch (e) {}
        return false;
    };
}
module.exports = reflectApply ? function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    try {
        reflectApply(value, null, badArrayLike);
    } catch (e) {
        if (e !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
} : function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) return false;
    return tryFunctionObject(value);
};

},{}],"64b6i":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var possibleNames = require("3021d1584ad62785");
var g = typeof globalThis === "undefined" ? global : globalThis;
/** @type {import('.')} */ module.exports = function availableTypedArrays() {
    var /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === "function") // @ts-expect-error
    out[out.length] = possibleNames[i];
    return out;
};

},{"3021d1584ad62785":"5Io77"}],"5Io77":[function(require,module,exports) {
"use strict";
/** @type {import('.')} */ module.exports = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
];

},{}],"dPPDl":[function(require,module,exports) {
"use strict";
var whichTypedArray = require("ccf73e5f240c2b8");
/** @type {import('.')} */ module.exports = function isTypedArray(value) {
    return !!whichTypedArray(value);
};

},{"ccf73e5f240c2b8":"76zk9"}],"8CRCz":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};

},{}],"8TdOm":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"1QMGs":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeInt32ArrayAsInt64 = exports.Int64Scalar = void 0;
var tfjs_1 = require("abb5a37ab3331863");
var os_1 = require("e027e9875b0c99d2");
var INT32_MAX = 2147483648;
/**
 * Node.js-specific tensor type: int64-type scalar.
 *
 * This class is created for a specific purpose: to support
 * writing `step`s to TensorBoard via op-kernel bindings.
 * `step` is required to have an int64 dtype, but TensorFlow.js
 * (tfjs-core) doesn't have a built-in int64 dtype. This is
 * related to a lack of `Int64Array` or `Uint64Array` typed
 * array in basic JavaScript.
 *
 * This class is introduced as a workaround.
 */ var Int64Scalar = /** @class */ function() {
    function Int64Scalar(value) {
        this.value = value;
        this.dtype = "int64";
        this.rank = 1;
        // The reason why we need to check endianness of the machine here is
        // negative int64 values and the way in which we represent them
        // using Int32Arrays in JavaScript. We represent each int64 value with
        // two consecutive elements of an Int32Array. For positive values,
        // the high part is simply zero; for negative values, the high part
        // should be -1. The ordering of the low and high parts assumes
        // little endian (i.e., least significant digits appear first).
        // This assumption is checked by the lines below.
        if (Int64Scalar.endiannessOkay_ == null) {
            if ((0, os_1.endianness)() !== "LE") throw new Error("Int64Scalar does not support endianness of this machine: " + "".concat((0, os_1.endianness)()));
            Int64Scalar.endiannessOkay_ = true;
        }
        tfjs_1.util.assert(value > -INT32_MAX && value < INT32_MAX - 1, function() {
            return "Got a value outside of the bound of values supported for int64 " + "dtype ([-".concat(INT32_MAX, ", ").concat(INT32_MAX - 1, "]): ").concat(value);
        });
        tfjs_1.util.assert(Number.isInteger(value), function() {
            return "Expected value to be an integer, but got ".concat(value);
        });
        // We use two int32 elements to represent a int64 value. This assumes
        // little endian, which is checked above.
        var highPart = value >= 0 ? 0 : -1;
        var lowPart = value % INT32_MAX;
        this.valueArray_ = new Int32Array([
            lowPart,
            highPart
        ]);
    }
    Object.defineProperty(Int64Scalar.prototype, "shape", {
        get: function() {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Int64Scalar.prototype, "valueArray", {
        /** Get the Int32Array that represents the int64 value. */ get: function() {
            return this.valueArray_;
        },
        enumerable: false,
        configurable: true
    });
    return Int64Scalar;
}();
exports.Int64Scalar = Int64Scalar;
/**
 * This method encodes a Int32Array as Int64 layout in order to create TF_INT64
 * tensor through binding.
 */ function encodeInt32ArrayAsInt64(value) {
    if ((0, os_1.endianness)() !== "LE") throw new Error("Int64Scalar does not support endianness of this machine: " + "".concat((0, os_1.endianness)()));
    var buffer = new Int32Array(value.length * 2);
    for(var i = 0; i < value.length; i++)buffer[i * 2] = value[i];
    return buffer;
}
exports.encodeInt32ArrayAsInt64 = encodeInt32ArrayAsInt64;

},{"abb5a37ab3331863":"hadS1","e027e9875b0c99d2":"fKYkW"}],"fKYkW":[function(require,module,exports) {
exports.endianness = function() {
    return "LE";
};
exports.hostname = function() {
    if (typeof location !== "undefined") return location.hostname;
    else return "";
};
exports.loadavg = function() {
    return [];
};
exports.uptime = function() {
    return 0;
};
exports.freemem = function() {
    return Number.MAX_VALUE;
};
exports.totalmem = function() {
    return Number.MAX_VALUE;
};
exports.cpus = function() {
    return [];
};
exports.type = function() {
    return "Browser";
};
exports.release = function() {
    if (typeof navigator !== "undefined") return navigator.appVersion;
    return "";
};
exports.networkInterfaces = exports.getNetworkInterfaces = function() {
    return {};
};
exports.arch = function() {
    return "javascript";
};
exports.platform = function() {
    return "browser";
};
exports.tmpdir = exports.tmpDir = function() {
    return "/tmp";
};
exports.EOL = "\n";
exports.homedir = function() {
    return "/";
};

},{}],"1Mnfm":[function(require,module,exports) {
// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */ // GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */ // @ts-nocheck
var jspb = require("35699f9d84fe1f13");
var goog = jspb;
var global = Function("return this")();
goog.exportSymbol("proto.tensorflow.Any", null, global);
goog.exportSymbol("proto.tensorflow.AssetFileDef", null, global);
goog.exportSymbol("proto.tensorflow.AttrValue", null, global);
goog.exportSymbol("proto.tensorflow.AttrValue.ListValue", null, global);
goog.exportSymbol("proto.tensorflow.AttrValue.ValueCase", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.AnyList", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.BytesList", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.FloatList", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.Int64List", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.KindCase", null, global);
goog.exportSymbol("proto.tensorflow.CollectionDef.NodeList", null, global);
goog.exportSymbol("proto.tensorflow.DataClass", null, global);
goog.exportSymbol("proto.tensorflow.DataType", null, global);
goog.exportSymbol("proto.tensorflow.FunctionDef", null, global);
goog.exportSymbol("proto.tensorflow.FunctionDefLibrary", null, global);
goog.exportSymbol("proto.tensorflow.GradientDef", null, global);
goog.exportSymbol("proto.tensorflow.GraphDef", null, global);
goog.exportSymbol("proto.tensorflow.HistogramPluginData", null, global);
goog.exportSymbol("proto.tensorflow.HistogramProto", null, global);
goog.exportSymbol("proto.tensorflow.MetaGraphDef", null, global);
goog.exportSymbol("proto.tensorflow.MetaGraphDef.MetaInfoDef", null, global);
goog.exportSymbol("proto.tensorflow.NameAttrList", null, global);
goog.exportSymbol("proto.tensorflow.NodeDef", null, global);
goog.exportSymbol("proto.tensorflow.OpDef", null, global);
goog.exportSymbol("proto.tensorflow.OpDef.ArgDef", null, global);
goog.exportSymbol("proto.tensorflow.OpDef.AttrDef", null, global);
goog.exportSymbol("proto.tensorflow.OpDef.OpDeprecation", null, global);
goog.exportSymbol("proto.tensorflow.OpList", null, global);
goog.exportSymbol("proto.tensorflow.SavedModel", null, global);
goog.exportSymbol("proto.tensorflow.SaverDef", null, global);
goog.exportSymbol("proto.tensorflow.SaverDef.CheckpointFormatVersion", null, global);
goog.exportSymbol("proto.tensorflow.SignatureDef", null, global);
goog.exportSymbol("proto.tensorflow.Summary", null, global);
goog.exportSymbol("proto.tensorflow.Summary.Audio", null, global);
goog.exportSymbol("proto.tensorflow.Summary.Image", null, global);
goog.exportSymbol("proto.tensorflow.Summary.Value", null, global);
goog.exportSymbol("proto.tensorflow.Summary.Value.ValueCase", null, global);
goog.exportSymbol("proto.tensorflow.SummaryDescription", null, global);
goog.exportSymbol("proto.tensorflow.SummaryMetadata", null, global);
goog.exportSymbol("proto.tensorflow.SummaryMetadata.PluginData", null, global);
goog.exportSymbol("proto.tensorflow.Tensor", null, global);
goog.exportSymbol("proto.tensorflow.TensorInfo", null, global);
goog.exportSymbol("proto.tensorflow.TensorInfo.CooSparse", null, global);
goog.exportSymbol("proto.tensorflow.TensorInfo.EncodingCase", null, global);
goog.exportSymbol("proto.tensorflow.TensorShape", null, global);
goog.exportSymbol("proto.tensorflow.TensorShape.Dim", null, global);
goog.exportSymbol("proto.tensorflow.VersionDef", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Any = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.Any, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Any.displayName = "proto.tensorflow.Any";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.TensorShape = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.TensorShape.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.TensorShape, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.TensorShape.displayName = "proto.tensorflow.TensorShape";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.TensorShape.Dim = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.TensorShape.Dim, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.TensorShape.Dim.displayName = "proto.tensorflow.TensorShape.Dim";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Tensor = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.Tensor.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.Tensor, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Tensor.displayName = "proto.tensorflow.Tensor";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.AttrValue = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.AttrValue.oneofGroups_);
};
goog.inherits(proto.tensorflow.AttrValue, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.AttrValue.displayName = "proto.tensorflow.AttrValue";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.AttrValue.ListValue = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.AttrValue.ListValue.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.AttrValue.ListValue, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.AttrValue.ListValue.displayName = "proto.tensorflow.AttrValue.ListValue";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.NameAttrList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.NameAttrList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.NameAttrList.displayName = "proto.tensorflow.NameAttrList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.NodeDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.NodeDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.NodeDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.NodeDef.displayName = "proto.tensorflow.NodeDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.VersionDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.VersionDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.VersionDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.VersionDef.displayName = "proto.tensorflow.VersionDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.GraphDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.GraphDef.displayName = "proto.tensorflow.GraphDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.CollectionDef.oneofGroups_);
};
goog.inherits(proto.tensorflow.CollectionDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.displayName = "proto.tensorflow.CollectionDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef.NodeList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CollectionDef.NodeList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CollectionDef.NodeList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.NodeList.displayName = "proto.tensorflow.CollectionDef.NodeList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef.BytesList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CollectionDef.BytesList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CollectionDef.BytesList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.BytesList.displayName = "proto.tensorflow.CollectionDef.BytesList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef.Int64List = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CollectionDef.Int64List.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CollectionDef.Int64List, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.Int64List.displayName = "proto.tensorflow.CollectionDef.Int64List";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef.FloatList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CollectionDef.FloatList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CollectionDef.FloatList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.FloatList.displayName = "proto.tensorflow.CollectionDef.FloatList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.CollectionDef.AnyList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CollectionDef.AnyList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CollectionDef.AnyList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.CollectionDef.AnyList.displayName = "proto.tensorflow.CollectionDef.AnyList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SaverDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SaverDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SaverDef.displayName = "proto.tensorflow.SaverDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.TensorInfo = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.TensorInfo.oneofGroups_);
};
goog.inherits(proto.tensorflow.TensorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.TensorInfo.displayName = "proto.tensorflow.TensorInfo";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.TensorInfo.CooSparse = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.TensorInfo.CooSparse, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.TensorInfo.CooSparse.displayName = "proto.tensorflow.TensorInfo.CooSparse";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SignatureDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SignatureDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SignatureDef.displayName = "proto.tensorflow.SignatureDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.AssetFileDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.AssetFileDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.AssetFileDef.displayName = "proto.tensorflow.AssetFileDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.OpDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.OpDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.OpDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.OpDef.displayName = "proto.tensorflow.OpDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.OpDef.ArgDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.OpDef.ArgDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.OpDef.ArgDef.displayName = "proto.tensorflow.OpDef.ArgDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.OpDef.AttrDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.OpDef.AttrDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.OpDef.AttrDef.displayName = "proto.tensorflow.OpDef.AttrDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.OpDef.OpDeprecation = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.OpDef.OpDeprecation, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.OpDef.OpDeprecation.displayName = "proto.tensorflow.OpDef.OpDeprecation";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.OpList = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.OpList.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.OpList, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.OpList.displayName = "proto.tensorflow.OpList";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.MetaGraphDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.MetaGraphDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.MetaGraphDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.MetaGraphDef.displayName = "proto.tensorflow.MetaGraphDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.MetaGraphDef.MetaInfoDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.MetaGraphDef.MetaInfoDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.MetaGraphDef.MetaInfoDef.displayName = "proto.tensorflow.MetaGraphDef.MetaInfoDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SavedModel = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.SavedModel.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.SavedModel, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SavedModel.displayName = "proto.tensorflow.SavedModel";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.FunctionDefLibrary = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FunctionDefLibrary.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.FunctionDefLibrary, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.FunctionDefLibrary.displayName = "proto.tensorflow.FunctionDefLibrary";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.FunctionDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.FunctionDef.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.FunctionDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.FunctionDef.displayName = "proto.tensorflow.FunctionDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.GradientDef = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.GradientDef, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.GradientDef.displayName = "proto.tensorflow.GradientDef";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SummaryDescription = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SummaryDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SummaryDescription.displayName = "proto.tensorflow.SummaryDescription";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.HistogramProto = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.HistogramProto.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.HistogramProto, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.HistogramProto.displayName = "proto.tensorflow.HistogramProto";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SummaryMetadata = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SummaryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SummaryMetadata.displayName = "proto.tensorflow.SummaryMetadata";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.SummaryMetadata.PluginData = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SummaryMetadata.PluginData, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.SummaryMetadata.PluginData.displayName = "proto.tensorflow.SummaryMetadata.PluginData";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Summary = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.Summary.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Summary.displayName = "proto.tensorflow.Summary";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Summary.Image = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.Summary.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Summary.Image.displayName = "proto.tensorflow.Summary.Image";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Summary.Audio = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.Summary.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Summary.Audio.displayName = "proto.tensorflow.Summary.Audio";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.Summary.Value = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.Summary.Value.oneofGroups_);
};
goog.inherits(proto.tensorflow.Summary.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.Summary.Value.displayName = "proto.tensorflow.Summary.Value";
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.tensorflow.HistogramPluginData = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.HistogramPluginData, jspb.Message);
if (goog.DEBUG && !COMPILED) /**
   * @public
   * @override
   */ proto.tensorflow.HistogramPluginData.displayName = "proto.tensorflow.HistogramPluginData";
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Any.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Any.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Any} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Any.toObject = function(includeInstance, msg) {
        var f, obj = {
            typeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: msg.getValue_asB64()
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Any}
 */ proto.tensorflow.Any.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Any;
    return proto.tensorflow.Any.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Any} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Any}
 */ proto.tensorflow.Any.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setTypeUrl(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Any.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Any.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Any} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Any.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTypeUrl();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getValue_asU8();
    if (f.length > 0) writer.writeBytes(2, f);
};
/**
 * optional string type_url = 1;
 * @return {string}
 */ proto.tensorflow.Any.prototype.getTypeUrl = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.Any} returns this
 */ proto.tensorflow.Any.prototype.setTypeUrl = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.Any.prototype.getValue = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */ proto.tensorflow.Any.prototype.getValue_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getValue());
};
/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */ proto.tensorflow.Any.prototype.getValue_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getValue());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.Any} returns this
 */ proto.tensorflow.Any.prototype.setValue = function(value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.TensorShape.repeatedFields_ = [
    2
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.TensorShape.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.TensorShape.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.TensorShape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorShape.toObject = function(includeInstance, msg) {
        var f, obj = {
            dimList: jspb.Message.toObjectList(msg.getDimList(), proto.tensorflow.TensorShape.Dim.toObject, includeInstance),
            unknownRank: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.TensorShape}
 */ proto.tensorflow.TensorShape.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.TensorShape;
    return proto.tensorflow.TensorShape.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.TensorShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.TensorShape}
 */ proto.tensorflow.TensorShape.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 2:
                var value = new proto.tensorflow.TensorShape.Dim;
                reader.readMessage(value, proto.tensorflow.TensorShape.Dim.deserializeBinaryFromReader);
                msg.addDim(value);
                break;
            case 3:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setUnknownRank(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.TensorShape.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.TensorShape.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.TensorShape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorShape.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getDimList();
    if (f.length > 0) writer.writeRepeatedMessage(2, f, proto.tensorflow.TensorShape.Dim.serializeBinaryToWriter);
    f = message.getUnknownRank();
    if (f) writer.writeBool(3, f);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.TensorShape.Dim.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.TensorShape.Dim.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.TensorShape.Dim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorShape.Dim.toObject = function(includeInstance, msg) {
        var f, obj = {
            size: jspb.Message.getFieldWithDefault(msg, 1, 0),
            name: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.TensorShape.Dim}
 */ proto.tensorflow.TensorShape.Dim.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.TensorShape.Dim;
    return proto.tensorflow.TensorShape.Dim.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.TensorShape.Dim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.TensorShape.Dim}
 */ proto.tensorflow.TensorShape.Dim.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt64();
                msg.setSize(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.TensorShape.Dim.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.TensorShape.Dim.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.TensorShape.Dim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorShape.Dim.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSize();
    if (f !== 0) writer.writeInt64(1, f);
    f = message.getName();
    if (f.length > 0) writer.writeString(2, f);
};
/**
 * optional int64 size = 1;
 * @return {number}
 */ proto.tensorflow.TensorShape.Dim.prototype.getSize = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.TensorShape.Dim} returns this
 */ proto.tensorflow.TensorShape.Dim.prototype.setSize = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */ proto.tensorflow.TensorShape.Dim.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.TensorShape.Dim} returns this
 */ proto.tensorflow.TensorShape.Dim.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated Dim dim = 2;
 * @return {!Array<!proto.tensorflow.TensorShape.Dim>}
 */ proto.tensorflow.TensorShape.prototype.getDimList = function() {
    return /** @type{!Array<!proto.tensorflow.TensorShape.Dim>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.TensorShape.Dim, 2);
};
/**
 * @param {!Array<!proto.tensorflow.TensorShape.Dim>} value
 * @return {!proto.tensorflow.TensorShape} returns this
*/ proto.tensorflow.TensorShape.prototype.setDimList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.tensorflow.TensorShape.Dim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.TensorShape.Dim}
 */ proto.tensorflow.TensorShape.prototype.addDim = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.TensorShape.Dim, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.TensorShape} returns this
 */ proto.tensorflow.TensorShape.prototype.clearDimList = function() {
    return this.setDimList([]);
};
/**
 * optional bool unknown_rank = 3;
 * @return {boolean}
 */ proto.tensorflow.TensorShape.prototype.getUnknownRank = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 3, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.TensorShape} returns this
 */ proto.tensorflow.TensorShape.prototype.setUnknownRank = function(value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.Tensor.repeatedFields_ = [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    16,
    17
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Tensor.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Tensor.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Tensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Tensor.toObject = function(includeInstance, msg) {
        var f, obj = {
            dtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
            tensorShape: (f = msg.getTensorShape()) && proto.tensorflow.TensorShape.toObject(includeInstance, f),
            versionNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
            tensorContent: msg.getTensorContent_asB64(),
            floatValList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
            doubleValList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
            intValList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
            stringValList: msg.getStringValList_asB64(),
            scomplexValList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f,
            int64ValList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
            boolValList: (f = jspb.Message.getRepeatedBooleanField(msg, 11)) == null ? undefined : f,
            uint32ValList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
            uint64ValList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Tensor}
 */ proto.tensorflow.Tensor.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Tensor;
    return proto.tensorflow.Tensor.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Tensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Tensor}
 */ proto.tensorflow.Tensor.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {!proto.tensorflow.DataType} */ reader.readEnum();
                msg.setDtype(value);
                break;
            case 2:
                var value = new proto.tensorflow.TensorShape;
                reader.readMessage(value, proto.tensorflow.TensorShape.deserializeBinaryFromReader);
                msg.setTensorShape(value);
                break;
            case 3:
                var value = /** @type {number} */ reader.readInt32();
                msg.setVersionNumber(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setTensorContent(value);
                break;
            case 5:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedFloat() : [
                    reader.readFloat()
                ];
                for(var i = 0; i < values.length; i++)msg.addFloatVal(values[i]);
                break;
            case 6:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedDouble() : [
                    reader.readDouble()
                ];
                for(var i = 0; i < values.length; i++)msg.addDoubleVal(values[i]);
                break;
            case 7:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedInt32() : [
                    reader.readInt32()
                ];
                for(var i = 0; i < values.length; i++)msg.addIntVal(values[i]);
                break;
            case 8:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.addStringVal(value);
                break;
            case 9:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedFloat() : [
                    reader.readFloat()
                ];
                for(var i = 0; i < values.length; i++)msg.addScomplexVal(values[i]);
                break;
            case 10:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedInt64() : [
                    reader.readInt64()
                ];
                for(var i = 0; i < values.length; i++)msg.addInt64Val(values[i]);
                break;
            case 11:
                var values = /** @type {!Array<boolean>} */ reader.isDelimited() ? reader.readPackedBool() : [
                    reader.readBool()
                ];
                for(var i = 0; i < values.length; i++)msg.addBoolVal(values[i]);
                break;
            case 16:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedUint32() : [
                    reader.readUint32()
                ];
                for(var i = 0; i < values.length; i++)msg.addUint32Val(values[i]);
                break;
            case 17:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedUint64() : [
                    reader.readUint64()
                ];
                for(var i = 0; i < values.length; i++)msg.addUint64Val(values[i]);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Tensor.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Tensor.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Tensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Tensor.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getDtype();
    if (f !== 0.0) writer.writeEnum(1, f);
    f = message.getTensorShape();
    if (f != null) writer.writeMessage(2, f, proto.tensorflow.TensorShape.serializeBinaryToWriter);
    f = message.getVersionNumber();
    if (f !== 0) writer.writeInt32(3, f);
    f = message.getTensorContent_asU8();
    if (f.length > 0) writer.writeBytes(4, f);
    f = message.getFloatValList();
    if (f.length > 0) writer.writePackedFloat(5, f);
    f = message.getDoubleValList();
    if (f.length > 0) writer.writePackedDouble(6, f);
    f = message.getIntValList();
    if (f.length > 0) writer.writePackedInt32(7, f);
    f = message.getStringValList_asU8();
    if (f.length > 0) writer.writeRepeatedBytes(8, f);
    f = message.getScomplexValList();
    if (f.length > 0) writer.writePackedFloat(9, f);
    f = message.getInt64ValList();
    if (f.length > 0) writer.writePackedInt64(10, f);
    f = message.getBoolValList();
    if (f.length > 0) writer.writePackedBool(11, f);
    f = message.getUint32ValList();
    if (f.length > 0) writer.writePackedUint32(16, f);
    f = message.getUint64ValList();
    if (f.length > 0) writer.writePackedUint64(17, f);
};
/**
 * optional DataType dtype = 1;
 * @return {!proto.tensorflow.DataType}
 */ proto.tensorflow.Tensor.prototype.getDtype = function() {
    return /** @type {!proto.tensorflow.DataType} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {!proto.tensorflow.DataType} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setDtype = function(value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional TensorShape tensor_shape = 2;
 * @return {?proto.tensorflow.TensorShape}
 */ proto.tensorflow.Tensor.prototype.getTensorShape = function() {
    return /** @type{?proto.tensorflow.TensorShape} */ jspb.Message.getWrapperField(this, proto.tensorflow.TensorShape, 2);
};
/**
 * @param {?proto.tensorflow.TensorShape|undefined} value
 * @return {!proto.tensorflow.Tensor} returns this
*/ proto.tensorflow.Tensor.prototype.setTensorShape = function(value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearTensorShape = function() {
    return this.setTensorShape(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Tensor.prototype.hasTensorShape = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional int32 version_number = 3;
 * @return {number}
 */ proto.tensorflow.Tensor.prototype.getVersionNumber = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setVersionNumber = function(value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional bytes tensor_content = 4;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.Tensor.prototype.getTensorContent = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * optional bytes tensor_content = 4;
 * This is a type-conversion wrapper around `getTensorContent()`
 * @return {string}
 */ proto.tensorflow.Tensor.prototype.getTensorContent_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getTensorContent());
};
/**
 * optional bytes tensor_content = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTensorContent()`
 * @return {!Uint8Array}
 */ proto.tensorflow.Tensor.prototype.getTensorContent_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getTensorContent());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setTensorContent = function(value) {
    return jspb.Message.setProto3BytesField(this, 4, value);
};
/**
 * repeated float float_val = 5;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getFloatValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 5);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setFloatValList = function(value) {
    return jspb.Message.setField(this, 5, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addFloatVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearFloatValList = function() {
    return this.setFloatValList([]);
};
/**
 * repeated double double_val = 6;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getDoubleValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 6);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setDoubleValList = function(value) {
    return jspb.Message.setField(this, 6, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addDoubleVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearDoubleValList = function() {
    return this.setDoubleValList([]);
};
/**
 * repeated int32 int_val = 7;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getIntValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 7);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setIntValList = function(value) {
    return jspb.Message.setField(this, 7, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addIntVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearIntValList = function() {
    return this.setIntValList([]);
};
/**
 * repeated bytes string_val = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */ proto.tensorflow.Tensor.prototype.getStringValList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ jspb.Message.getRepeatedField(this, 8);
};
/**
 * repeated bytes string_val = 8;
 * This is a type-conversion wrapper around `getStringValList()`
 * @return {!Array<string>}
 */ proto.tensorflow.Tensor.prototype.getStringValList_asB64 = function() {
    return /** @type {!Array<string>} */ jspb.Message.bytesListAsB64(this.getStringValList());
};
/**
 * repeated bytes string_val = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStringValList()`
 * @return {!Array<!Uint8Array>}
 */ proto.tensorflow.Tensor.prototype.getStringValList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ jspb.Message.bytesListAsU8(this.getStringValList());
};
/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setStringValList = function(value) {
    return jspb.Message.setField(this, 8, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addStringVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearStringValList = function() {
    return this.setStringValList([]);
};
/**
 * repeated float scomplex_val = 9;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getScomplexValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 9);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setScomplexValList = function(value) {
    return jspb.Message.setField(this, 9, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addScomplexVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearScomplexValList = function() {
    return this.setScomplexValList([]);
};
/**
 * repeated int64 int64_val = 10;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getInt64ValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 10);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setInt64ValList = function(value) {
    return jspb.Message.setField(this, 10, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addInt64Val = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearInt64ValList = function() {
    return this.setInt64ValList([]);
};
/**
 * repeated bool bool_val = 11;
 * @return {!Array<boolean>}
 */ proto.tensorflow.Tensor.prototype.getBoolValList = function() {
    return /** @type {!Array<boolean>} */ jspb.Message.getRepeatedBooleanField(this, 11);
};
/**
 * @param {!Array<boolean>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setBoolValList = function(value) {
    return jspb.Message.setField(this, 11, value || []);
};
/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addBoolVal = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearBoolValList = function() {
    return this.setBoolValList([]);
};
/**
 * repeated uint32 uint32_val = 16;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getUint32ValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 16);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setUint32ValList = function(value) {
    return jspb.Message.setField(this, 16, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addUint32Val = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearUint32ValList = function() {
    return this.setUint32ValList([]);
};
/**
 * repeated uint64 uint64_val = 17;
 * @return {!Array<number>}
 */ proto.tensorflow.Tensor.prototype.getUint64ValList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 17);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.setUint64ValList = function(value) {
    return jspb.Message.setField(this, 17, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.addUint64Val = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Tensor} returns this
 */ proto.tensorflow.Tensor.prototype.clearUint64ValList = function() {
    return this.setUint64ValList([]);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */ proto.tensorflow.AttrValue.oneofGroups_ = [
    [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
    ]
];
/**
 * @enum {number}
 */ proto.tensorflow.AttrValue.ValueCase = {
    VALUE_NOT_SET: 0,
    LIST: 1,
    S: 2,
    I: 3,
    F: 4,
    B: 5,
    TYPE: 6,
    SHAPE: 7,
    TENSOR: 8,
    PLACEHOLDER: 9,
    FUNC: 10
};
/**
 * @return {proto.tensorflow.AttrValue.ValueCase}
 */ proto.tensorflow.AttrValue.prototype.getValueCase = function() {
    return /** @type {proto.tensorflow.AttrValue.ValueCase} */ jspb.Message.computeOneofCase(this, proto.tensorflow.AttrValue.oneofGroups_[0]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.AttrValue.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.AttrValue.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AttrValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AttrValue.toObject = function(includeInstance, msg) {
        var f, obj = {
            list: (f = msg.getList()) && proto.tensorflow.AttrValue.ListValue.toObject(includeInstance, f),
            s: msg.getS_asB64(),
            i: jspb.Message.getFieldWithDefault(msg, 3, 0),
            f: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
            b: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            type: jspb.Message.getFieldWithDefault(msg, 6, 0),
            shape: (f = msg.getShape()) && proto.tensorflow.TensorShape.toObject(includeInstance, f),
            tensor: (f = msg.getTensor()) && proto.tensorflow.Tensor.toObject(includeInstance, f),
            placeholder: jspb.Message.getFieldWithDefault(msg, 9, ""),
            func: (f = msg.getFunc()) && proto.tensorflow.NameAttrList.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AttrValue}
 */ proto.tensorflow.AttrValue.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.AttrValue;
    return proto.tensorflow.AttrValue.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AttrValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AttrValue}
 */ proto.tensorflow.AttrValue.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.AttrValue.ListValue;
                reader.readMessage(value, proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader);
                msg.setList(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setS(value);
                break;
            case 3:
                var value = /** @type {number} */ reader.readInt64();
                msg.setI(value);
                break;
            case 4:
                var value = /** @type {number} */ reader.readFloat();
                msg.setF(value);
                break;
            case 5:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setB(value);
                break;
            case 6:
                var value = /** @type {!proto.tensorflow.DataType} */ reader.readEnum();
                msg.setType(value);
                break;
            case 7:
                var value = new proto.tensorflow.TensorShape;
                reader.readMessage(value, proto.tensorflow.TensorShape.deserializeBinaryFromReader);
                msg.setShape(value);
                break;
            case 8:
                var value = new proto.tensorflow.Tensor;
                reader.readMessage(value, proto.tensorflow.Tensor.deserializeBinaryFromReader);
                msg.setTensor(value);
                break;
            case 9:
                var value = /** @type {string} */ reader.readString();
                msg.setPlaceholder(value);
                break;
            case 10:
                var value = new proto.tensorflow.NameAttrList;
                reader.readMessage(value, proto.tensorflow.NameAttrList.deserializeBinaryFromReader);
                msg.setFunc(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.AttrValue.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.AttrValue.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AttrValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AttrValue.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getList();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter);
    f = /** @type {!(string|Uint8Array)} */ jspb.Message.getField(message, 2);
    if (f != null) writer.writeBytes(2, f);
    f = /** @type {number} */ jspb.Message.getField(message, 3);
    if (f != null) writer.writeInt64(3, f);
    f = /** @type {number} */ jspb.Message.getField(message, 4);
    if (f != null) writer.writeFloat(4, f);
    f = /** @type {boolean} */ jspb.Message.getField(message, 5);
    if (f != null) writer.writeBool(5, f);
    f = /** @type {!proto.tensorflow.DataType} */ jspb.Message.getField(message, 6);
    if (f != null) writer.writeEnum(6, f);
    f = message.getShape();
    if (f != null) writer.writeMessage(7, f, proto.tensorflow.TensorShape.serializeBinaryToWriter);
    f = message.getTensor();
    if (f != null) writer.writeMessage(8, f, proto.tensorflow.Tensor.serializeBinaryToWriter);
    f = /** @type {string} */ jspb.Message.getField(message, 9);
    if (f != null) writer.writeString(9, f);
    f = message.getFunc();
    if (f != null) writer.writeMessage(10, f, proto.tensorflow.NameAttrList.serializeBinaryToWriter);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.AttrValue.ListValue.repeatedFields_ = [
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.AttrValue.ListValue.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.AttrValue.ListValue.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AttrValue.ListValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AttrValue.ListValue.toObject = function(includeInstance, msg) {
        var f, obj = {
            sList: msg.getSList_asB64(),
            iList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
            fList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
            bList: (f = jspb.Message.getRepeatedBooleanField(msg, 5)) == null ? undefined : f,
            typeList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
            shapeList: jspb.Message.toObjectList(msg.getShapeList(), proto.tensorflow.TensorShape.toObject, includeInstance),
            tensorList: jspb.Message.toObjectList(msg.getTensorList(), proto.tensorflow.Tensor.toObject, includeInstance),
            funcList: jspb.Message.toObjectList(msg.getFuncList(), proto.tensorflow.NameAttrList.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AttrValue.ListValue}
 */ proto.tensorflow.AttrValue.ListValue.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.AttrValue.ListValue;
    return proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AttrValue.ListValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AttrValue.ListValue}
 */ proto.tensorflow.AttrValue.ListValue.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 2:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.addS(value);
                break;
            case 3:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedInt64() : [
                    reader.readInt64()
                ];
                for(var i = 0; i < values.length; i++)msg.addI(values[i]);
                break;
            case 4:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedFloat() : [
                    reader.readFloat()
                ];
                for(var i = 0; i < values.length; i++)msg.addF(values[i]);
                break;
            case 5:
                var values = /** @type {!Array<boolean>} */ reader.isDelimited() ? reader.readPackedBool() : [
                    reader.readBool()
                ];
                for(var i = 0; i < values.length; i++)msg.addB(values[i]);
                break;
            case 6:
                var values = /** @type {!Array<!proto.tensorflow.DataType>} */ reader.isDelimited() ? reader.readPackedEnum() : [
                    reader.readEnum()
                ];
                for(var i = 0; i < values.length; i++)msg.addType(values[i]);
                break;
            case 7:
                var value = new proto.tensorflow.TensorShape;
                reader.readMessage(value, proto.tensorflow.TensorShape.deserializeBinaryFromReader);
                msg.addShape(value);
                break;
            case 8:
                var value = new proto.tensorflow.Tensor;
                reader.readMessage(value, proto.tensorflow.Tensor.deserializeBinaryFromReader);
                msg.addTensor(value);
                break;
            case 9:
                var value = new proto.tensorflow.NameAttrList;
                reader.readMessage(value, proto.tensorflow.NameAttrList.deserializeBinaryFromReader);
                msg.addFunc(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.AttrValue.ListValue.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AttrValue.ListValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AttrValue.ListValue.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSList_asU8();
    if (f.length > 0) writer.writeRepeatedBytes(2, f);
    f = message.getIList();
    if (f.length > 0) writer.writePackedInt64(3, f);
    f = message.getFList();
    if (f.length > 0) writer.writePackedFloat(4, f);
    f = message.getBList();
    if (f.length > 0) writer.writePackedBool(5, f);
    f = message.getTypeList();
    if (f.length > 0) writer.writePackedEnum(6, f);
    f = message.getShapeList();
    if (f.length > 0) writer.writeRepeatedMessage(7, f, proto.tensorflow.TensorShape.serializeBinaryToWriter);
    f = message.getTensorList();
    if (f.length > 0) writer.writeRepeatedMessage(8, f, proto.tensorflow.Tensor.serializeBinaryToWriter);
    f = message.getFuncList();
    if (f.length > 0) writer.writeRepeatedMessage(9, f, proto.tensorflow.NameAttrList.serializeBinaryToWriter);
};
/**
 * repeated bytes s = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getSList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ jspb.Message.getRepeatedField(this, 2);
};
/**
 * repeated bytes s = 2;
 * This is a type-conversion wrapper around `getSList()`
 * @return {!Array<string>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getSList_asB64 = function() {
    return /** @type {!Array<string>} */ jspb.Message.bytesListAsB64(this.getSList());
};
/**
 * repeated bytes s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSList()`
 * @return {!Array<!Uint8Array>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getSList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ jspb.Message.bytesListAsU8(this.getSList());
};
/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.setSList = function(value) {
    return jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.addS = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearSList = function() {
    return this.setSList([]);
};
/**
 * repeated int64 i = 3;
 * @return {!Array<number>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getIList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 3);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.setIList = function(value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.addI = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearIList = function() {
    return this.setIList([]);
};
/**
 * repeated float f = 4;
 * @return {!Array<number>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getFList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 4);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.setFList = function(value) {
    return jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.addF = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearFList = function() {
    return this.setFList([]);
};
/**
 * repeated bool b = 5;
 * @return {!Array<boolean>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getBList = function() {
    return /** @type {!Array<boolean>} */ jspb.Message.getRepeatedBooleanField(this, 5);
};
/**
 * @param {!Array<boolean>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.setBList = function(value) {
    return jspb.Message.setField(this, 5, value || []);
};
/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.addB = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearBList = function() {
    return this.setBList([]);
};
/**
 * repeated DataType type = 6;
 * @return {!Array<!proto.tensorflow.DataType>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getTypeList = function() {
    return /** @type {!Array<!proto.tensorflow.DataType>} */ jspb.Message.getRepeatedField(this, 6);
};
/**
 * @param {!Array<!proto.tensorflow.DataType>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.setTypeList = function(value) {
    return jspb.Message.setField(this, 6, value || []);
};
/**
 * @param {!proto.tensorflow.DataType} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.addType = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearTypeList = function() {
    return this.setTypeList([]);
};
/**
 * repeated TensorShape shape = 7;
 * @return {!Array<!proto.tensorflow.TensorShape>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getShapeList = function() {
    return /** @type{!Array<!proto.tensorflow.TensorShape>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.TensorShape, 7);
};
/**
 * @param {!Array<!proto.tensorflow.TensorShape>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
*/ proto.tensorflow.AttrValue.ListValue.prototype.setShapeList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 7, value);
};
/**
 * @param {!proto.tensorflow.TensorShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.TensorShape}
 */ proto.tensorflow.AttrValue.ListValue.prototype.addShape = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tensorflow.TensorShape, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearShapeList = function() {
    return this.setShapeList([]);
};
/**
 * repeated Tensor tensor = 8;
 * @return {!Array<!proto.tensorflow.Tensor>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getTensorList = function() {
    return /** @type{!Array<!proto.tensorflow.Tensor>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.Tensor, 8);
};
/**
 * @param {!Array<!proto.tensorflow.Tensor>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
*/ proto.tensorflow.AttrValue.ListValue.prototype.setTensorList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 8, value);
};
/**
 * @param {!proto.tensorflow.Tensor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Tensor}
 */ proto.tensorflow.AttrValue.ListValue.prototype.addTensor = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tensorflow.Tensor, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearTensorList = function() {
    return this.setTensorList([]);
};
/**
 * repeated NameAttrList func = 9;
 * @return {!Array<!proto.tensorflow.NameAttrList>}
 */ proto.tensorflow.AttrValue.ListValue.prototype.getFuncList = function() {
    return /** @type{!Array<!proto.tensorflow.NameAttrList>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NameAttrList, 9);
};
/**
 * @param {!Array<!proto.tensorflow.NameAttrList>} value
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
*/ proto.tensorflow.AttrValue.ListValue.prototype.setFuncList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 9, value);
};
/**
 * @param {!proto.tensorflow.NameAttrList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NameAttrList}
 */ proto.tensorflow.AttrValue.ListValue.prototype.addFunc = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.tensorflow.NameAttrList, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.AttrValue.ListValue} returns this
 */ proto.tensorflow.AttrValue.ListValue.prototype.clearFuncList = function() {
    return this.setFuncList([]);
};
/**
 * optional ListValue list = 1;
 * @return {?proto.tensorflow.AttrValue.ListValue}
 */ proto.tensorflow.AttrValue.prototype.getList = function() {
    return /** @type{?proto.tensorflow.AttrValue.ListValue} */ jspb.Message.getWrapperField(this, proto.tensorflow.AttrValue.ListValue, 1);
};
/**
 * @param {?proto.tensorflow.AttrValue.ListValue|undefined} value
 * @return {!proto.tensorflow.AttrValue} returns this
*/ proto.tensorflow.AttrValue.prototype.setList = function(value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearList = function() {
    return this.setList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasList = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional bytes s = 2;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.AttrValue.prototype.getS = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * optional bytes s = 2;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */ proto.tensorflow.AttrValue.prototype.getS_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getS());
};
/**
 * optional bytes s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */ proto.tensorflow.AttrValue.prototype.getS_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getS());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setS = function(value) {
    return jspb.Message.setOneofField(this, 2, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearS = function() {
    return jspb.Message.setOneofField(this, 2, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasS = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional int64 i = 3;
 * @return {number}
 */ proto.tensorflow.AttrValue.prototype.getI = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setI = function(value) {
    return jspb.Message.setOneofField(this, 3, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearI = function() {
    return jspb.Message.setOneofField(this, 3, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasI = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional float f = 4;
 * @return {number}
 */ proto.tensorflow.AttrValue.prototype.getF = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setF = function(value) {
    return jspb.Message.setOneofField(this, 4, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearF = function() {
    return jspb.Message.setOneofField(this, 4, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasF = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional bool b = 5;
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.getB = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 5, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setB = function(value) {
    return jspb.Message.setOneofField(this, 5, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearB = function() {
    return jspb.Message.setOneofField(this, 5, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasB = function() {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional DataType type = 6;
 * @return {!proto.tensorflow.DataType}
 */ proto.tensorflow.AttrValue.prototype.getType = function() {
    return /** @type {!proto.tensorflow.DataType} */ jspb.Message.getFieldWithDefault(this, 6, 0);
};
/**
 * @param {!proto.tensorflow.DataType} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setType = function(value) {
    return jspb.Message.setOneofField(this, 6, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearType = function() {
    return jspb.Message.setOneofField(this, 6, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasType = function() {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional TensorShape shape = 7;
 * @return {?proto.tensorflow.TensorShape}
 */ proto.tensorflow.AttrValue.prototype.getShape = function() {
    return /** @type{?proto.tensorflow.TensorShape} */ jspb.Message.getWrapperField(this, proto.tensorflow.TensorShape, 7);
};
/**
 * @param {?proto.tensorflow.TensorShape|undefined} value
 * @return {!proto.tensorflow.AttrValue} returns this
*/ proto.tensorflow.AttrValue.prototype.setShape = function(value) {
    return jspb.Message.setOneofWrapperField(this, 7, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearShape = function() {
    return this.setShape(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasShape = function() {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * optional Tensor tensor = 8;
 * @return {?proto.tensorflow.Tensor}
 */ proto.tensorflow.AttrValue.prototype.getTensor = function() {
    return /** @type{?proto.tensorflow.Tensor} */ jspb.Message.getWrapperField(this, proto.tensorflow.Tensor, 8);
};
/**
 * @param {?proto.tensorflow.Tensor|undefined} value
 * @return {!proto.tensorflow.AttrValue} returns this
*/ proto.tensorflow.AttrValue.prototype.setTensor = function(value) {
    return jspb.Message.setOneofWrapperField(this, 8, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearTensor = function() {
    return this.setTensor(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasTensor = function() {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional string placeholder = 9;
 * @return {string}
 */ proto.tensorflow.AttrValue.prototype.getPlaceholder = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 9, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.setPlaceholder = function(value) {
    return jspb.Message.setOneofField(this, 9, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearPlaceholder = function() {
    return jspb.Message.setOneofField(this, 9, proto.tensorflow.AttrValue.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasPlaceholder = function() {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional NameAttrList func = 10;
 * @return {?proto.tensorflow.NameAttrList}
 */ proto.tensorflow.AttrValue.prototype.getFunc = function() {
    return /** @type{?proto.tensorflow.NameAttrList} */ jspb.Message.getWrapperField(this, proto.tensorflow.NameAttrList, 10);
};
/**
 * @param {?proto.tensorflow.NameAttrList|undefined} value
 * @return {!proto.tensorflow.AttrValue} returns this
*/ proto.tensorflow.AttrValue.prototype.setFunc = function(value) {
    return jspb.Message.setOneofWrapperField(this, 10, proto.tensorflow.AttrValue.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.AttrValue} returns this
 */ proto.tensorflow.AttrValue.prototype.clearFunc = function() {
    return this.setFunc(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AttrValue.prototype.hasFunc = function() {
    return jspb.Message.getField(this, 10) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.NameAttrList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.NameAttrList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.NameAttrList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.NameAttrList.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            attrMap: (f = msg.getAttrMap()) ? f.toObject(includeInstance, proto.tensorflow.AttrValue.toObject) : []
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.NameAttrList}
 */ proto.tensorflow.NameAttrList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.NameAttrList;
    return proto.tensorflow.NameAttrList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.NameAttrList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.NameAttrList}
 */ proto.tensorflow.NameAttrList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 2:
                var value = msg.getAttrMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.AttrValue.deserializeBinaryFromReader, "", new proto.tensorflow.AttrValue());
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.NameAttrList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.NameAttrList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.NameAttrList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.NameAttrList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getAttrMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.AttrValue.serializeBinaryToWriter);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.NameAttrList.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.NameAttrList} returns this
 */ proto.tensorflow.NameAttrList.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * map<string, AttrValue> attr = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.AttrValue>}
 */ proto.tensorflow.NameAttrList.prototype.getAttrMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.AttrValue>} */ jspb.Message.getMapField(this, 2, opt_noLazyCreate, proto.tensorflow.AttrValue);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.NameAttrList} returns this
 */ proto.tensorflow.NameAttrList.prototype.clearAttrMap = function() {
    this.getAttrMap().clear();
    return this;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.NodeDef.repeatedFields_ = [
    3
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.NodeDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.NodeDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.NodeDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.NodeDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            op: jspb.Message.getFieldWithDefault(msg, 2, ""),
            inputList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
            device: jspb.Message.getFieldWithDefault(msg, 4, ""),
            attrMap: (f = msg.getAttrMap()) ? f.toObject(includeInstance, proto.tensorflow.AttrValue.toObject) : []
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.NodeDef}
 */ proto.tensorflow.NodeDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.NodeDef;
    return proto.tensorflow.NodeDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.NodeDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.NodeDef}
 */ proto.tensorflow.NodeDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setOp(value);
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.addInput(value);
                break;
            case 4:
                var value = /** @type {string} */ reader.readString();
                msg.setDevice(value);
                break;
            case 5:
                var value = msg.getAttrMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.AttrValue.deserializeBinaryFromReader, "", new proto.tensorflow.AttrValue());
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.NodeDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.NodeDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.NodeDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.NodeDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getOp();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getInputList();
    if (f.length > 0) writer.writeRepeatedString(3, f);
    f = message.getDevice();
    if (f.length > 0) writer.writeString(4, f);
    f = message.getAttrMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.AttrValue.serializeBinaryToWriter);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.NodeDef.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string op = 2;
 * @return {string}
 */ proto.tensorflow.NodeDef.prototype.getOp = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.setOp = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated string input = 3;
 * @return {!Array<string>}
 */ proto.tensorflow.NodeDef.prototype.getInputList = function() {
    return /** @type {!Array<string>} */ jspb.Message.getRepeatedField(this, 3);
};
/**
 * @param {!Array<string>} value
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.setInputList = function(value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.addInput = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.clearInputList = function() {
    return this.setInputList([]);
};
/**
 * optional string device = 4;
 * @return {string}
 */ proto.tensorflow.NodeDef.prototype.getDevice = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.setDevice = function(value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * map<string, AttrValue> attr = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.AttrValue>}
 */ proto.tensorflow.NodeDef.prototype.getAttrMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.AttrValue>} */ jspb.Message.getMapField(this, 5, opt_noLazyCreate, proto.tensorflow.AttrValue);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.NodeDef} returns this
 */ proto.tensorflow.NodeDef.prototype.clearAttrMap = function() {
    this.getAttrMap().clear();
    return this;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.VersionDef.repeatedFields_ = [
    3
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.VersionDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.VersionDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.VersionDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.VersionDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            producer: jspb.Message.getFieldWithDefault(msg, 1, 0),
            minConsumer: jspb.Message.getFieldWithDefault(msg, 2, 0),
            badConsumersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.VersionDef}
 */ proto.tensorflow.VersionDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.VersionDef;
    return proto.tensorflow.VersionDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.VersionDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.VersionDef}
 */ proto.tensorflow.VersionDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt32();
                msg.setProducer(value);
                break;
            case 2:
                var value = /** @type {number} */ reader.readInt32();
                msg.setMinConsumer(value);
                break;
            case 3:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedInt32() : [
                    reader.readInt32()
                ];
                for(var i = 0; i < values.length; i++)msg.addBadConsumers(values[i]);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.VersionDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.VersionDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.VersionDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.VersionDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getProducer();
    if (f !== 0) writer.writeInt32(1, f);
    f = message.getMinConsumer();
    if (f !== 0) writer.writeInt32(2, f);
    f = message.getBadConsumersList();
    if (f.length > 0) writer.writePackedInt32(3, f);
};
/**
 * optional int32 producer = 1;
 * @return {number}
 */ proto.tensorflow.VersionDef.prototype.getProducer = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.VersionDef} returns this
 */ proto.tensorflow.VersionDef.prototype.setProducer = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int32 min_consumer = 2;
 * @return {number}
 */ proto.tensorflow.VersionDef.prototype.getMinConsumer = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.VersionDef} returns this
 */ proto.tensorflow.VersionDef.prototype.setMinConsumer = function(value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * repeated int32 bad_consumers = 3;
 * @return {!Array<number>}
 */ proto.tensorflow.VersionDef.prototype.getBadConsumersList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 3);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.VersionDef} returns this
 */ proto.tensorflow.VersionDef.prototype.setBadConsumersList = function(value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.VersionDef} returns this
 */ proto.tensorflow.VersionDef.prototype.addBadConsumers = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.VersionDef} returns this
 */ proto.tensorflow.VersionDef.prototype.clearBadConsumersList = function() {
    return this.setBadConsumersList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.GraphDef.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.GraphDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.GraphDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.GraphDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            nodeList: jspb.Message.toObjectList(msg.getNodeList(), proto.tensorflow.NodeDef.toObject, includeInstance),
            versions: (f = msg.getVersions()) && proto.tensorflow.VersionDef.toObject(includeInstance, f),
            library: (f = msg.getLibrary()) && proto.tensorflow.FunctionDefLibrary.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphDef}
 */ proto.tensorflow.GraphDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.GraphDef;
    return proto.tensorflow.GraphDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphDef}
 */ proto.tensorflow.GraphDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.NodeDef;
                reader.readMessage(value, proto.tensorflow.NodeDef.deserializeBinaryFromReader);
                msg.addNode(value);
                break;
            case 4:
                var value = new proto.tensorflow.VersionDef;
                reader.readMessage(value, proto.tensorflow.VersionDef.deserializeBinaryFromReader);
                msg.setVersions(value);
                break;
            case 2:
                var value = new proto.tensorflow.FunctionDefLibrary;
                reader.readMessage(value, proto.tensorflow.FunctionDefLibrary.deserializeBinaryFromReader);
                msg.setLibrary(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.GraphDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.GraphDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.GraphDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getNodeList();
    if (f.length > 0) writer.writeRepeatedMessage(1, f, proto.tensorflow.NodeDef.serializeBinaryToWriter);
    f = message.getVersions();
    if (f != null) writer.writeMessage(4, f, proto.tensorflow.VersionDef.serializeBinaryToWriter);
    f = message.getLibrary();
    if (f != null) writer.writeMessage(2, f, proto.tensorflow.FunctionDefLibrary.serializeBinaryToWriter);
};
/**
 * repeated NodeDef node = 1;
 * @return {!Array<!proto.tensorflow.NodeDef>}
 */ proto.tensorflow.GraphDef.prototype.getNodeList = function() {
    return /** @type{!Array<!proto.tensorflow.NodeDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NodeDef, 1);
};
/**
 * @param {!Array<!proto.tensorflow.NodeDef>} value
 * @return {!proto.tensorflow.GraphDef} returns this
*/ proto.tensorflow.GraphDef.prototype.setNodeList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.tensorflow.NodeDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeDef}
 */ proto.tensorflow.GraphDef.prototype.addNode = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.NodeDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.GraphDef} returns this
 */ proto.tensorflow.GraphDef.prototype.clearNodeList = function() {
    return this.setNodeList([]);
};
/**
 * optional VersionDef versions = 4;
 * @return {?proto.tensorflow.VersionDef}
 */ proto.tensorflow.GraphDef.prototype.getVersions = function() {
    return /** @type{?proto.tensorflow.VersionDef} */ jspb.Message.getWrapperField(this, proto.tensorflow.VersionDef, 4);
};
/**
 * @param {?proto.tensorflow.VersionDef|undefined} value
 * @return {!proto.tensorflow.GraphDef} returns this
*/ proto.tensorflow.GraphDef.prototype.setVersions = function(value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.GraphDef} returns this
 */ proto.tensorflow.GraphDef.prototype.clearVersions = function() {
    return this.setVersions(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.GraphDef.prototype.hasVersions = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional FunctionDefLibrary library = 2;
 * @return {?proto.tensorflow.FunctionDefLibrary}
 */ proto.tensorflow.GraphDef.prototype.getLibrary = function() {
    return /** @type{?proto.tensorflow.FunctionDefLibrary} */ jspb.Message.getWrapperField(this, proto.tensorflow.FunctionDefLibrary, 2);
};
/**
 * @param {?proto.tensorflow.FunctionDefLibrary|undefined} value
 * @return {!proto.tensorflow.GraphDef} returns this
*/ proto.tensorflow.GraphDef.prototype.setLibrary = function(value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.GraphDef} returns this
 */ proto.tensorflow.GraphDef.prototype.clearLibrary = function() {
    return this.setLibrary(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.GraphDef.prototype.hasLibrary = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */ proto.tensorflow.CollectionDef.oneofGroups_ = [
    [
        1,
        2,
        3,
        4,
        5
    ]
];
/**
 * @enum {number}
 */ proto.tensorflow.CollectionDef.KindCase = {
    KIND_NOT_SET: 0,
    NODE_LIST: 1,
    BYTES_LIST: 2,
    INT64_LIST: 3,
    FLOAT_LIST: 4,
    ANY_LIST: 5
};
/**
 * @return {proto.tensorflow.CollectionDef.KindCase}
 */ proto.tensorflow.CollectionDef.prototype.getKindCase = function() {
    return /** @type {proto.tensorflow.CollectionDef.KindCase} */ jspb.Message.computeOneofCase(this, proto.tensorflow.CollectionDef.oneofGroups_[0]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            nodeList: (f = msg.getNodeList()) && proto.tensorflow.CollectionDef.NodeList.toObject(includeInstance, f),
            bytesList: (f = msg.getBytesList()) && proto.tensorflow.CollectionDef.BytesList.toObject(includeInstance, f),
            int64List: (f = msg.getInt64List()) && proto.tensorflow.CollectionDef.Int64List.toObject(includeInstance, f),
            floatList: (f = msg.getFloatList()) && proto.tensorflow.CollectionDef.FloatList.toObject(includeInstance, f),
            anyList: (f = msg.getAnyList()) && proto.tensorflow.CollectionDef.AnyList.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef}
 */ proto.tensorflow.CollectionDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef;
    return proto.tensorflow.CollectionDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef}
 */ proto.tensorflow.CollectionDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.CollectionDef.NodeList;
                reader.readMessage(value, proto.tensorflow.CollectionDef.NodeList.deserializeBinaryFromReader);
                msg.setNodeList(value);
                break;
            case 2:
                var value = new proto.tensorflow.CollectionDef.BytesList;
                reader.readMessage(value, proto.tensorflow.CollectionDef.BytesList.deserializeBinaryFromReader);
                msg.setBytesList(value);
                break;
            case 3:
                var value = new proto.tensorflow.CollectionDef.Int64List;
                reader.readMessage(value, proto.tensorflow.CollectionDef.Int64List.deserializeBinaryFromReader);
                msg.setInt64List(value);
                break;
            case 4:
                var value = new proto.tensorflow.CollectionDef.FloatList;
                reader.readMessage(value, proto.tensorflow.CollectionDef.FloatList.deserializeBinaryFromReader);
                msg.setFloatList(value);
                break;
            case 5:
                var value = new proto.tensorflow.CollectionDef.AnyList;
                reader.readMessage(value, proto.tensorflow.CollectionDef.AnyList.deserializeBinaryFromReader);
                msg.setAnyList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getNodeList();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.CollectionDef.NodeList.serializeBinaryToWriter);
    f = message.getBytesList();
    if (f != null) writer.writeMessage(2, f, proto.tensorflow.CollectionDef.BytesList.serializeBinaryToWriter);
    f = message.getInt64List();
    if (f != null) writer.writeMessage(3, f, proto.tensorflow.CollectionDef.Int64List.serializeBinaryToWriter);
    f = message.getFloatList();
    if (f != null) writer.writeMessage(4, f, proto.tensorflow.CollectionDef.FloatList.serializeBinaryToWriter);
    f = message.getAnyList();
    if (f != null) writer.writeMessage(5, f, proto.tensorflow.CollectionDef.AnyList.serializeBinaryToWriter);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.CollectionDef.NodeList.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.NodeList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.NodeList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef.NodeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.NodeList.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef.NodeList}
 */ proto.tensorflow.CollectionDef.NodeList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef.NodeList;
    return proto.tensorflow.CollectionDef.NodeList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef.NodeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef.NodeList}
 */ proto.tensorflow.CollectionDef.NodeList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.addValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.NodeList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.NodeList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef.NodeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.NodeList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList();
    if (f.length > 0) writer.writeRepeatedString(1, f);
};
/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */ proto.tensorflow.CollectionDef.NodeList.prototype.getValueList = function() {
    return /** @type {!Array<string>} */ jspb.Message.getRepeatedField(this, 1);
};
/**
 * @param {!Array<string>} value
 * @return {!proto.tensorflow.CollectionDef.NodeList} returns this
 */ proto.tensorflow.CollectionDef.NodeList.prototype.setValueList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CollectionDef.NodeList} returns this
 */ proto.tensorflow.CollectionDef.NodeList.prototype.addValue = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.CollectionDef.NodeList} returns this
 */ proto.tensorflow.CollectionDef.NodeList.prototype.clearValueList = function() {
    return this.setValueList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.CollectionDef.BytesList.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.BytesList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.BytesList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef.BytesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.BytesList.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: msg.getValueList_asB64()
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef.BytesList}
 */ proto.tensorflow.CollectionDef.BytesList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef.BytesList;
    return proto.tensorflow.CollectionDef.BytesList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef.BytesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef.BytesList}
 */ proto.tensorflow.CollectionDef.BytesList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.addValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.BytesList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.BytesList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef.BytesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.BytesList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList_asU8();
    if (f.length > 0) writer.writeRepeatedBytes(1, f);
};
/**
 * repeated bytes value = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */ proto.tensorflow.CollectionDef.BytesList.prototype.getValueList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ jspb.Message.getRepeatedField(this, 1);
};
/**
 * repeated bytes value = 1;
 * This is a type-conversion wrapper around `getValueList()`
 * @return {!Array<string>}
 */ proto.tensorflow.CollectionDef.BytesList.prototype.getValueList_asB64 = function() {
    return /** @type {!Array<string>} */ jspb.Message.bytesListAsB64(this.getValueList());
};
/**
 * repeated bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueList()`
 * @return {!Array<!Uint8Array>}
 */ proto.tensorflow.CollectionDef.BytesList.prototype.getValueList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ jspb.Message.bytesListAsU8(this.getValueList());
};
/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tensorflow.CollectionDef.BytesList} returns this
 */ proto.tensorflow.CollectionDef.BytesList.prototype.setValueList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CollectionDef.BytesList} returns this
 */ proto.tensorflow.CollectionDef.BytesList.prototype.addValue = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.CollectionDef.BytesList} returns this
 */ proto.tensorflow.CollectionDef.BytesList.prototype.clearValueList = function() {
    return this.setValueList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.CollectionDef.Int64List.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.Int64List.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.Int64List.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef.Int64List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.Int64List.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef.Int64List}
 */ proto.tensorflow.CollectionDef.Int64List.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef.Int64List;
    return proto.tensorflow.CollectionDef.Int64List.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef.Int64List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef.Int64List}
 */ proto.tensorflow.CollectionDef.Int64List.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedInt64() : [
                    reader.readInt64()
                ];
                for(var i = 0; i < values.length; i++)msg.addValue(values[i]);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.Int64List.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.Int64List.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef.Int64List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.Int64List.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList();
    if (f.length > 0) writer.writePackedInt64(1, f);
};
/**
 * repeated int64 value = 1;
 * @return {!Array<number>}
 */ proto.tensorflow.CollectionDef.Int64List.prototype.getValueList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedField(this, 1);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.CollectionDef.Int64List} returns this
 */ proto.tensorflow.CollectionDef.Int64List.prototype.setValueList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CollectionDef.Int64List} returns this
 */ proto.tensorflow.CollectionDef.Int64List.prototype.addValue = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.CollectionDef.Int64List} returns this
 */ proto.tensorflow.CollectionDef.Int64List.prototype.clearValueList = function() {
    return this.setValueList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.CollectionDef.FloatList.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.FloatList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.FloatList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef.FloatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.FloatList.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef.FloatList}
 */ proto.tensorflow.CollectionDef.FloatList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef.FloatList;
    return proto.tensorflow.CollectionDef.FloatList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef.FloatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef.FloatList}
 */ proto.tensorflow.CollectionDef.FloatList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedFloat() : [
                    reader.readFloat()
                ];
                for(var i = 0; i < values.length; i++)msg.addValue(values[i]);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.FloatList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.FloatList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef.FloatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.FloatList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList();
    if (f.length > 0) writer.writePackedFloat(1, f);
};
/**
 * repeated float value = 1;
 * @return {!Array<number>}
 */ proto.tensorflow.CollectionDef.FloatList.prototype.getValueList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 1);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.CollectionDef.FloatList} returns this
 */ proto.tensorflow.CollectionDef.FloatList.prototype.setValueList = function(value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CollectionDef.FloatList} returns this
 */ proto.tensorflow.CollectionDef.FloatList.prototype.addValue = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.CollectionDef.FloatList} returns this
 */ proto.tensorflow.CollectionDef.FloatList.prototype.clearValueList = function() {
    return this.setValueList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.CollectionDef.AnyList.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.CollectionDef.AnyList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.CollectionDef.AnyList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CollectionDef.AnyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.AnyList.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: jspb.Message.toObjectList(msg.getValueList(), proto.tensorflow.Any.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CollectionDef.AnyList}
 */ proto.tensorflow.CollectionDef.AnyList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.CollectionDef.AnyList;
    return proto.tensorflow.CollectionDef.AnyList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CollectionDef.AnyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CollectionDef.AnyList}
 */ proto.tensorflow.CollectionDef.AnyList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.Any;
                reader.readMessage(value, proto.tensorflow.Any.deserializeBinaryFromReader);
                msg.addValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.CollectionDef.AnyList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.CollectionDef.AnyList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CollectionDef.AnyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.CollectionDef.AnyList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList();
    if (f.length > 0) writer.writeRepeatedMessage(1, f, proto.tensorflow.Any.serializeBinaryToWriter);
};
/**
 * repeated Any value = 1;
 * @return {!Array<!proto.tensorflow.Any>}
 */ proto.tensorflow.CollectionDef.AnyList.prototype.getValueList = function() {
    return /** @type{!Array<!proto.tensorflow.Any>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.Any, 1);
};
/**
 * @param {!Array<!proto.tensorflow.Any>} value
 * @return {!proto.tensorflow.CollectionDef.AnyList} returns this
*/ proto.tensorflow.CollectionDef.AnyList.prototype.setValueList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.tensorflow.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Any}
 */ proto.tensorflow.CollectionDef.AnyList.prototype.addValue = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.Any, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.CollectionDef.AnyList} returns this
 */ proto.tensorflow.CollectionDef.AnyList.prototype.clearValueList = function() {
    return this.setValueList([]);
};
/**
 * optional NodeList node_list = 1;
 * @return {?proto.tensorflow.CollectionDef.NodeList}
 */ proto.tensorflow.CollectionDef.prototype.getNodeList = function() {
    return /** @type{?proto.tensorflow.CollectionDef.NodeList} */ jspb.Message.getWrapperField(this, proto.tensorflow.CollectionDef.NodeList, 1);
};
/**
 * @param {?proto.tensorflow.CollectionDef.NodeList|undefined} value
 * @return {!proto.tensorflow.CollectionDef} returns this
*/ proto.tensorflow.CollectionDef.prototype.setNodeList = function(value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.tensorflow.CollectionDef.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.CollectionDef} returns this
 */ proto.tensorflow.CollectionDef.prototype.clearNodeList = function() {
    return this.setNodeList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.CollectionDef.prototype.hasNodeList = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional BytesList bytes_list = 2;
 * @return {?proto.tensorflow.CollectionDef.BytesList}
 */ proto.tensorflow.CollectionDef.prototype.getBytesList = function() {
    return /** @type{?proto.tensorflow.CollectionDef.BytesList} */ jspb.Message.getWrapperField(this, proto.tensorflow.CollectionDef.BytesList, 2);
};
/**
 * @param {?proto.tensorflow.CollectionDef.BytesList|undefined} value
 * @return {!proto.tensorflow.CollectionDef} returns this
*/ proto.tensorflow.CollectionDef.prototype.setBytesList = function(value) {
    return jspb.Message.setOneofWrapperField(this, 2, proto.tensorflow.CollectionDef.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.CollectionDef} returns this
 */ proto.tensorflow.CollectionDef.prototype.clearBytesList = function() {
    return this.setBytesList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.CollectionDef.prototype.hasBytesList = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional Int64List int64_list = 3;
 * @return {?proto.tensorflow.CollectionDef.Int64List}
 */ proto.tensorflow.CollectionDef.prototype.getInt64List = function() {
    return /** @type{?proto.tensorflow.CollectionDef.Int64List} */ jspb.Message.getWrapperField(this, proto.tensorflow.CollectionDef.Int64List, 3);
};
/**
 * @param {?proto.tensorflow.CollectionDef.Int64List|undefined} value
 * @return {!proto.tensorflow.CollectionDef} returns this
*/ proto.tensorflow.CollectionDef.prototype.setInt64List = function(value) {
    return jspb.Message.setOneofWrapperField(this, 3, proto.tensorflow.CollectionDef.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.CollectionDef} returns this
 */ proto.tensorflow.CollectionDef.prototype.clearInt64List = function() {
    return this.setInt64List(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.CollectionDef.prototype.hasInt64List = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional FloatList float_list = 4;
 * @return {?proto.tensorflow.CollectionDef.FloatList}
 */ proto.tensorflow.CollectionDef.prototype.getFloatList = function() {
    return /** @type{?proto.tensorflow.CollectionDef.FloatList} */ jspb.Message.getWrapperField(this, proto.tensorflow.CollectionDef.FloatList, 4);
};
/**
 * @param {?proto.tensorflow.CollectionDef.FloatList|undefined} value
 * @return {!proto.tensorflow.CollectionDef} returns this
*/ proto.tensorflow.CollectionDef.prototype.setFloatList = function(value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.tensorflow.CollectionDef.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.CollectionDef} returns this
 */ proto.tensorflow.CollectionDef.prototype.clearFloatList = function() {
    return this.setFloatList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.CollectionDef.prototype.hasFloatList = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional AnyList any_list = 5;
 * @return {?proto.tensorflow.CollectionDef.AnyList}
 */ proto.tensorflow.CollectionDef.prototype.getAnyList = function() {
    return /** @type{?proto.tensorflow.CollectionDef.AnyList} */ jspb.Message.getWrapperField(this, proto.tensorflow.CollectionDef.AnyList, 5);
};
/**
 * @param {?proto.tensorflow.CollectionDef.AnyList|undefined} value
 * @return {!proto.tensorflow.CollectionDef} returns this
*/ proto.tensorflow.CollectionDef.prototype.setAnyList = function(value) {
    return jspb.Message.setOneofWrapperField(this, 5, proto.tensorflow.CollectionDef.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.CollectionDef} returns this
 */ proto.tensorflow.CollectionDef.prototype.clearAnyList = function() {
    return this.setAnyList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.CollectionDef.prototype.hasAnyList = function() {
    return jspb.Message.getField(this, 5) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SaverDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SaverDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SaverDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SaverDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            filenameTensorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            saveTensorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            restoreOpName: jspb.Message.getFieldWithDefault(msg, 3, ""),
            maxToKeep: jspb.Message.getFieldWithDefault(msg, 4, 0),
            sharded: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            keepCheckpointEveryNHours: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
            version: jspb.Message.getFieldWithDefault(msg, 7, 0)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SaverDef}
 */ proto.tensorflow.SaverDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SaverDef;
    return proto.tensorflow.SaverDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SaverDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SaverDef}
 */ proto.tensorflow.SaverDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setFilenameTensorName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setSaveTensorName(value);
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.setRestoreOpName(value);
                break;
            case 4:
                var value = /** @type {number} */ reader.readInt32();
                msg.setMaxToKeep(value);
                break;
            case 5:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setSharded(value);
                break;
            case 6:
                var value = /** @type {number} */ reader.readFloat();
                msg.setKeepCheckpointEveryNHours(value);
                break;
            case 7:
                var value = /** @type {!proto.tensorflow.SaverDef.CheckpointFormatVersion} */ reader.readEnum();
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SaverDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SaverDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SaverDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SaverDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getFilenameTensorName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getSaveTensorName();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getRestoreOpName();
    if (f.length > 0) writer.writeString(3, f);
    f = message.getMaxToKeep();
    if (f !== 0) writer.writeInt32(4, f);
    f = message.getSharded();
    if (f) writer.writeBool(5, f);
    f = message.getKeepCheckpointEveryNHours();
    if (f !== 0.0) writer.writeFloat(6, f);
    f = message.getVersion();
    if (f !== 0.0) writer.writeEnum(7, f);
};
/**
 * @enum {number}
 */ proto.tensorflow.SaverDef.CheckpointFormatVersion = {
    LEGACY: 0,
    V1: 1,
    V2: 2
};
/**
 * optional string filename_tensor_name = 1;
 * @return {string}
 */ proto.tensorflow.SaverDef.prototype.getFilenameTensorName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setFilenameTensorName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string save_tensor_name = 2;
 * @return {string}
 */ proto.tensorflow.SaverDef.prototype.getSaveTensorName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setSaveTensorName = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string restore_op_name = 3;
 * @return {string}
 */ proto.tensorflow.SaverDef.prototype.getRestoreOpName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setRestoreOpName = function(value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional int32 max_to_keep = 4;
 * @return {number}
 */ proto.tensorflow.SaverDef.prototype.getMaxToKeep = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 4, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setMaxToKeep = function(value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional bool sharded = 5;
 * @return {boolean}
 */ proto.tensorflow.SaverDef.prototype.getSharded = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 5, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setSharded = function(value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};
/**
 * optional float keep_checkpoint_every_n_hours = 6;
 * @return {number}
 */ proto.tensorflow.SaverDef.prototype.getKeepCheckpointEveryNHours = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setKeepCheckpointEveryNHours = function(value) {
    return jspb.Message.setProto3FloatField(this, 6, value);
};
/**
 * optional CheckpointFormatVersion version = 7;
 * @return {!proto.tensorflow.SaverDef.CheckpointFormatVersion}
 */ proto.tensorflow.SaverDef.prototype.getVersion = function() {
    return /** @type {!proto.tensorflow.SaverDef.CheckpointFormatVersion} */ jspb.Message.getFieldWithDefault(this, 7, 0);
};
/**
 * @param {!proto.tensorflow.SaverDef.CheckpointFormatVersion} value
 * @return {!proto.tensorflow.SaverDef} returns this
 */ proto.tensorflow.SaverDef.prototype.setVersion = function(value) {
    return jspb.Message.setProto3EnumField(this, 7, value);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */ proto.tensorflow.TensorInfo.oneofGroups_ = [
    [
        1,
        4
    ]
];
/**
 * @enum {number}
 */ proto.tensorflow.TensorInfo.EncodingCase = {
    ENCODING_NOT_SET: 0,
    NAME: 1,
    COO_SPARSE: 4
};
/**
 * @return {proto.tensorflow.TensorInfo.EncodingCase}
 */ proto.tensorflow.TensorInfo.prototype.getEncodingCase = function() {
    return /** @type {proto.tensorflow.TensorInfo.EncodingCase} */ jspb.Message.computeOneofCase(this, proto.tensorflow.TensorInfo.oneofGroups_[0]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.TensorInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.TensorInfo.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.TensorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorInfo.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            cooSparse: (f = msg.getCooSparse()) && proto.tensorflow.TensorInfo.CooSparse.toObject(includeInstance, f),
            dtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
            tensorShape: (f = msg.getTensorShape()) && proto.tensorflow.TensorShape.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.TensorInfo}
 */ proto.tensorflow.TensorInfo.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.TensorInfo;
    return proto.tensorflow.TensorInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.TensorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.TensorInfo}
 */ proto.tensorflow.TensorInfo.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 4:
                var value = new proto.tensorflow.TensorInfo.CooSparse;
                reader.readMessage(value, proto.tensorflow.TensorInfo.CooSparse.deserializeBinaryFromReader);
                msg.setCooSparse(value);
                break;
            case 2:
                var value = /** @type {!proto.tensorflow.DataType} */ reader.readEnum();
                msg.setDtype(value);
                break;
            case 3:
                var value = new proto.tensorflow.TensorShape;
                reader.readMessage(value, proto.tensorflow.TensorShape.deserializeBinaryFromReader);
                msg.setTensorShape(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.TensorInfo.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.TensorInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.TensorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorInfo.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = /** @type {string} */ jspb.Message.getField(message, 1);
    if (f != null) writer.writeString(1, f);
    f = message.getCooSparse();
    if (f != null) writer.writeMessage(4, f, proto.tensorflow.TensorInfo.CooSparse.serializeBinaryToWriter);
    f = message.getDtype();
    if (f !== 0.0) writer.writeEnum(2, f);
    f = message.getTensorShape();
    if (f != null) writer.writeMessage(3, f, proto.tensorflow.TensorShape.serializeBinaryToWriter);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.TensorInfo.CooSparse.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.TensorInfo.CooSparse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorInfo.CooSparse.toObject = function(includeInstance, msg) {
        var f, obj = {
            valuesTensorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            indicesTensorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            denseShapeTensorName: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.TensorInfo.CooSparse}
 */ proto.tensorflow.TensorInfo.CooSparse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.TensorInfo.CooSparse;
    return proto.tensorflow.TensorInfo.CooSparse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.TensorInfo.CooSparse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.TensorInfo.CooSparse}
 */ proto.tensorflow.TensorInfo.CooSparse.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setValuesTensorName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setIndicesTensorName(value);
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.setDenseShapeTensorName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.TensorInfo.CooSparse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.TensorInfo.CooSparse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.TensorInfo.CooSparse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValuesTensorName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getIndicesTensorName();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getDenseShapeTensorName();
    if (f.length > 0) writer.writeString(3, f);
};
/**
 * optional string values_tensor_name = 1;
 * @return {string}
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.getValuesTensorName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.TensorInfo.CooSparse} returns this
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.setValuesTensorName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string indices_tensor_name = 2;
 * @return {string}
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.getIndicesTensorName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.TensorInfo.CooSparse} returns this
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.setIndicesTensorName = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string dense_shape_tensor_name = 3;
 * @return {string}
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.getDenseShapeTensorName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.TensorInfo.CooSparse} returns this
 */ proto.tensorflow.TensorInfo.CooSparse.prototype.setDenseShapeTensorName = function(value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.TensorInfo.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.TensorInfo} returns this
 */ proto.tensorflow.TensorInfo.prototype.setName = function(value) {
    return jspb.Message.setOneofField(this, 1, proto.tensorflow.TensorInfo.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.TensorInfo} returns this
 */ proto.tensorflow.TensorInfo.prototype.clearName = function() {
    return jspb.Message.setOneofField(this, 1, proto.tensorflow.TensorInfo.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.TensorInfo.prototype.hasName = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional CooSparse coo_sparse = 4;
 * @return {?proto.tensorflow.TensorInfo.CooSparse}
 */ proto.tensorflow.TensorInfo.prototype.getCooSparse = function() {
    return /** @type{?proto.tensorflow.TensorInfo.CooSparse} */ jspb.Message.getWrapperField(this, proto.tensorflow.TensorInfo.CooSparse, 4);
};
/**
 * @param {?proto.tensorflow.TensorInfo.CooSparse|undefined} value
 * @return {!proto.tensorflow.TensorInfo} returns this
*/ proto.tensorflow.TensorInfo.prototype.setCooSparse = function(value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.tensorflow.TensorInfo.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.TensorInfo} returns this
 */ proto.tensorflow.TensorInfo.prototype.clearCooSparse = function() {
    return this.setCooSparse(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.TensorInfo.prototype.hasCooSparse = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional DataType dtype = 2;
 * @return {!proto.tensorflow.DataType}
 */ proto.tensorflow.TensorInfo.prototype.getDtype = function() {
    return /** @type {!proto.tensorflow.DataType} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};
/**
 * @param {!proto.tensorflow.DataType} value
 * @return {!proto.tensorflow.TensorInfo} returns this
 */ proto.tensorflow.TensorInfo.prototype.setDtype = function(value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * optional TensorShape tensor_shape = 3;
 * @return {?proto.tensorflow.TensorShape}
 */ proto.tensorflow.TensorInfo.prototype.getTensorShape = function() {
    return /** @type{?proto.tensorflow.TensorShape} */ jspb.Message.getWrapperField(this, proto.tensorflow.TensorShape, 3);
};
/**
 * @param {?proto.tensorflow.TensorShape|undefined} value
 * @return {!proto.tensorflow.TensorInfo} returns this
*/ proto.tensorflow.TensorInfo.prototype.setTensorShape = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.TensorInfo} returns this
 */ proto.tensorflow.TensorInfo.prototype.clearTensorShape = function() {
    return this.setTensorShape(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.TensorInfo.prototype.hasTensorShape = function() {
    return jspb.Message.getField(this, 3) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SignatureDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SignatureDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SignatureDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SignatureDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            inputsMap: (f = msg.getInputsMap()) ? f.toObject(includeInstance, proto.tensorflow.TensorInfo.toObject) : [],
            outputsMap: (f = msg.getOutputsMap()) ? f.toObject(includeInstance, proto.tensorflow.TensorInfo.toObject) : [],
            methodName: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SignatureDef}
 */ proto.tensorflow.SignatureDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SignatureDef;
    return proto.tensorflow.SignatureDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SignatureDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SignatureDef}
 */ proto.tensorflow.SignatureDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = msg.getInputsMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.TensorInfo.deserializeBinaryFromReader, "", new proto.tensorflow.TensorInfo());
                });
                break;
            case 2:
                var value = msg.getOutputsMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.TensorInfo.deserializeBinaryFromReader, "", new proto.tensorflow.TensorInfo());
                });
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.setMethodName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SignatureDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SignatureDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SignatureDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SignatureDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getInputsMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.TensorInfo.serializeBinaryToWriter);
    f = message.getOutputsMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.TensorInfo.serializeBinaryToWriter);
    f = message.getMethodName();
    if (f.length > 0) writer.writeString(3, f);
};
/**
 * map<string, TensorInfo> inputs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.TensorInfo>}
 */ proto.tensorflow.SignatureDef.prototype.getInputsMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.TensorInfo>} */ jspb.Message.getMapField(this, 1, opt_noLazyCreate, proto.tensorflow.TensorInfo);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.SignatureDef} returns this
 */ proto.tensorflow.SignatureDef.prototype.clearInputsMap = function() {
    this.getInputsMap().clear();
    return this;
};
/**
 * map<string, TensorInfo> outputs = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.TensorInfo>}
 */ proto.tensorflow.SignatureDef.prototype.getOutputsMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.TensorInfo>} */ jspb.Message.getMapField(this, 2, opt_noLazyCreate, proto.tensorflow.TensorInfo);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.SignatureDef} returns this
 */ proto.tensorflow.SignatureDef.prototype.clearOutputsMap = function() {
    this.getOutputsMap().clear();
    return this;
};
/**
 * optional string method_name = 3;
 * @return {string}
 */ proto.tensorflow.SignatureDef.prototype.getMethodName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SignatureDef} returns this
 */ proto.tensorflow.SignatureDef.prototype.setMethodName = function(value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.AssetFileDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.AssetFileDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AssetFileDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AssetFileDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            tensorInfo: (f = msg.getTensorInfo()) && proto.tensorflow.TensorInfo.toObject(includeInstance, f),
            filename: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AssetFileDef}
 */ proto.tensorflow.AssetFileDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.AssetFileDef;
    return proto.tensorflow.AssetFileDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AssetFileDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AssetFileDef}
 */ proto.tensorflow.AssetFileDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.TensorInfo;
                reader.readMessage(value, proto.tensorflow.TensorInfo.deserializeBinaryFromReader);
                msg.setTensorInfo(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setFilename(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.AssetFileDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.AssetFileDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AssetFileDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.AssetFileDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTensorInfo();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.TensorInfo.serializeBinaryToWriter);
    f = message.getFilename();
    if (f.length > 0) writer.writeString(2, f);
};
/**
 * optional TensorInfo tensor_info = 1;
 * @return {?proto.tensorflow.TensorInfo}
 */ proto.tensorflow.AssetFileDef.prototype.getTensorInfo = function() {
    return /** @type{?proto.tensorflow.TensorInfo} */ jspb.Message.getWrapperField(this, proto.tensorflow.TensorInfo, 1);
};
/**
 * @param {?proto.tensorflow.TensorInfo|undefined} value
 * @return {!proto.tensorflow.AssetFileDef} returns this
*/ proto.tensorflow.AssetFileDef.prototype.setTensorInfo = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.AssetFileDef} returns this
 */ proto.tensorflow.AssetFileDef.prototype.clearTensorInfo = function() {
    return this.setTensorInfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.AssetFileDef.prototype.hasTensorInfo = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string filename = 2;
 * @return {string}
 */ proto.tensorflow.AssetFileDef.prototype.getFilename = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.AssetFileDef} returns this
 */ proto.tensorflow.AssetFileDef.prototype.setFilename = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.OpDef.repeatedFields_ = [
    2,
    3,
    4
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.OpDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.OpDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.OpDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            inputArgList: jspb.Message.toObjectList(msg.getInputArgList(), proto.tensorflow.OpDef.ArgDef.toObject, includeInstance),
            outputArgList: jspb.Message.toObjectList(msg.getOutputArgList(), proto.tensorflow.OpDef.ArgDef.toObject, includeInstance),
            attrList: jspb.Message.toObjectList(msg.getAttrList(), proto.tensorflow.OpDef.AttrDef.toObject, includeInstance),
            deprecation: (f = msg.getDeprecation()) && proto.tensorflow.OpDef.OpDeprecation.toObject(includeInstance, f),
            summary: jspb.Message.getFieldWithDefault(msg, 5, ""),
            description: jspb.Message.getFieldWithDefault(msg, 6, ""),
            isCommutative: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
            isAggregate: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
            isStateful: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
            allowsUninitializedInput: jspb.Message.getBooleanFieldWithDefault(msg, 19, false)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.OpDef}
 */ proto.tensorflow.OpDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.OpDef;
    return proto.tensorflow.OpDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.OpDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.OpDef}
 */ proto.tensorflow.OpDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 2:
                var value = new proto.tensorflow.OpDef.ArgDef;
                reader.readMessage(value, proto.tensorflow.OpDef.ArgDef.deserializeBinaryFromReader);
                msg.addInputArg(value);
                break;
            case 3:
                var value = new proto.tensorflow.OpDef.ArgDef;
                reader.readMessage(value, proto.tensorflow.OpDef.ArgDef.deserializeBinaryFromReader);
                msg.addOutputArg(value);
                break;
            case 4:
                var value = new proto.tensorflow.OpDef.AttrDef;
                reader.readMessage(value, proto.tensorflow.OpDef.AttrDef.deserializeBinaryFromReader);
                msg.addAttr(value);
                break;
            case 8:
                var value = new proto.tensorflow.OpDef.OpDeprecation;
                reader.readMessage(value, proto.tensorflow.OpDef.OpDeprecation.deserializeBinaryFromReader);
                msg.setDeprecation(value);
                break;
            case 5:
                var value = /** @type {string} */ reader.readString();
                msg.setSummary(value);
                break;
            case 6:
                var value = /** @type {string} */ reader.readString();
                msg.setDescription(value);
                break;
            case 18:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setIsCommutative(value);
                break;
            case 16:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setIsAggregate(value);
                break;
            case 17:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setIsStateful(value);
                break;
            case 19:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setAllowsUninitializedInput(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.OpDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.OpDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.OpDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getInputArgList();
    if (f.length > 0) writer.writeRepeatedMessage(2, f, proto.tensorflow.OpDef.ArgDef.serializeBinaryToWriter);
    f = message.getOutputArgList();
    if (f.length > 0) writer.writeRepeatedMessage(3, f, proto.tensorflow.OpDef.ArgDef.serializeBinaryToWriter);
    f = message.getAttrList();
    if (f.length > 0) writer.writeRepeatedMessage(4, f, proto.tensorflow.OpDef.AttrDef.serializeBinaryToWriter);
    f = message.getDeprecation();
    if (f != null) writer.writeMessage(8, f, proto.tensorflow.OpDef.OpDeprecation.serializeBinaryToWriter);
    f = message.getSummary();
    if (f.length > 0) writer.writeString(5, f);
    f = message.getDescription();
    if (f.length > 0) writer.writeString(6, f);
    f = message.getIsCommutative();
    if (f) writer.writeBool(18, f);
    f = message.getIsAggregate();
    if (f) writer.writeBool(16, f);
    f = message.getIsStateful();
    if (f) writer.writeBool(17, f);
    f = message.getAllowsUninitializedInput();
    if (f) writer.writeBool(19, f);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.OpDef.ArgDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.OpDef.ArgDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.OpDef.ArgDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.ArgDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            description: jspb.Message.getFieldWithDefault(msg, 2, ""),
            type: jspb.Message.getFieldWithDefault(msg, 3, 0),
            typeAttr: jspb.Message.getFieldWithDefault(msg, 4, ""),
            numberAttr: jspb.Message.getFieldWithDefault(msg, 5, ""),
            typeListAttr: jspb.Message.getFieldWithDefault(msg, 6, ""),
            isRef: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.OpDef.ArgDef}
 */ proto.tensorflow.OpDef.ArgDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.OpDef.ArgDef;
    return proto.tensorflow.OpDef.ArgDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.OpDef.ArgDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.OpDef.ArgDef}
 */ proto.tensorflow.OpDef.ArgDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setDescription(value);
                break;
            case 3:
                var value = /** @type {!proto.tensorflow.DataType} */ reader.readEnum();
                msg.setType(value);
                break;
            case 4:
                var value = /** @type {string} */ reader.readString();
                msg.setTypeAttr(value);
                break;
            case 5:
                var value = /** @type {string} */ reader.readString();
                msg.setNumberAttr(value);
                break;
            case 6:
                var value = /** @type {string} */ reader.readString();
                msg.setTypeListAttr(value);
                break;
            case 16:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setIsRef(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.OpDef.ArgDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.OpDef.ArgDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.OpDef.ArgDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.ArgDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getDescription();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getType();
    if (f !== 0.0) writer.writeEnum(3, f);
    f = message.getTypeAttr();
    if (f.length > 0) writer.writeString(4, f);
    f = message.getNumberAttr();
    if (f.length > 0) writer.writeString(5, f);
    f = message.getTypeListAttr();
    if (f.length > 0) writer.writeString(6, f);
    f = message.getIsRef();
    if (f) writer.writeBool(16, f);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string description = 2;
 * @return {string}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getDescription = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setDescription = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional DataType type = 3;
 * @return {!proto.tensorflow.DataType}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getType = function() {
    return /** @type {!proto.tensorflow.DataType} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};
/**
 * @param {!proto.tensorflow.DataType} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setType = function(value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * optional string type_attr = 4;
 * @return {string}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getTypeAttr = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setTypeAttr = function(value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string number_attr = 5;
 * @return {string}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getNumberAttr = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setNumberAttr = function(value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string type_list_attr = 6;
 * @return {string}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getTypeListAttr = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 6, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setTypeListAttr = function(value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional bool is_ref = 16;
 * @return {boolean}
 */ proto.tensorflow.OpDef.ArgDef.prototype.getIsRef = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 16, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef.ArgDef} returns this
 */ proto.tensorflow.OpDef.ArgDef.prototype.setIsRef = function(value) {
    return jspb.Message.setProto3BooleanField(this, 16, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.OpDef.AttrDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.OpDef.AttrDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.OpDef.AttrDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.AttrDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            type: jspb.Message.getFieldWithDefault(msg, 2, ""),
            defaultValue: (f = msg.getDefaultValue()) && proto.tensorflow.AttrValue.toObject(includeInstance, f),
            description: jspb.Message.getFieldWithDefault(msg, 4, ""),
            hasMinimum: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            minimum: jspb.Message.getFieldWithDefault(msg, 6, 0),
            allowedValues: (f = msg.getAllowedValues()) && proto.tensorflow.AttrValue.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.OpDef.AttrDef}
 */ proto.tensorflow.OpDef.AttrDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.OpDef.AttrDef;
    return proto.tensorflow.OpDef.AttrDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.OpDef.AttrDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.OpDef.AttrDef}
 */ proto.tensorflow.OpDef.AttrDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setType(value);
                break;
            case 3:
                var value = new proto.tensorflow.AttrValue;
                reader.readMessage(value, proto.tensorflow.AttrValue.deserializeBinaryFromReader);
                msg.setDefaultValue(value);
                break;
            case 4:
                var value = /** @type {string} */ reader.readString();
                msg.setDescription(value);
                break;
            case 5:
                var value = /** @type {boolean} */ reader.readBool();
                msg.setHasMinimum(value);
                break;
            case 6:
                var value = /** @type {number} */ reader.readInt64();
                msg.setMinimum(value);
                break;
            case 7:
                var value = new proto.tensorflow.AttrValue;
                reader.readMessage(value, proto.tensorflow.AttrValue.deserializeBinaryFromReader);
                msg.setAllowedValues(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.OpDef.AttrDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.OpDef.AttrDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.OpDef.AttrDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.AttrDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getType();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getDefaultValue();
    if (f != null) writer.writeMessage(3, f, proto.tensorflow.AttrValue.serializeBinaryToWriter);
    f = message.getDescription();
    if (f.length > 0) writer.writeString(4, f);
    f = message.getHasMinimum();
    if (f) writer.writeBool(5, f);
    f = message.getMinimum();
    if (f !== 0) writer.writeInt64(6, f);
    f = message.getAllowedValues();
    if (f != null) writer.writeMessage(7, f, proto.tensorflow.AttrValue.serializeBinaryToWriter);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string type = 2;
 * @return {string}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getType = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.setType = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional AttrValue default_value = 3;
 * @return {?proto.tensorflow.AttrValue}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getDefaultValue = function() {
    return /** @type{?proto.tensorflow.AttrValue} */ jspb.Message.getWrapperField(this, proto.tensorflow.AttrValue, 3);
};
/**
 * @param {?proto.tensorflow.AttrValue|undefined} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
*/ proto.tensorflow.OpDef.AttrDef.prototype.setDefaultValue = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.clearDefaultValue = function() {
    return this.setDefaultValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.OpDef.AttrDef.prototype.hasDefaultValue = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string description = 4;
 * @return {string}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getDescription = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.setDescription = function(value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional bool has_minimum = 5;
 * @return {boolean}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getHasMinimum = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 5, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.setHasMinimum = function(value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};
/**
 * optional int64 minimum = 6;
 * @return {number}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getMinimum = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 6, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.setMinimum = function(value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional AttrValue allowed_values = 7;
 * @return {?proto.tensorflow.AttrValue}
 */ proto.tensorflow.OpDef.AttrDef.prototype.getAllowedValues = function() {
    return /** @type{?proto.tensorflow.AttrValue} */ jspb.Message.getWrapperField(this, proto.tensorflow.AttrValue, 7);
};
/**
 * @param {?proto.tensorflow.AttrValue|undefined} value
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
*/ proto.tensorflow.OpDef.AttrDef.prototype.setAllowedValues = function(value) {
    return jspb.Message.setWrapperField(this, 7, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.OpDef.AttrDef} returns this
 */ proto.tensorflow.OpDef.AttrDef.prototype.clearAllowedValues = function() {
    return this.setAllowedValues(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.OpDef.AttrDef.prototype.hasAllowedValues = function() {
    return jspb.Message.getField(this, 7) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.OpDef.OpDeprecation.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.OpDef.OpDeprecation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.OpDeprecation.toObject = function(includeInstance, msg) {
        var f, obj = {
            version: jspb.Message.getFieldWithDefault(msg, 1, 0),
            explanation: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.OpDef.OpDeprecation}
 */ proto.tensorflow.OpDef.OpDeprecation.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.OpDef.OpDeprecation;
    return proto.tensorflow.OpDef.OpDeprecation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.OpDef.OpDeprecation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.OpDef.OpDeprecation}
 */ proto.tensorflow.OpDef.OpDeprecation.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt32();
                msg.setVersion(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setExplanation(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.OpDef.OpDeprecation.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.OpDef.OpDeprecation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpDef.OpDeprecation.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getVersion();
    if (f !== 0) writer.writeInt32(1, f);
    f = message.getExplanation();
    if (f.length > 0) writer.writeString(2, f);
};
/**
 * optional int32 version = 1;
 * @return {number}
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.getVersion = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.OpDef.OpDeprecation} returns this
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.setVersion = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string explanation = 2;
 * @return {string}
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.getExplanation = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef.OpDeprecation} returns this
 */ proto.tensorflow.OpDef.OpDeprecation.prototype.setExplanation = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string name = 1;
 * @return {string}
 */ proto.tensorflow.OpDef.prototype.getName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated ArgDef input_arg = 2;
 * @return {!Array<!proto.tensorflow.OpDef.ArgDef>}
 */ proto.tensorflow.OpDef.prototype.getInputArgList = function() {
    return /** @type{!Array<!proto.tensorflow.OpDef.ArgDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.OpDef.ArgDef, 2);
};
/**
 * @param {!Array<!proto.tensorflow.OpDef.ArgDef>} value
 * @return {!proto.tensorflow.OpDef} returns this
*/ proto.tensorflow.OpDef.prototype.setInputArgList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.tensorflow.OpDef.ArgDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.OpDef.ArgDef}
 */ proto.tensorflow.OpDef.prototype.addInputArg = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.OpDef.ArgDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.clearInputArgList = function() {
    return this.setInputArgList([]);
};
/**
 * repeated ArgDef output_arg = 3;
 * @return {!Array<!proto.tensorflow.OpDef.ArgDef>}
 */ proto.tensorflow.OpDef.prototype.getOutputArgList = function() {
    return /** @type{!Array<!proto.tensorflow.OpDef.ArgDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.OpDef.ArgDef, 3);
};
/**
 * @param {!Array<!proto.tensorflow.OpDef.ArgDef>} value
 * @return {!proto.tensorflow.OpDef} returns this
*/ proto.tensorflow.OpDef.prototype.setOutputArgList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.tensorflow.OpDef.ArgDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.OpDef.ArgDef}
 */ proto.tensorflow.OpDef.prototype.addOutputArg = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.OpDef.ArgDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.clearOutputArgList = function() {
    return this.setOutputArgList([]);
};
/**
 * repeated AttrDef attr = 4;
 * @return {!Array<!proto.tensorflow.OpDef.AttrDef>}
 */ proto.tensorflow.OpDef.prototype.getAttrList = function() {
    return /** @type{!Array<!proto.tensorflow.OpDef.AttrDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.OpDef.AttrDef, 4);
};
/**
 * @param {!Array<!proto.tensorflow.OpDef.AttrDef>} value
 * @return {!proto.tensorflow.OpDef} returns this
*/ proto.tensorflow.OpDef.prototype.setAttrList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 4, value);
};
/**
 * @param {!proto.tensorflow.OpDef.AttrDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.OpDef.AttrDef}
 */ proto.tensorflow.OpDef.prototype.addAttr = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tensorflow.OpDef.AttrDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.clearAttrList = function() {
    return this.setAttrList([]);
};
/**
 * optional OpDeprecation deprecation = 8;
 * @return {?proto.tensorflow.OpDef.OpDeprecation}
 */ proto.tensorflow.OpDef.prototype.getDeprecation = function() {
    return /** @type{?proto.tensorflow.OpDef.OpDeprecation} */ jspb.Message.getWrapperField(this, proto.tensorflow.OpDef.OpDeprecation, 8);
};
/**
 * @param {?proto.tensorflow.OpDef.OpDeprecation|undefined} value
 * @return {!proto.tensorflow.OpDef} returns this
*/ proto.tensorflow.OpDef.prototype.setDeprecation = function(value) {
    return jspb.Message.setWrapperField(this, 8, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.clearDeprecation = function() {
    return this.setDeprecation(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.OpDef.prototype.hasDeprecation = function() {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional string summary = 5;
 * @return {string}
 */ proto.tensorflow.OpDef.prototype.getSummary = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setSummary = function(value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string description = 6;
 * @return {string}
 */ proto.tensorflow.OpDef.prototype.getDescription = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 6, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setDescription = function(value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional bool is_commutative = 18;
 * @return {boolean}
 */ proto.tensorflow.OpDef.prototype.getIsCommutative = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 18, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setIsCommutative = function(value) {
    return jspb.Message.setProto3BooleanField(this, 18, value);
};
/**
 * optional bool is_aggregate = 16;
 * @return {boolean}
 */ proto.tensorflow.OpDef.prototype.getIsAggregate = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 16, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setIsAggregate = function(value) {
    return jspb.Message.setProto3BooleanField(this, 16, value);
};
/**
 * optional bool is_stateful = 17;
 * @return {boolean}
 */ proto.tensorflow.OpDef.prototype.getIsStateful = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 17, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setIsStateful = function(value) {
    return jspb.Message.setProto3BooleanField(this, 17, value);
};
/**
 * optional bool allows_uninitialized_input = 19;
 * @return {boolean}
 */ proto.tensorflow.OpDef.prototype.getAllowsUninitializedInput = function() {
    return /** @type {boolean} */ jspb.Message.getBooleanFieldWithDefault(this, 19, false);
};
/**
 * @param {boolean} value
 * @return {!proto.tensorflow.OpDef} returns this
 */ proto.tensorflow.OpDef.prototype.setAllowsUninitializedInput = function(value) {
    return jspb.Message.setProto3BooleanField(this, 19, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.OpList.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.OpList.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.OpList.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.OpList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpList.toObject = function(includeInstance, msg) {
        var f, obj = {
            opList: jspb.Message.toObjectList(msg.getOpList(), proto.tensorflow.OpDef.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.OpList}
 */ proto.tensorflow.OpList.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.OpList;
    return proto.tensorflow.OpList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.OpList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.OpList}
 */ proto.tensorflow.OpList.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.OpDef;
                reader.readMessage(value, proto.tensorflow.OpDef.deserializeBinaryFromReader);
                msg.addOp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.OpList.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.OpList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.OpList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.OpList.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOpList();
    if (f.length > 0) writer.writeRepeatedMessage(1, f, proto.tensorflow.OpDef.serializeBinaryToWriter);
};
/**
 * repeated OpDef op = 1;
 * @return {!Array<!proto.tensorflow.OpDef>}
 */ proto.tensorflow.OpList.prototype.getOpList = function() {
    return /** @type{!Array<!proto.tensorflow.OpDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.OpDef, 1);
};
/**
 * @param {!Array<!proto.tensorflow.OpDef>} value
 * @return {!proto.tensorflow.OpList} returns this
*/ proto.tensorflow.OpList.prototype.setOpList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.tensorflow.OpDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.OpDef}
 */ proto.tensorflow.OpList.prototype.addOp = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.OpDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.OpList} returns this
 */ proto.tensorflow.OpList.prototype.clearOpList = function() {
    return this.setOpList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.MetaGraphDef.repeatedFields_ = [
    6
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.MetaGraphDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.MetaGraphDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MetaGraphDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.MetaGraphDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            metaInfoDef: (f = msg.getMetaInfoDef()) && proto.tensorflow.MetaGraphDef.MetaInfoDef.toObject(includeInstance, f),
            graphDef: (f = msg.getGraphDef()) && proto.tensorflow.GraphDef.toObject(includeInstance, f),
            saverDef: (f = msg.getSaverDef()) && proto.tensorflow.SaverDef.toObject(includeInstance, f),
            collectionDefMap: (f = msg.getCollectionDefMap()) ? f.toObject(includeInstance, proto.tensorflow.CollectionDef.toObject) : [],
            signatureDefMap: (f = msg.getSignatureDefMap()) ? f.toObject(includeInstance, proto.tensorflow.SignatureDef.toObject) : [],
            assetFileDefList: jspb.Message.toObjectList(msg.getAssetFileDefList(), proto.tensorflow.AssetFileDef.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MetaGraphDef}
 */ proto.tensorflow.MetaGraphDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.MetaGraphDef;
    return proto.tensorflow.MetaGraphDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MetaGraphDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MetaGraphDef}
 */ proto.tensorflow.MetaGraphDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.MetaGraphDef.MetaInfoDef;
                reader.readMessage(value, proto.tensorflow.MetaGraphDef.MetaInfoDef.deserializeBinaryFromReader);
                msg.setMetaInfoDef(value);
                break;
            case 2:
                var value = new proto.tensorflow.GraphDef;
                reader.readMessage(value, proto.tensorflow.GraphDef.deserializeBinaryFromReader);
                msg.setGraphDef(value);
                break;
            case 3:
                var value = new proto.tensorflow.SaverDef;
                reader.readMessage(value, proto.tensorflow.SaverDef.deserializeBinaryFromReader);
                msg.setSaverDef(value);
                break;
            case 4:
                var value = msg.getCollectionDefMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.CollectionDef.deserializeBinaryFromReader, "", new proto.tensorflow.CollectionDef());
                });
                break;
            case 5:
                var value = msg.getSignatureDefMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.SignatureDef.deserializeBinaryFromReader, "", new proto.tensorflow.SignatureDef());
                });
                break;
            case 6:
                var value = new proto.tensorflow.AssetFileDef;
                reader.readMessage(value, proto.tensorflow.AssetFileDef.deserializeBinaryFromReader);
                msg.addAssetFileDef(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.MetaGraphDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.MetaGraphDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MetaGraphDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.MetaGraphDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getMetaInfoDef();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.MetaGraphDef.MetaInfoDef.serializeBinaryToWriter);
    f = message.getGraphDef();
    if (f != null) writer.writeMessage(2, f, proto.tensorflow.GraphDef.serializeBinaryToWriter);
    f = message.getSaverDef();
    if (f != null) writer.writeMessage(3, f, proto.tensorflow.SaverDef.serializeBinaryToWriter);
    f = message.getCollectionDefMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.CollectionDef.serializeBinaryToWriter);
    f = message.getSignatureDefMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.SignatureDef.serializeBinaryToWriter);
    f = message.getAssetFileDefList();
    if (f.length > 0) writer.writeRepeatedMessage(6, f, proto.tensorflow.AssetFileDef.serializeBinaryToWriter);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.repeatedFields_ = [
    4
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.MetaGraphDef.MetaInfoDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MetaGraphDef.MetaInfoDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            metaGraphVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
            strippedOpList: (f = msg.getStrippedOpList()) && proto.tensorflow.OpList.toObject(includeInstance, f),
            anyInfo: (f = msg.getAnyInfo()) && proto.tensorflow.Any.toObject(includeInstance, f),
            tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
            tensorflowVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
            tensorflowGitVersion: jspb.Message.getFieldWithDefault(msg, 6, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.MetaGraphDef.MetaInfoDef;
    return proto.tensorflow.MetaGraphDef.MetaInfoDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MetaGraphDef.MetaInfoDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setMetaGraphVersion(value);
                break;
            case 2:
                var value = new proto.tensorflow.OpList;
                reader.readMessage(value, proto.tensorflow.OpList.deserializeBinaryFromReader);
                msg.setStrippedOpList(value);
                break;
            case 3:
                var value = new proto.tensorflow.Any;
                reader.readMessage(value, proto.tensorflow.Any.deserializeBinaryFromReader);
                msg.setAnyInfo(value);
                break;
            case 4:
                var value = /** @type {string} */ reader.readString();
                msg.addTags(value);
                break;
            case 5:
                var value = /** @type {string} */ reader.readString();
                msg.setTensorflowVersion(value);
                break;
            case 6:
                var value = /** @type {string} */ reader.readString();
                msg.setTensorflowGitVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.MetaGraphDef.MetaInfoDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MetaGraphDef.MetaInfoDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getMetaGraphVersion();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getStrippedOpList();
    if (f != null) writer.writeMessage(2, f, proto.tensorflow.OpList.serializeBinaryToWriter);
    f = message.getAnyInfo();
    if (f != null) writer.writeMessage(3, f, proto.tensorflow.Any.serializeBinaryToWriter);
    f = message.getTagsList();
    if (f.length > 0) writer.writeRepeatedString(4, f);
    f = message.getTensorflowVersion();
    if (f.length > 0) writer.writeString(5, f);
    f = message.getTensorflowGitVersion();
    if (f.length > 0) writer.writeString(6, f);
};
/**
 * optional string meta_graph_version = 1;
 * @return {string}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getMetaGraphVersion = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setMetaGraphVersion = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional OpList stripped_op_list = 2;
 * @return {?proto.tensorflow.OpList}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getStrippedOpList = function() {
    return /** @type{?proto.tensorflow.OpList} */ jspb.Message.getWrapperField(this, proto.tensorflow.OpList, 2);
};
/**
 * @param {?proto.tensorflow.OpList|undefined} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
*/ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setStrippedOpList = function(value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.clearStrippedOpList = function() {
    return this.setStrippedOpList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.hasStrippedOpList = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional Any any_info = 3;
 * @return {?proto.tensorflow.Any}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getAnyInfo = function() {
    return /** @type{?proto.tensorflow.Any} */ jspb.Message.getWrapperField(this, proto.tensorflow.Any, 3);
};
/**
 * @param {?proto.tensorflow.Any|undefined} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
*/ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setAnyInfo = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.clearAnyInfo = function() {
    return this.setAnyInfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.hasAnyInfo = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getTagsList = function() {
    return /** @type {!Array<string>} */ jspb.Message.getRepeatedField(this, 4);
};
/**
 * @param {!Array<string>} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setTagsList = function(value) {
    return jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.addTags = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.clearTagsList = function() {
    return this.setTagsList([]);
};
/**
 * optional string tensorflow_version = 5;
 * @return {string}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getTensorflowVersion = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setTensorflowVersion = function(value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string tensorflow_git_version = 6;
 * @return {string}
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.getTensorflowGitVersion = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 6, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.MetaGraphDef.MetaInfoDef} returns this
 */ proto.tensorflow.MetaGraphDef.MetaInfoDef.prototype.setTensorflowGitVersion = function(value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional MetaInfoDef meta_info_def = 1;
 * @return {?proto.tensorflow.MetaGraphDef.MetaInfoDef}
 */ proto.tensorflow.MetaGraphDef.prototype.getMetaInfoDef = function() {
    return /** @type{?proto.tensorflow.MetaGraphDef.MetaInfoDef} */ jspb.Message.getWrapperField(this, proto.tensorflow.MetaGraphDef.MetaInfoDef, 1);
};
/**
 * @param {?proto.tensorflow.MetaGraphDef.MetaInfoDef|undefined} value
 * @return {!proto.tensorflow.MetaGraphDef} returns this
*/ proto.tensorflow.MetaGraphDef.prototype.setMetaInfoDef = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearMetaInfoDef = function() {
    return this.setMetaInfoDef(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.MetaGraphDef.prototype.hasMetaInfoDef = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional GraphDef graph_def = 2;
 * @return {?proto.tensorflow.GraphDef}
 */ proto.tensorflow.MetaGraphDef.prototype.getGraphDef = function() {
    return /** @type{?proto.tensorflow.GraphDef} */ jspb.Message.getWrapperField(this, proto.tensorflow.GraphDef, 2);
};
/**
 * @param {?proto.tensorflow.GraphDef|undefined} value
 * @return {!proto.tensorflow.MetaGraphDef} returns this
*/ proto.tensorflow.MetaGraphDef.prototype.setGraphDef = function(value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearGraphDef = function() {
    return this.setGraphDef(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.MetaGraphDef.prototype.hasGraphDef = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional SaverDef saver_def = 3;
 * @return {?proto.tensorflow.SaverDef}
 */ proto.tensorflow.MetaGraphDef.prototype.getSaverDef = function() {
    return /** @type{?proto.tensorflow.SaverDef} */ jspb.Message.getWrapperField(this, proto.tensorflow.SaverDef, 3);
};
/**
 * @param {?proto.tensorflow.SaverDef|undefined} value
 * @return {!proto.tensorflow.MetaGraphDef} returns this
*/ proto.tensorflow.MetaGraphDef.prototype.setSaverDef = function(value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearSaverDef = function() {
    return this.setSaverDef(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.MetaGraphDef.prototype.hasSaverDef = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * map<string, CollectionDef> collection_def = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.CollectionDef>}
 */ proto.tensorflow.MetaGraphDef.prototype.getCollectionDefMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.CollectionDef>} */ jspb.Message.getMapField(this, 4, opt_noLazyCreate, proto.tensorflow.CollectionDef);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearCollectionDefMap = function() {
    this.getCollectionDefMap().clear();
    return this;
};
/**
 * map<string, SignatureDef> signature_def = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.SignatureDef>}
 */ proto.tensorflow.MetaGraphDef.prototype.getSignatureDefMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.SignatureDef>} */ jspb.Message.getMapField(this, 5, opt_noLazyCreate, proto.tensorflow.SignatureDef);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearSignatureDefMap = function() {
    this.getSignatureDefMap().clear();
    return this;
};
/**
 * repeated AssetFileDef asset_file_def = 6;
 * @return {!Array<!proto.tensorflow.AssetFileDef>}
 */ proto.tensorflow.MetaGraphDef.prototype.getAssetFileDefList = function() {
    return /** @type{!Array<!proto.tensorflow.AssetFileDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.AssetFileDef, 6);
};
/**
 * @param {!Array<!proto.tensorflow.AssetFileDef>} value
 * @return {!proto.tensorflow.MetaGraphDef} returns this
*/ proto.tensorflow.MetaGraphDef.prototype.setAssetFileDefList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 6, value);
};
/**
 * @param {!proto.tensorflow.AssetFileDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AssetFileDef}
 */ proto.tensorflow.MetaGraphDef.prototype.addAssetFileDef = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.AssetFileDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.MetaGraphDef} returns this
 */ proto.tensorflow.MetaGraphDef.prototype.clearAssetFileDefList = function() {
    return this.setAssetFileDefList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.SavedModel.repeatedFields_ = [
    2
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SavedModel.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SavedModel.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SavedModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SavedModel.toObject = function(includeInstance, msg) {
        var f, obj = {
            savedModelSchemaVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
            metaGraphsList: jspb.Message.toObjectList(msg.getMetaGraphsList(), proto.tensorflow.MetaGraphDef.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SavedModel}
 */ proto.tensorflow.SavedModel.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SavedModel;
    return proto.tensorflow.SavedModel.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SavedModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SavedModel}
 */ proto.tensorflow.SavedModel.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt64();
                msg.setSavedModelSchemaVersion(value);
                break;
            case 2:
                var value = new proto.tensorflow.MetaGraphDef;
                reader.readMessage(value, proto.tensorflow.MetaGraphDef.deserializeBinaryFromReader);
                msg.addMetaGraphs(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SavedModel.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SavedModel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SavedModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SavedModel.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSavedModelSchemaVersion();
    if (f !== 0) writer.writeInt64(1, f);
    f = message.getMetaGraphsList();
    if (f.length > 0) writer.writeRepeatedMessage(2, f, proto.tensorflow.MetaGraphDef.serializeBinaryToWriter);
};
/**
 * optional int64 saved_model_schema_version = 1;
 * @return {number}
 */ proto.tensorflow.SavedModel.prototype.getSavedModelSchemaVersion = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.SavedModel} returns this
 */ proto.tensorflow.SavedModel.prototype.setSavedModelSchemaVersion = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * repeated MetaGraphDef meta_graphs = 2;
 * @return {!Array<!proto.tensorflow.MetaGraphDef>}
 */ proto.tensorflow.SavedModel.prototype.getMetaGraphsList = function() {
    return /** @type{!Array<!proto.tensorflow.MetaGraphDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.MetaGraphDef, 2);
};
/**
 * @param {!Array<!proto.tensorflow.MetaGraphDef>} value
 * @return {!proto.tensorflow.SavedModel} returns this
*/ proto.tensorflow.SavedModel.prototype.setMetaGraphsList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.tensorflow.MetaGraphDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.MetaGraphDef}
 */ proto.tensorflow.SavedModel.prototype.addMetaGraphs = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.MetaGraphDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.SavedModel} returns this
 */ proto.tensorflow.SavedModel.prototype.clearMetaGraphsList = function() {
    return this.setMetaGraphsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.FunctionDefLibrary.repeatedFields_ = [
    1,
    2
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.FunctionDefLibrary.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.FunctionDefLibrary.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.FunctionDefLibrary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.FunctionDefLibrary.toObject = function(includeInstance, msg) {
        var f, obj = {
            functionList: jspb.Message.toObjectList(msg.getFunctionList(), proto.tensorflow.FunctionDef.toObject, includeInstance),
            gradientList: jspb.Message.toObjectList(msg.getGradientList(), proto.tensorflow.GradientDef.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.FunctionDefLibrary}
 */ proto.tensorflow.FunctionDefLibrary.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.FunctionDefLibrary;
    return proto.tensorflow.FunctionDefLibrary.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.FunctionDefLibrary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.FunctionDefLibrary}
 */ proto.tensorflow.FunctionDefLibrary.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.FunctionDef;
                reader.readMessage(value, proto.tensorflow.FunctionDef.deserializeBinaryFromReader);
                msg.addFunction(value);
                break;
            case 2:
                var value = new proto.tensorflow.GradientDef;
                reader.readMessage(value, proto.tensorflow.GradientDef.deserializeBinaryFromReader);
                msg.addGradient(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.FunctionDefLibrary.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.FunctionDefLibrary.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.FunctionDefLibrary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.FunctionDefLibrary.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getFunctionList();
    if (f.length > 0) writer.writeRepeatedMessage(1, f, proto.tensorflow.FunctionDef.serializeBinaryToWriter);
    f = message.getGradientList();
    if (f.length > 0) writer.writeRepeatedMessage(2, f, proto.tensorflow.GradientDef.serializeBinaryToWriter);
};
/**
 * repeated FunctionDef function = 1;
 * @return {!Array<!proto.tensorflow.FunctionDef>}
 */ proto.tensorflow.FunctionDefLibrary.prototype.getFunctionList = function() {
    return /** @type{!Array<!proto.tensorflow.FunctionDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.FunctionDef, 1);
};
/**
 * @param {!Array<!proto.tensorflow.FunctionDef>} value
 * @return {!proto.tensorflow.FunctionDefLibrary} returns this
*/ proto.tensorflow.FunctionDefLibrary.prototype.setFunctionList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.tensorflow.FunctionDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.FunctionDef}
 */ proto.tensorflow.FunctionDefLibrary.prototype.addFunction = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.FunctionDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.FunctionDefLibrary} returns this
 */ proto.tensorflow.FunctionDefLibrary.prototype.clearFunctionList = function() {
    return this.setFunctionList([]);
};
/**
 * repeated GradientDef gradient = 2;
 * @return {!Array<!proto.tensorflow.GradientDef>}
 */ proto.tensorflow.FunctionDefLibrary.prototype.getGradientList = function() {
    return /** @type{!Array<!proto.tensorflow.GradientDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GradientDef, 2);
};
/**
 * @param {!Array<!proto.tensorflow.GradientDef>} value
 * @return {!proto.tensorflow.FunctionDefLibrary} returns this
*/ proto.tensorflow.FunctionDefLibrary.prototype.setGradientList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.tensorflow.GradientDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GradientDef}
 */ proto.tensorflow.FunctionDefLibrary.prototype.addGradient = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.GradientDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.FunctionDefLibrary} returns this
 */ proto.tensorflow.FunctionDefLibrary.prototype.clearGradientList = function() {
    return this.setGradientList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.FunctionDef.repeatedFields_ = [
    3
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.FunctionDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.FunctionDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.FunctionDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.FunctionDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            signature: (f = msg.getSignature()) && proto.tensorflow.OpDef.toObject(includeInstance, f),
            attrMap: (f = msg.getAttrMap()) ? f.toObject(includeInstance, proto.tensorflow.AttrValue.toObject) : [],
            nodeDefList: jspb.Message.toObjectList(msg.getNodeDefList(), proto.tensorflow.NodeDef.toObject, includeInstance),
            retMap: (f = msg.getRetMap()) ? f.toObject(includeInstance, undefined) : []
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.FunctionDef}
 */ proto.tensorflow.FunctionDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.FunctionDef;
    return proto.tensorflow.FunctionDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.FunctionDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.FunctionDef}
 */ proto.tensorflow.FunctionDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.OpDef;
                reader.readMessage(value, proto.tensorflow.OpDef.deserializeBinaryFromReader);
                msg.setSignature(value);
                break;
            case 5:
                var value = msg.getAttrMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tensorflow.AttrValue.deserializeBinaryFromReader, "", new proto.tensorflow.AttrValue());
                });
                break;
            case 3:
                var value = new proto.tensorflow.NodeDef;
                reader.readMessage(value, proto.tensorflow.NodeDef.deserializeBinaryFromReader);
                msg.addNodeDef(value);
                break;
            case 4:
                var value = msg.getRetMap();
                reader.readMessage(value, function(message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.FunctionDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.FunctionDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.FunctionDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.FunctionDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSignature();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.OpDef.serializeBinaryToWriter);
    f = message.getAttrMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tensorflow.AttrValue.serializeBinaryToWriter);
    f = message.getNodeDefList();
    if (f.length > 0) writer.writeRepeatedMessage(3, f, proto.tensorflow.NodeDef.serializeBinaryToWriter);
    f = message.getRetMap(true);
    if (f && f.getLength() > 0) f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
};
/**
 * optional OpDef signature = 1;
 * @return {?proto.tensorflow.OpDef}
 */ proto.tensorflow.FunctionDef.prototype.getSignature = function() {
    return /** @type{?proto.tensorflow.OpDef} */ jspb.Message.getWrapperField(this, proto.tensorflow.OpDef, 1);
};
/**
 * @param {?proto.tensorflow.OpDef|undefined} value
 * @return {!proto.tensorflow.FunctionDef} returns this
*/ proto.tensorflow.FunctionDef.prototype.setSignature = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.FunctionDef} returns this
 */ proto.tensorflow.FunctionDef.prototype.clearSignature = function() {
    return this.setSignature(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.FunctionDef.prototype.hasSignature = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * map<string, AttrValue> attr = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tensorflow.AttrValue>}
 */ proto.tensorflow.FunctionDef.prototype.getAttrMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.tensorflow.AttrValue>} */ jspb.Message.getMapField(this, 5, opt_noLazyCreate, proto.tensorflow.AttrValue);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.FunctionDef} returns this
 */ proto.tensorflow.FunctionDef.prototype.clearAttrMap = function() {
    this.getAttrMap().clear();
    return this;
};
/**
 * repeated NodeDef node_def = 3;
 * @return {!Array<!proto.tensorflow.NodeDef>}
 */ proto.tensorflow.FunctionDef.prototype.getNodeDefList = function() {
    return /** @type{!Array<!proto.tensorflow.NodeDef>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NodeDef, 3);
};
/**
 * @param {!Array<!proto.tensorflow.NodeDef>} value
 * @return {!proto.tensorflow.FunctionDef} returns this
*/ proto.tensorflow.FunctionDef.prototype.setNodeDefList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.tensorflow.NodeDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeDef}
 */ proto.tensorflow.FunctionDef.prototype.addNodeDef = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.NodeDef, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.FunctionDef} returns this
 */ proto.tensorflow.FunctionDef.prototype.clearNodeDefList = function() {
    return this.setNodeDefList([]);
};
/**
 * map<string, string> ret = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */ proto.tensorflow.FunctionDef.prototype.getRetMap = function(opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ jspb.Message.getMapField(this, 4, opt_noLazyCreate, null);
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tensorflow.FunctionDef} returns this
 */ proto.tensorflow.FunctionDef.prototype.clearRetMap = function() {
    this.getRetMap().clear();
    return this;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.GradientDef.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.GradientDef.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GradientDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.GradientDef.toObject = function(includeInstance, msg) {
        var f, obj = {
            functionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            gradientFunc: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GradientDef}
 */ proto.tensorflow.GradientDef.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.GradientDef;
    return proto.tensorflow.GradientDef.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GradientDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GradientDef}
 */ proto.tensorflow.GradientDef.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setFunctionName(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setGradientFunc(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.GradientDef.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.GradientDef.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GradientDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.GradientDef.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getFunctionName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getGradientFunc();
    if (f.length > 0) writer.writeString(2, f);
};
/**
 * optional string function_name = 1;
 * @return {string}
 */ proto.tensorflow.GradientDef.prototype.getFunctionName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.GradientDef} returns this
 */ proto.tensorflow.GradientDef.prototype.setFunctionName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string gradient_func = 2;
 * @return {string}
 */ proto.tensorflow.GradientDef.prototype.getGradientFunc = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.GradientDef} returns this
 */ proto.tensorflow.GradientDef.prototype.setGradientFunc = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SummaryDescription.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SummaryDescription.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SummaryDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryDescription.toObject = function(includeInstance, msg) {
        var f, obj = {
            typeHint: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SummaryDescription}
 */ proto.tensorflow.SummaryDescription.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SummaryDescription;
    return proto.tensorflow.SummaryDescription.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SummaryDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SummaryDescription}
 */ proto.tensorflow.SummaryDescription.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setTypeHint(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SummaryDescription.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SummaryDescription.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SummaryDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryDescription.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTypeHint();
    if (f.length > 0) writer.writeString(1, f);
};
/**
 * optional string type_hint = 1;
 * @return {string}
 */ proto.tensorflow.SummaryDescription.prototype.getTypeHint = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SummaryDescription} returns this
 */ proto.tensorflow.SummaryDescription.prototype.setTypeHint = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.HistogramProto.repeatedFields_ = [
    6,
    7
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.HistogramProto.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.HistogramProto.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HistogramProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.HistogramProto.toObject = function(includeInstance, msg) {
        var f, obj = {
            min: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
            max: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
            num: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
            sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
            sumSquares: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
            bucketLimitList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
            bucketList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HistogramProto}
 */ proto.tensorflow.HistogramProto.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.HistogramProto;
    return proto.tensorflow.HistogramProto.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HistogramProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HistogramProto}
 */ proto.tensorflow.HistogramProto.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readDouble();
                msg.setMin(value);
                break;
            case 2:
                var value = /** @type {number} */ reader.readDouble();
                msg.setMax(value);
                break;
            case 3:
                var value = /** @type {number} */ reader.readDouble();
                msg.setNum(value);
                break;
            case 4:
                var value = /** @type {number} */ reader.readDouble();
                msg.setSum(value);
                break;
            case 5:
                var value = /** @type {number} */ reader.readDouble();
                msg.setSumSquares(value);
                break;
            case 6:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedDouble() : [
                    reader.readDouble()
                ];
                for(var i = 0; i < values.length; i++)msg.addBucketLimit(values[i]);
                break;
            case 7:
                var values = /** @type {!Array<number>} */ reader.isDelimited() ? reader.readPackedDouble() : [
                    reader.readDouble()
                ];
                for(var i = 0; i < values.length; i++)msg.addBucket(values[i]);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.HistogramProto.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.HistogramProto.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HistogramProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.HistogramProto.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getMin();
    if (f !== 0.0) writer.writeDouble(1, f);
    f = message.getMax();
    if (f !== 0.0) writer.writeDouble(2, f);
    f = message.getNum();
    if (f !== 0.0) writer.writeDouble(3, f);
    f = message.getSum();
    if (f !== 0.0) writer.writeDouble(4, f);
    f = message.getSumSquares();
    if (f !== 0.0) writer.writeDouble(5, f);
    f = message.getBucketLimitList();
    if (f.length > 0) writer.writePackedDouble(6, f);
    f = message.getBucketList();
    if (f.length > 0) writer.writePackedDouble(7, f);
};
/**
 * optional double min = 1;
 * @return {number}
 */ proto.tensorflow.HistogramProto.prototype.getMin = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setMin = function(value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};
/**
 * optional double max = 2;
 * @return {number}
 */ proto.tensorflow.HistogramProto.prototype.getMax = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setMax = function(value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};
/**
 * optional double num = 3;
 * @return {number}
 */ proto.tensorflow.HistogramProto.prototype.getNum = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setNum = function(value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};
/**
 * optional double sum = 4;
 * @return {number}
 */ proto.tensorflow.HistogramProto.prototype.getSum = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setSum = function(value) {
    return jspb.Message.setProto3FloatField(this, 4, value);
};
/**
 * optional double sum_squares = 5;
 * @return {number}
 */ proto.tensorflow.HistogramProto.prototype.getSumSquares = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setSumSquares = function(value) {
    return jspb.Message.setProto3FloatField(this, 5, value);
};
/**
 * repeated double bucket_limit = 6;
 * @return {!Array<number>}
 */ proto.tensorflow.HistogramProto.prototype.getBucketLimitList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 6);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setBucketLimitList = function(value) {
    return jspb.Message.setField(this, 6, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.addBucketLimit = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.clearBucketLimitList = function() {
    return this.setBucketLimitList([]);
};
/**
 * repeated double bucket = 7;
 * @return {!Array<number>}
 */ proto.tensorflow.HistogramProto.prototype.getBucketList = function() {
    return /** @type {!Array<number>} */ jspb.Message.getRepeatedFloatingPointField(this, 7);
};
/**
 * @param {!Array<number>} value
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.setBucketList = function(value) {
    return jspb.Message.setField(this, 7, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.addBucket = function(value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.HistogramProto} returns this
 */ proto.tensorflow.HistogramProto.prototype.clearBucketList = function() {
    return this.setBucketList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SummaryMetadata.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SummaryMetadata.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SummaryMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryMetadata.toObject = function(includeInstance, msg) {
        var f, obj = {
            pluginData: (f = msg.getPluginData()) && proto.tensorflow.SummaryMetadata.PluginData.toObject(includeInstance, f),
            displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            summaryDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
            dataClass: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SummaryMetadata}
 */ proto.tensorflow.SummaryMetadata.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SummaryMetadata;
    return proto.tensorflow.SummaryMetadata.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SummaryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SummaryMetadata}
 */ proto.tensorflow.SummaryMetadata.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.SummaryMetadata.PluginData;
                reader.readMessage(value, proto.tensorflow.SummaryMetadata.PluginData.deserializeBinaryFromReader);
                msg.setPluginData(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setDisplayName(value);
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.setSummaryDescription(value);
                break;
            case 4:
                var value = /** @type {!proto.tensorflow.DataClass} */ reader.readEnum();
                msg.setDataClass(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SummaryMetadata.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SummaryMetadata.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SummaryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryMetadata.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPluginData();
    if (f != null) writer.writeMessage(1, f, proto.tensorflow.SummaryMetadata.PluginData.serializeBinaryToWriter);
    f = message.getDisplayName();
    if (f.length > 0) writer.writeString(2, f);
    f = message.getSummaryDescription();
    if (f.length > 0) writer.writeString(3, f);
    f = message.getDataClass();
    if (f !== 0.0) writer.writeEnum(4, f);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.SummaryMetadata.PluginData.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SummaryMetadata.PluginData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryMetadata.PluginData.toObject = function(includeInstance, msg) {
        var f, obj = {
            pluginName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            content: msg.getContent_asB64()
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SummaryMetadata.PluginData}
 */ proto.tensorflow.SummaryMetadata.PluginData.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.SummaryMetadata.PluginData;
    return proto.tensorflow.SummaryMetadata.PluginData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SummaryMetadata.PluginData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SummaryMetadata.PluginData}
 */ proto.tensorflow.SummaryMetadata.PluginData.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setPluginName(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setContent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.SummaryMetadata.PluginData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SummaryMetadata.PluginData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.SummaryMetadata.PluginData.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPluginName();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getContent_asU8();
    if (f.length > 0) writer.writeBytes(2, f);
};
/**
 * optional string plugin_name = 1;
 * @return {string}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.getPluginName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SummaryMetadata.PluginData} returns this
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.setPluginName = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.getContent = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.getContent_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getContent());
};
/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.getContent_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getContent());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.SummaryMetadata.PluginData} returns this
 */ proto.tensorflow.SummaryMetadata.PluginData.prototype.setContent = function(value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional PluginData plugin_data = 1;
 * @return {?proto.tensorflow.SummaryMetadata.PluginData}
 */ proto.tensorflow.SummaryMetadata.prototype.getPluginData = function() {
    return /** @type{?proto.tensorflow.SummaryMetadata.PluginData} */ jspb.Message.getWrapperField(this, proto.tensorflow.SummaryMetadata.PluginData, 1);
};
/**
 * @param {?proto.tensorflow.SummaryMetadata.PluginData|undefined} value
 * @return {!proto.tensorflow.SummaryMetadata} returns this
*/ proto.tensorflow.SummaryMetadata.prototype.setPluginData = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.SummaryMetadata} returns this
 */ proto.tensorflow.SummaryMetadata.prototype.clearPluginData = function() {
    return this.setPluginData(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.SummaryMetadata.prototype.hasPluginData = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string display_name = 2;
 * @return {string}
 */ proto.tensorflow.SummaryMetadata.prototype.getDisplayName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SummaryMetadata} returns this
 */ proto.tensorflow.SummaryMetadata.prototype.setDisplayName = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string summary_description = 3;
 * @return {string}
 */ proto.tensorflow.SummaryMetadata.prototype.getSummaryDescription = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.SummaryMetadata} returns this
 */ proto.tensorflow.SummaryMetadata.prototype.setSummaryDescription = function(value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional DataClass data_class = 4;
 * @return {!proto.tensorflow.DataClass}
 */ proto.tensorflow.SummaryMetadata.prototype.getDataClass = function() {
    return /** @type {!proto.tensorflow.DataClass} */ jspb.Message.getFieldWithDefault(this, 4, 0);
};
/**
 * @param {!proto.tensorflow.DataClass} value
 * @return {!proto.tensorflow.SummaryMetadata} returns this
 */ proto.tensorflow.SummaryMetadata.prototype.setDataClass = function(value) {
    return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.tensorflow.Summary.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Summary.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Summary.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.toObject = function(includeInstance, msg) {
        var f, obj = {
            valueList: jspb.Message.toObjectList(msg.getValueList(), proto.tensorflow.Summary.Value.toObject, includeInstance)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Summary}
 */ proto.tensorflow.Summary.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Summary;
    return proto.tensorflow.Summary.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Summary}
 */ proto.tensorflow.Summary.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.tensorflow.Summary.Value;
                reader.readMessage(value, proto.tensorflow.Summary.Value.deserializeBinaryFromReader);
                msg.addValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Summary.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getValueList();
    if (f.length > 0) writer.writeRepeatedMessage(1, f, proto.tensorflow.Summary.Value.serializeBinaryToWriter);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Summary.Image.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Summary.Image.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Summary.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Image.toObject = function(includeInstance, msg) {
        var f, obj = {
            height: jspb.Message.getFieldWithDefault(msg, 1, 0),
            width: jspb.Message.getFieldWithDefault(msg, 2, 0),
            colorspace: jspb.Message.getFieldWithDefault(msg, 3, 0),
            encodedImageString: msg.getEncodedImageString_asB64()
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Summary.Image}
 */ proto.tensorflow.Summary.Image.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Summary.Image;
    return proto.tensorflow.Summary.Image.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Summary.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Summary.Image}
 */ proto.tensorflow.Summary.Image.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt32();
                msg.setHeight(value);
                break;
            case 2:
                var value = /** @type {number} */ reader.readInt32();
                msg.setWidth(value);
                break;
            case 3:
                var value = /** @type {number} */ reader.readInt32();
                msg.setColorspace(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setEncodedImageString(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Image.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Summary.Image.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Summary.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Image.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getHeight();
    if (f !== 0) writer.writeInt32(1, f);
    f = message.getWidth();
    if (f !== 0) writer.writeInt32(2, f);
    f = message.getColorspace();
    if (f !== 0) writer.writeInt32(3, f);
    f = message.getEncodedImageString_asU8();
    if (f.length > 0) writer.writeBytes(4, f);
};
/**
 * optional int32 height = 1;
 * @return {number}
 */ proto.tensorflow.Summary.Image.prototype.getHeight = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Image} returns this
 */ proto.tensorflow.Summary.Image.prototype.setHeight = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int32 width = 2;
 * @return {number}
 */ proto.tensorflow.Summary.Image.prototype.getWidth = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Image} returns this
 */ proto.tensorflow.Summary.Image.prototype.setWidth = function(value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int32 colorspace = 3;
 * @return {number}
 */ proto.tensorflow.Summary.Image.prototype.getColorspace = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Image} returns this
 */ proto.tensorflow.Summary.Image.prototype.setColorspace = function(value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional bytes encoded_image_string = 4;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.Summary.Image.prototype.getEncodedImageString = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * optional bytes encoded_image_string = 4;
 * This is a type-conversion wrapper around `getEncodedImageString()`
 * @return {string}
 */ proto.tensorflow.Summary.Image.prototype.getEncodedImageString_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getEncodedImageString());
};
/**
 * optional bytes encoded_image_string = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedImageString()`
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Image.prototype.getEncodedImageString_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getEncodedImageString());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.Summary.Image} returns this
 */ proto.tensorflow.Summary.Image.prototype.setEncodedImageString = function(value) {
    return jspb.Message.setProto3BytesField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Summary.Audio.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Summary.Audio.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Summary.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Audio.toObject = function(includeInstance, msg) {
        var f, obj = {
            sampleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
            numChannels: jspb.Message.getFieldWithDefault(msg, 2, 0),
            lengthFrames: jspb.Message.getFieldWithDefault(msg, 3, 0),
            encodedAudioString: msg.getEncodedAudioString_asB64(),
            contentType: jspb.Message.getFieldWithDefault(msg, 5, "")
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Summary.Audio}
 */ proto.tensorflow.Summary.Audio.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Summary.Audio;
    return proto.tensorflow.Summary.Audio.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Summary.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Summary.Audio}
 */ proto.tensorflow.Summary.Audio.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readFloat();
                msg.setSampleRate(value);
                break;
            case 2:
                var value = /** @type {number} */ reader.readInt64();
                msg.setNumChannels(value);
                break;
            case 3:
                var value = /** @type {number} */ reader.readInt64();
                msg.setLengthFrames(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setEncodedAudioString(value);
                break;
            case 5:
                var value = /** @type {string} */ reader.readString();
                msg.setContentType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Audio.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Summary.Audio.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Summary.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Audio.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSampleRate();
    if (f !== 0.0) writer.writeFloat(1, f);
    f = message.getNumChannels();
    if (f !== 0) writer.writeInt64(2, f);
    f = message.getLengthFrames();
    if (f !== 0) writer.writeInt64(3, f);
    f = message.getEncodedAudioString_asU8();
    if (f.length > 0) writer.writeBytes(4, f);
    f = message.getContentType();
    if (f.length > 0) writer.writeString(5, f);
};
/**
 * optional float sample_rate = 1;
 * @return {number}
 */ proto.tensorflow.Summary.Audio.prototype.getSampleRate = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Audio} returns this
 */ proto.tensorflow.Summary.Audio.prototype.setSampleRate = function(value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};
/**
 * optional int64 num_channels = 2;
 * @return {number}
 */ proto.tensorflow.Summary.Audio.prototype.getNumChannels = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Audio} returns this
 */ proto.tensorflow.Summary.Audio.prototype.setNumChannels = function(value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 length_frames = 3;
 * @return {number}
 */ proto.tensorflow.Summary.Audio.prototype.getLengthFrames = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Audio} returns this
 */ proto.tensorflow.Summary.Audio.prototype.setLengthFrames = function(value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional bytes encoded_audio_string = 4;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.Summary.Audio.prototype.getEncodedAudioString = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * optional bytes encoded_audio_string = 4;
 * This is a type-conversion wrapper around `getEncodedAudioString()`
 * @return {string}
 */ proto.tensorflow.Summary.Audio.prototype.getEncodedAudioString_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getEncodedAudioString());
};
/**
 * optional bytes encoded_audio_string = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedAudioString()`
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Audio.prototype.getEncodedAudioString_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getEncodedAudioString());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.Summary.Audio} returns this
 */ proto.tensorflow.Summary.Audio.prototype.setEncodedAudioString = function(value) {
    return jspb.Message.setProto3BytesField(this, 4, value);
};
/**
 * optional string content_type = 5;
 * @return {string}
 */ proto.tensorflow.Summary.Audio.prototype.getContentType = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.Summary.Audio} returns this
 */ proto.tensorflow.Summary.Audio.prototype.setContentType = function(value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */ proto.tensorflow.Summary.Value.oneofGroups_ = [
    [
        2,
        3,
        4,
        5,
        6,
        8
    ]
];
/**
 * @enum {number}
 */ proto.tensorflow.Summary.Value.ValueCase = {
    VALUE_NOT_SET: 0,
    SIMPLE_VALUE: 2,
    OBSOLETE_OLD_STYLE_HISTOGRAM: 3,
    IMAGE: 4,
    HISTO: 5,
    AUDIO: 6,
    TENSOR: 8
};
/**
 * @return {proto.tensorflow.Summary.Value.ValueCase}
 */ proto.tensorflow.Summary.Value.prototype.getValueCase = function() {
    return /** @type {proto.tensorflow.Summary.Value.ValueCase} */ jspb.Message.computeOneofCase(this, proto.tensorflow.Summary.Value.oneofGroups_[0]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.Summary.Value.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.Summary.Value.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.Summary.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Value.toObject = function(includeInstance, msg) {
        var f, obj = {
            nodeName: jspb.Message.getFieldWithDefault(msg, 7, ""),
            tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
            metadata: (f = msg.getMetadata()) && proto.tensorflow.SummaryMetadata.toObject(includeInstance, f),
            simpleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
            obsoleteOldStyleHistogram: msg.getObsoleteOldStyleHistogram_asB64(),
            image: (f = msg.getImage()) && proto.tensorflow.Summary.Image.toObject(includeInstance, f),
            histo: (f = msg.getHisto()) && proto.tensorflow.HistogramProto.toObject(includeInstance, f),
            audio: (f = msg.getAudio()) && proto.tensorflow.Summary.Audio.toObject(includeInstance, f),
            tensor: (f = msg.getTensor()) && proto.tensorflow.Tensor.toObject(includeInstance, f)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.Summary.Value}
 */ proto.tensorflow.Summary.Value.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.Summary.Value;
    return proto.tensorflow.Summary.Value.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.Summary.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.Summary.Value}
 */ proto.tensorflow.Summary.Value.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 7:
                var value = /** @type {string} */ reader.readString();
                msg.setNodeName(value);
                break;
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setTag(value);
                break;
            case 9:
                var value = new proto.tensorflow.SummaryMetadata;
                reader.readMessage(value, proto.tensorflow.SummaryMetadata.deserializeBinaryFromReader);
                msg.setMetadata(value);
                break;
            case 2:
                var value = /** @type {number} */ reader.readFloat();
                msg.setSimpleValue(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ reader.readBytes();
                msg.setObsoleteOldStyleHistogram(value);
                break;
            case 4:
                var value = new proto.tensorflow.Summary.Image;
                reader.readMessage(value, proto.tensorflow.Summary.Image.deserializeBinaryFromReader);
                msg.setImage(value);
                break;
            case 5:
                var value = new proto.tensorflow.HistogramProto;
                reader.readMessage(value, proto.tensorflow.HistogramProto.deserializeBinaryFromReader);
                msg.setHisto(value);
                break;
            case 6:
                var value = new proto.tensorflow.Summary.Audio;
                reader.readMessage(value, proto.tensorflow.Summary.Audio.deserializeBinaryFromReader);
                msg.setAudio(value);
                break;
            case 8:
                var value = new proto.tensorflow.Tensor;
                reader.readMessage(value, proto.tensorflow.Tensor.deserializeBinaryFromReader);
                msg.setTensor(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Value.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.Summary.Value.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.Summary.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.Summary.Value.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getNodeName();
    if (f.length > 0) writer.writeString(7, f);
    f = message.getTag();
    if (f.length > 0) writer.writeString(1, f);
    f = message.getMetadata();
    if (f != null) writer.writeMessage(9, f, proto.tensorflow.SummaryMetadata.serializeBinaryToWriter);
    f = /** @type {number} */ jspb.Message.getField(message, 2);
    if (f != null) writer.writeFloat(2, f);
    f = /** @type {!(string|Uint8Array)} */ jspb.Message.getField(message, 3);
    if (f != null) writer.writeBytes(3, f);
    f = message.getImage();
    if (f != null) writer.writeMessage(4, f, proto.tensorflow.Summary.Image.serializeBinaryToWriter);
    f = message.getHisto();
    if (f != null) writer.writeMessage(5, f, proto.tensorflow.HistogramProto.serializeBinaryToWriter);
    f = message.getAudio();
    if (f != null) writer.writeMessage(6, f, proto.tensorflow.Summary.Audio.serializeBinaryToWriter);
    f = message.getTensor();
    if (f != null) writer.writeMessage(8, f, proto.tensorflow.Tensor.serializeBinaryToWriter);
};
/**
 * optional string node_name = 7;
 * @return {string}
 */ proto.tensorflow.Summary.Value.prototype.getNodeName = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 7, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.setNodeName = function(value) {
    return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string tag = 1;
 * @return {string}
 */ proto.tensorflow.Summary.Value.prototype.getTag = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.setTag = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional SummaryMetadata metadata = 9;
 * @return {?proto.tensorflow.SummaryMetadata}
 */ proto.tensorflow.Summary.Value.prototype.getMetadata = function() {
    return /** @type{?proto.tensorflow.SummaryMetadata} */ jspb.Message.getWrapperField(this, proto.tensorflow.SummaryMetadata, 9);
};
/**
 * @param {?proto.tensorflow.SummaryMetadata|undefined} value
 * @return {!proto.tensorflow.Summary.Value} returns this
*/ proto.tensorflow.Summary.Value.prototype.setMetadata = function(value) {
    return jspb.Message.setWrapperField(this, 9, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearMetadata = function() {
    return this.setMetadata(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasMetadata = function() {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional float simple_value = 2;
 * @return {number}
 */ proto.tensorflow.Summary.Value.prototype.getSimpleValue = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.setSimpleValue = function(value) {
    return jspb.Message.setOneofField(this, 2, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearSimpleValue = function() {
    return jspb.Message.setOneofField(this, 2, proto.tensorflow.Summary.Value.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasSimpleValue = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional bytes obsolete_old_style_histogram = 3;
 * @return {!(string|Uint8Array)}
 */ proto.tensorflow.Summary.Value.prototype.getObsoleteOldStyleHistogram = function() {
    return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * optional bytes obsolete_old_style_histogram = 3;
 * This is a type-conversion wrapper around `getObsoleteOldStyleHistogram()`
 * @return {string}
 */ proto.tensorflow.Summary.Value.prototype.getObsoleteOldStyleHistogram_asB64 = function() {
    return /** @type {string} */ jspb.Message.bytesAsB64(this.getObsoleteOldStyleHistogram());
};
/**
 * optional bytes obsolete_old_style_histogram = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObsoleteOldStyleHistogram()`
 * @return {!Uint8Array}
 */ proto.tensorflow.Summary.Value.prototype.getObsoleteOldStyleHistogram_asU8 = function() {
    return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getObsoleteOldStyleHistogram());
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.setObsoleteOldStyleHistogram = function(value) {
    return jspb.Message.setOneofField(this, 3, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearObsoleteOldStyleHistogram = function() {
    return jspb.Message.setOneofField(this, 3, proto.tensorflow.Summary.Value.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasObsoleteOldStyleHistogram = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Image image = 4;
 * @return {?proto.tensorflow.Summary.Image}
 */ proto.tensorflow.Summary.Value.prototype.getImage = function() {
    return /** @type{?proto.tensorflow.Summary.Image} */ jspb.Message.getWrapperField(this, proto.tensorflow.Summary.Image, 4);
};
/**
 * @param {?proto.tensorflow.Summary.Image|undefined} value
 * @return {!proto.tensorflow.Summary.Value} returns this
*/ proto.tensorflow.Summary.Value.prototype.setImage = function(value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearImage = function() {
    return this.setImage(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasImage = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional HistogramProto histo = 5;
 * @return {?proto.tensorflow.HistogramProto}
 */ proto.tensorflow.Summary.Value.prototype.getHisto = function() {
    return /** @type{?proto.tensorflow.HistogramProto} */ jspb.Message.getWrapperField(this, proto.tensorflow.HistogramProto, 5);
};
/**
 * @param {?proto.tensorflow.HistogramProto|undefined} value
 * @return {!proto.tensorflow.Summary.Value} returns this
*/ proto.tensorflow.Summary.Value.prototype.setHisto = function(value) {
    return jspb.Message.setOneofWrapperField(this, 5, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearHisto = function() {
    return this.setHisto(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasHisto = function() {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional Audio audio = 6;
 * @return {?proto.tensorflow.Summary.Audio}
 */ proto.tensorflow.Summary.Value.prototype.getAudio = function() {
    return /** @type{?proto.tensorflow.Summary.Audio} */ jspb.Message.getWrapperField(this, proto.tensorflow.Summary.Audio, 6);
};
/**
 * @param {?proto.tensorflow.Summary.Audio|undefined} value
 * @return {!proto.tensorflow.Summary.Value} returns this
*/ proto.tensorflow.Summary.Value.prototype.setAudio = function(value) {
    return jspb.Message.setOneofWrapperField(this, 6, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearAudio = function() {
    return this.setAudio(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasAudio = function() {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional Tensor tensor = 8;
 * @return {?proto.tensorflow.Tensor}
 */ proto.tensorflow.Summary.Value.prototype.getTensor = function() {
    return /** @type{?proto.tensorflow.Tensor} */ jspb.Message.getWrapperField(this, proto.tensorflow.Tensor, 8);
};
/**
 * @param {?proto.tensorflow.Tensor|undefined} value
 * @return {!proto.tensorflow.Summary.Value} returns this
*/ proto.tensorflow.Summary.Value.prototype.setTensor = function(value) {
    return jspb.Message.setOneofWrapperField(this, 8, proto.tensorflow.Summary.Value.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.tensorflow.Summary.Value} returns this
 */ proto.tensorflow.Summary.Value.prototype.clearTensor = function() {
    return this.setTensor(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.tensorflow.Summary.Value.prototype.hasTensor = function() {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * repeated Value value = 1;
 * @return {!Array<!proto.tensorflow.Summary.Value>}
 */ proto.tensorflow.Summary.prototype.getValueList = function() {
    return /** @type{!Array<!proto.tensorflow.Summary.Value>} */ jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.Summary.Value, 1);
};
/**
 * @param {!Array<!proto.tensorflow.Summary.Value>} value
 * @return {!proto.tensorflow.Summary} returns this
*/ proto.tensorflow.Summary.prototype.setValueList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.tensorflow.Summary.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.Summary.Value}
 */ proto.tensorflow.Summary.prototype.addValue = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.Summary.Value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tensorflow.Summary} returns this
 */ proto.tensorflow.Summary.prototype.clearValueList = function() {
    return this.setValueList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.tensorflow.HistogramPluginData.prototype.toObject = function(opt_includeInstance) {
        return proto.tensorflow.HistogramPluginData.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.HistogramPluginData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.HistogramPluginData.toObject = function(includeInstance, msg) {
        var f, obj = {
            version: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) obj.$jspbMessageInstance = msg;
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.HistogramPluginData}
 */ proto.tensorflow.HistogramPluginData.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tensorflow.HistogramPluginData;
    return proto.tensorflow.HistogramPluginData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.HistogramPluginData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.HistogramPluginData}
 */ proto.tensorflow.HistogramPluginData.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) break;
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {number} */ reader.readInt32();
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.tensorflow.HistogramPluginData.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.tensorflow.HistogramPluginData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.HistogramPluginData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.tensorflow.HistogramPluginData.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getVersion();
    if (f !== 0) writer.writeInt32(1, f);
};
/**
 * optional int32 version = 1;
 * @return {number}
 */ proto.tensorflow.HistogramPluginData.prototype.getVersion = function() {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};
/**
 * @param {number} value
 * @return {!proto.tensorflow.HistogramPluginData} returns this
 */ proto.tensorflow.HistogramPluginData.prototype.setVersion = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * @enum {number}
 */ proto.tensorflow.DataType = {
    DT_INVALID: 0,
    DT_FLOAT: 1,
    DT_DOUBLE: 2,
    DT_INT32: 3,
    DT_UINT8: 4,
    DT_INT16: 5,
    DT_INT8: 6,
    DT_STRING: 7,
    DT_COMPLEX64: 8,
    DT_INT64: 9,
    DT_BOOL: 10,
    DT_QINT8: 11,
    DT_QUINT8: 12,
    DT_QINT32: 13,
    DT_BFLOAT16: 14,
    DT_FLOAT_REF: 101,
    DT_DOUBLE_REF: 102,
    DT_INT32_REF: 103,
    DT_UINT8_REF: 104,
    DT_INT16_REF: 105,
    DT_INT8_REF: 106,
    DT_STRING_REF: 107,
    DT_COMPLEX64_REF: 108,
    DT_INT64_REF: 109,
    DT_BOOL_REF: 110,
    DT_QINT8_REF: 111,
    DT_QUINT8_REF: 112,
    DT_QINT32_REF: 113,
    DT_BFLOAT16_REF: 114
};
/**
 * @enum {number}
 */ proto.tensorflow.DataClass = {
    DATA_CLASS_UNKNOWN: 0,
    DATA_CLASS_SCALAR: 1,
    DATA_CLASS_TENSOR: 2,
    DATA_CLASS_BLOB_SEQUENCE: 3
};
goog.object.extend(exports, proto.tensorflow);

},{"35699f9d84fe1f13":"bEegV"}],"bEegV":[function(require,module,exports) {
/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/ var global = arguments[3];
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function(a, b, c) {
    a instanceof String && (a = String(a));
    for(var d = a.length, e = 0; e < d; e++){
        var f = a[e];
        if (b.call(c, f, e, a)) return {
            i: e,
            v: f
        };
    }
    return {
        i: -1,
        v: void 0
    };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
    a != Array.prototype && a != Object.prototype && (a[b] = c.value);
};
$jscomp.getGlobal = function(a) {
    return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(a, b, c, d) {
    if (b) {
        c = $jscomp.global;
        a = a.split(".");
        for(d = 0; d < a.length - 1; d++){
            var e = a[d];
            e in c || (c[e] = {});
            c = c[e];
        }
        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d && null != b && $jscomp.defineProperty(c, a, {
            configurable: !0,
            writable: !0,
            value: b
        });
    }
};
$jscomp.polyfill("Array.prototype.findIndex", function(a) {
    return a ? a : function(a, c) {
        return $jscomp.findInternal(this, a, c).i;
    };
}, "es6", "es3");
$jscomp.checkStringArgs = function(a, b, c) {
    if (null == a) throw new TypeError("The 'this' value for String.prototype." + c + " must not be null or undefined");
    if (b instanceof RegExp) throw new TypeError("First argument to String.prototype." + c + " must not be a regular expression");
    return a + "";
};
$jscomp.polyfill("String.prototype.endsWith", function(a) {
    return a ? a : function(a, c) {
        var b = $jscomp.checkStringArgs(this, a, "endsWith");
        a += "";
        void 0 === c && (c = b.length);
        c = Math.max(0, Math.min(c | 0, b.length));
        for(var e = a.length; 0 < e && 0 < c;)if (b[--c] != a[--e]) return !1;
        return 0 >= e;
    };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.find", function(a) {
    return a ? a : function(a, c) {
        return $jscomp.findInternal(this, a, c).v;
    };
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function(a) {
    return a ? a : function(a, c) {
        var b = $jscomp.checkStringArgs(this, a, "startsWith");
        a += "";
        var e = b.length, f = a.length;
        c = Math.max(0, Math.min(c | 0, b.length));
        for(var g = 0; g < f && c < e;)if (b[c++] != a[g++]) return !1;
        return g >= f;
    };
}, "es6", "es3");
$jscomp.polyfill("String.prototype.repeat", function(a) {
    return a ? a : function(a) {
        var b = $jscomp.checkStringArgs(this, null, "repeat");
        if (0 > a || 1342177279 < a) throw new RangeError("Invalid count value");
        a |= 0;
        for(var d = ""; a;)if (a & 1 && (d += b), a >>>= 1) b += b;
        return d;
    };
}, "es6", "es3");
var COMPILED = !0, goog = goog || {};
goog.global = this || self;
goog.exportPath_ = function(a, b, c) {
    a = a.split(".");
    c = c || goog.global;
    a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
    for(var d; a.length && (d = a.shift());)a.length || void 0 === b ? c = c[d] && c[d] !== Object.prototype[d] ? c[d] : c[d] = {} : c[d] = b;
};
goog.define = function(a, b) {
    if (!COMPILED) {
        var c = goog.global.CLOSURE_UNCOMPILED_DEFINES, d = goog.global.CLOSURE_DEFINES;
        c && void 0 === c.nodeType && Object.prototype.hasOwnProperty.call(c, a) ? b = c[a] : d && void 0 === d.nodeType && Object.prototype.hasOwnProperty.call(d, a) && (b = d[a]);
    }
    return b;
};
goog.FEATURESET_YEAR = 2012;
goog.DEBUG = !0;
goog.LOCALE = "en";
goog.TRUSTED_SITE = !0;
goog.STRICT_MODE_COMPATIBLE = !1;
goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1;
goog.provide = function(a) {
    if (goog.isInModuleLoader_()) throw Error("goog.provide cannot be used within a module.");
    if (!COMPILED && goog.isProvided_(a)) throw Error('Namespace "' + a + '" already declared.');
    goog.constructNamespace_(a);
};
goog.constructNamespace_ = function(a, b) {
    if (!COMPILED) {
        delete goog.implicitNamespaces_[a];
        for(var c = a; (c = c.substring(0, c.lastIndexOf("."))) && !goog.getObjectByName(c);)goog.implicitNamespaces_[c] = !0;
    }
    goog.exportPath_(a, b);
};
goog.getScriptNonce = function(a) {
    if (a && a != goog.global) return goog.getScriptNonce_(a.document);
    null === goog.cspNonce_ && (goog.cspNonce_ = goog.getScriptNonce_(goog.global.document));
    return goog.cspNonce_;
};
goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
goog.cspNonce_ = null;
goog.getScriptNonce_ = function(a) {
    return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(a) ? a : "";
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(a) {
    if ("string" !== typeof a || !a || -1 == a.search(goog.VALID_MODULE_RE_)) throw Error("Invalid module identifier");
    if (!goog.isInGoogModuleLoader_()) throw Error("Module " + a + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
    if (goog.moduleLoaderState_.moduleName) throw Error("goog.module may only be called once per module.");
    goog.moduleLoaderState_.moduleName = a;
    if (!COMPILED) {
        if (goog.isProvided_(a)) throw Error('Namespace "' + a + '" already declared.');
        delete goog.implicitNamespaces_[a];
    }
};
goog.module.get = function(a) {
    return goog.module.getInternal_(a);
};
goog.module.getInternal_ = function(a) {
    if (!COMPILED) {
        if (a in goog.loadedModules_) return goog.loadedModules_[a].exports;
        if (!goog.implicitNamespaces_[a]) return a = goog.getObjectByName(a), null != a ? a : null;
    }
    return null;
};
goog.ModuleType = {
    ES6: "es6",
    GOOG: "goog"
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
    return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
};
goog.isInGoogModuleLoader_ = function() {
    return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
};
goog.isInEs6ModuleLoader_ = function() {
    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6) return !0;
    var a = goog.global.$jscomp;
    return a ? "function" != typeof a.getCurrentModulePath ? !1 : !!a.getCurrentModulePath() : !1;
};
goog.module.declareLegacyNamespace = function() {
    if (!COMPILED && !goog.isInGoogModuleLoader_()) throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
    if (!COMPILED && !goog.moduleLoaderState_.moduleName) throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
    goog.moduleLoaderState_.declareLegacyNamespace = !0;
};
goog.declareModuleId = function(a) {
    if (!COMPILED) {
        if (!goog.isInEs6ModuleLoader_()) throw Error("goog.declareModuleId may only be called from within an ES6 module");
        if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName) throw Error("goog.declareModuleId may only be called once per module.");
        if (a in goog.loadedModules_) throw Error('Module with namespace "' + a + '" already exists.');
    }
    if (goog.moduleLoaderState_) goog.moduleLoaderState_.moduleName = a;
    else {
        var b = goog.global.$jscomp;
        if (!b || "function" != typeof b.getCurrentModulePath) throw Error('Module with namespace "' + a + '" has been loaded incorrectly.');
        b = b.require(b.getCurrentModulePath());
        goog.loadedModules_[a] = {
            exports: b,
            type: goog.ModuleType.ES6,
            moduleId: a
        };
    }
};
goog.setTestOnly = function(a) {
    if (goog.DISALLOW_TEST_ONLY_CODE) throw a = a || "", Error("Importing test-only code into non-debug environment" + (a ? ": " + a : "."));
};
goog.forwardDeclare = function(a) {};
COMPILED || (goog.isProvided_ = function(a) {
    return a in goog.loadedModules_ || !goog.implicitNamespaces_[a] && null != goog.getObjectByName(a);
}, goog.implicitNamespaces_ = {
    "goog.module": !0
});
goog.getObjectByName = function(a, b) {
    a = a.split(".");
    b = b || goog.global;
    for(var c = 0; c < a.length; c++)if (b = b[a[c]], null == b) return null;
    return b;
};
goog.globalize = function(a, b) {
    b = b || goog.global;
    for(var c in a)b[c] = a[c];
};
goog.addDependency = function(a, b, c, d) {
    !COMPILED && goog.DEPENDENCIES_ENABLED && goog.debugLoader_.addDependency(a, b, c, d);
};
goog.ENABLE_DEBUG_LOADER = !0;
goog.logToConsole_ = function(a) {
    goog.global.console && goog.global.console.error(a);
};
goog.require = function(a) {
    if (!COMPILED) {
        goog.ENABLE_DEBUG_LOADER && goog.debugLoader_.requested(a);
        if (goog.isProvided_(a)) {
            if (goog.isInModuleLoader_()) return goog.module.getInternal_(a);
        } else if (goog.ENABLE_DEBUG_LOADER) {
            var b = goog.moduleLoaderState_;
            goog.moduleLoaderState_ = null;
            try {
                goog.debugLoader_.load_(a);
            } finally{
                goog.moduleLoaderState_ = b;
            }
        }
        return null;
    }
};
goog.requireType = function(a) {
    return {};
};
goog.basePath = "";
goog.nullFunction = function() {};
goog.abstractMethod = function() {
    throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(a) {
    a.instance_ = void 0;
    a.getInstance = function() {
        if (a.instance_) return a.instance_;
        goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
        return a.instance_ = new a;
    };
};
goog.instantiatedSingletons_ = [];
goog.LOAD_MODULE_USING_EVAL = !0;
goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.TRANSPILE = "detect";
goog.ASSUME_ES_MODULES_TRANSPILED = !1;
goog.TRANSPILE_TO_LANGUAGE = "";
goog.TRANSPILER = "transpile.js";
goog.hasBadLetScoping = null;
goog.useSafari10Workaround = function() {
    if (null == goog.hasBadLetScoping) {
        try {
            var a = !eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";');
        } catch (b) {
            a = !1;
        }
        goog.hasBadLetScoping = a;
    }
    return goog.hasBadLetScoping;
};
goog.workaroundSafari10EvalBug = function(a) {
    return "(function(){" + a + "\n;})();\n";
};
goog.loadModule = function(a) {
    var b = goog.moduleLoaderState_;
    try {
        goog.moduleLoaderState_ = {
            moduleName: "",
            declareLegacyNamespace: !1,
            type: goog.ModuleType.GOOG
        };
        if (goog.isFunction(a)) var c = a.call(void 0, {});
        else if ("string" === typeof a) goog.useSafari10Workaround() && (a = goog.workaroundSafari10EvalBug(a)), c = goog.loadModuleFromSource_.call(void 0, a);
        else throw Error("Invalid module definition");
        var d = goog.moduleLoaderState_.moduleName;
        if ("string" === typeof d && d) goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d, c) : goog.SEAL_MODULE_EXPORTS && Object.seal && "object" == typeof c && null != c && Object.seal(c), goog.loadedModules_[d] = {
            exports: c,
            type: goog.ModuleType.GOOG,
            moduleId: goog.moduleLoaderState_.moduleName
        };
        else throw Error('Invalid module name "' + d + '"');
    } finally{
        goog.moduleLoaderState_ = b;
    }
};
goog.loadModuleFromSource_ = function(a) {
    eval(a);
    return {};
};
goog.normalizePath_ = function(a) {
    a = a.split("/");
    for(var b = 0; b < a.length;)"." == a[b] ? a.splice(b, 1) : b && ".." == a[b] && a[b - 1] && ".." != a[b - 1] ? a.splice(--b, 2) : b++;
    return a.join("/");
};
goog.loadFileSync_ = function(a) {
    if (goog.global.CLOSURE_LOAD_FILE_SYNC) return goog.global.CLOSURE_LOAD_FILE_SYNC(a);
    try {
        var b = new goog.global.XMLHttpRequest;
        b.open("get", a, !1);
        b.send();
        return 0 == b.status || 200 == b.status ? b.responseText : null;
    } catch (c) {
        return null;
    }
};
goog.transpile_ = function(a, b, c) {
    var d = goog.global.$jscomp;
    d || (goog.global.$jscomp = d = {});
    var e = d.transpile;
    if (!e) {
        var f = goog.basePath + goog.TRANSPILER, g = goog.loadFileSync_(f);
        if (g) {
            (function() {
                (0, eval)(g + "\n//# sourceURL=" + f);
            }).call(goog.global);
            if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile) throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
            goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
            d = goog.global.$jscomp;
            e = d.transpile;
        }
    }
    e || (e = d.transpile = function(a, b) {
        goog.logToConsole_(b + " requires transpilation but no transpiler was found.");
        return a;
    });
    return e(a, b, c);
};
goog.typeOf = function(a) {
    var b = typeof a;
    if ("object" == b) {
        if (a) {
            if (a instanceof Array) return "array";
            if (a instanceof Object) return b;
            var c = Object.prototype.toString.call(a);
            if ("[object Window]" == c) return "object";
            if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
            if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
    } else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b;
};
goog.isArray = function(a) {
    return "array" == goog.typeOf(a);
};
goog.isArrayLike = function(a) {
    var b = goog.typeOf(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
};
goog.isDateLike = function(a) {
    return goog.isObject(a) && "function" == typeof a.getFullYear;
};
goog.isFunction = function(a) {
    return "function" == goog.typeOf(a);
};
goog.isObject = function(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
};
goog.getUid = function(a) {
    return Object.prototype.hasOwnProperty.call(a, goog.UID_PROPERTY_) && a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(a) {
    return !!a[goog.UID_PROPERTY_];
};
goog.removeUid = function(a) {
    null !== a && "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);
    try {
        delete a[goog.UID_PROPERTY_];
    } catch (b) {}
};
goog.UID_PROPERTY_ = "closure_uid_" + (1E9 * Math.random() >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(a) {
    var b = goog.typeOf(a);
    if ("object" == b || "array" == b) {
        if ("function" === typeof a.clone) return a.clone();
        b = "array" == b ? [] : {};
        for(var c in a)b[c] = goog.cloneObject(a[c]);
        return b;
    }
    return a;
};
goog.bindNative_ = function(a, b, c) {
    return a.call.apply(a.bind, arguments);
};
goog.bindJs_ = function(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
            var c = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(c, d);
            return a.apply(b, c);
        };
    }
    return function() {
        return a.apply(b, arguments);
    };
};
goog.bind = function(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
    return goog.bind.apply(null, arguments);
};
goog.partial = function(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var b = c.slice();
        b.push.apply(b, arguments);
        return a.apply(this, b);
    };
};
goog.mixin = function(a, b) {
    for(var c in b)a[c] = b[c];
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
    return +new Date;
};
goog.globalEval = function(a) {
    if (goog.global.execScript) goog.global.execScript(a, "JavaScript");
    else if (goog.global.eval) {
        if (null == goog.evalWorksForGlobals_) {
            try {
                goog.global.eval("var _evalTest_ = 1;");
            } catch (d) {}
            if ("undefined" != typeof goog.global._evalTest_) {
                try {
                    delete goog.global._evalTest_;
                } catch (d) {}
                goog.evalWorksForGlobals_ = !0;
            } else goog.evalWorksForGlobals_ = !1;
        }
        if (goog.evalWorksForGlobals_) goog.global.eval(a);
        else {
            var b = goog.global.document, c = b.createElement("script");
            c.type = "text/javascript";
            c.defer = !1;
            c.appendChild(b.createTextNode(a));
            b.head.appendChild(c);
            b.head.removeChild(c);
        }
    } else throw Error("goog.globalEval not available");
};
goog.evalWorksForGlobals_ = null;
goog.getCssName = function(a, b) {
    if ("." == String(a).charAt(0)) throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + a);
    var c = function(a) {
        return goog.cssNameMapping_[a] || a;
    }, d = function(a) {
        a = a.split("-");
        for(var b = [], d = 0; d < a.length; d++)b.push(c(a[d]));
        return b.join("-");
    };
    d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {
        return a;
    };
    a = b ? a + "-" + d(b) : d(a);
    return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(a) : a;
};
goog.setCssNameMapping = function(a, b) {
    goog.cssNameMapping_ = a;
    goog.cssNameMappingStyle_ = b;
};
!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
goog.getMsg = function(a, b, c) {
    c && c.html && (a = a.replace(/</g, "&lt;"));
    b && (a = a.replace(/\{\$([^}]+)}/g, function(a, c) {
        return null != b && c in b ? b[c] : a;
    }));
    return a;
};
goog.getMsgWithFallback = function(a, b) {
    return a;
};
goog.exportSymbol = function(a, b, c) {
    goog.exportPath_(a, b, c);
};
goog.exportProperty = function(a, b, c) {
    a[b] = c;
};
goog.inherits = function(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.superClass_ = b.prototype;
    a.prototype = new c;
    a.prototype.constructor = a;
    a.base = function(a, c, f) {
        for(var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++)d[e - 2] = arguments[e];
        return b.prototype[c].apply(a, d);
    };
};
goog.scope = function(a) {
    if (goog.isInModuleLoader_()) throw Error("goog.scope is not supported within a module.");
    a.call(goog.global);
};
COMPILED || (goog.global.COMPILED = COMPILED);
goog.defineClass = function(a, b) {
    var c = b.constructor, d = b.statics;
    c && c != Object.prototype.constructor || (c = function() {
        throw Error("cannot instantiate an interface (no constructor defined).");
    });
    c = goog.defineClass.createSealingConstructor_(c, a);
    a && goog.inherits(c, a);
    delete b.constructor;
    delete b.statics;
    goog.defineClass.applyProperties_(c.prototype, b);
    null != d && (d instanceof Function ? d(c) : goog.defineClass.applyProperties_(c, d));
    return c;
};
goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
goog.defineClass.createSealingConstructor_ = function(a, b) {
    if (!goog.defineClass.SEAL_CLASS_INSTANCES) return a;
    var c = !goog.defineClass.isUnsealable_(b), d = function() {
        var b = a.apply(this, arguments) || this;
        b[goog.UID_PROPERTY_] = b[goog.UID_PROPERTY_];
        this.constructor === d && c && Object.seal instanceof Function && Object.seal(b);
        return b;
    };
    return d;
};
goog.defineClass.isUnsealable_ = function(a) {
    return a && a.prototype && a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.defineClass.applyProperties_ = function(a, b) {
    for(var c in b)Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
    for(var d = 0; d < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d++)c = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d], Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
};
goog.tagUnsealableClass = function(a) {
    !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = !0);
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
!COMPILED && goog.DEPENDENCIES_ENABLED && (goog.inHtmlDocument_ = function() {
    var a = goog.global.document;
    return null != a && "write" in a;
}, goog.isDocumentLoading_ = function() {
    var a = goog.global.document;
    return a.attachEvent ? "complete" != a.readyState : "loading" == a.readyState;
}, goog.findBasePath_ = function() {
    if (void 0 != goog.global.CLOSURE_BASE_PATH && "string" === typeof goog.global.CLOSURE_BASE_PATH) goog.basePath = goog.global.CLOSURE_BASE_PATH;
    else if (goog.inHtmlDocument_()) {
        var a = goog.global.document, b = a.currentScript;
        a = b ? [
            b
        ] : a.getElementsByTagName("SCRIPT");
        for(b = a.length - 1; 0 <= b; --b){
            var c = a[b].src, d = c.lastIndexOf("?");
            d = -1 == d ? c.length : d;
            if ("base.js" == c.substr(d - 7, 7)) {
                goog.basePath = c.substr(0, d - 7);
                break;
            }
        }
    }
}, goog.findBasePath_(), goog.Transpiler = function() {
    this.requiresTranspilation_ = null;
    this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;
}, goog.Transpiler.prototype.createRequiresTranspilation_ = function() {
    function a(a, b) {
        e ? d[a] = !0 : b() ? (c = a, d[a] = !1) : e = d[a] = !0;
    }
    function b(a) {
        try {
            return !!eval(a);
        } catch (h) {
            return !1;
        }
    }
    var c = "es3", d = {
        es3: !1
    }, e = !1, f = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : "";
    a("es5", function() {
        return b("[1,].length==1");
    });
    a("es6", function() {
        return f.match(/Edge\/(\d+)(\.\d)*/i) ? !1 : b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()');
    });
    a("es7", function() {
        return b("2 ** 2 == 4");
    });
    a("es8", function() {
        return b("async () => 1, true");
    });
    a("es9", function() {
        return b("({...rest} = {}), true");
    });
    a("es_next", function() {
        return !1;
    });
    return {
        target: c,
        map: d
    };
}, goog.Transpiler.prototype.needsTranspile = function(a, b) {
    if ("always" == goog.TRANSPILE) return !0;
    if ("never" == goog.TRANSPILE) return !1;
    if (!this.requiresTranspilation_) {
        var c = this.createRequiresTranspilation_();
        this.requiresTranspilation_ = c.map;
        this.transpilationTarget_ = this.transpilationTarget_ || c.target;
    }
    if (a in this.requiresTranspilation_) return this.requiresTranspilation_[a] ? !0 : !goog.inHtmlDocument_() || "es6" != b || "noModule" in goog.global.document.createElement("script") ? !1 : !0;
    throw Error("Unknown language mode: " + a);
}, goog.Transpiler.prototype.transpile = function(a, b) {
    return goog.transpile_(a, b, this.transpilationTarget_);
}, goog.transpiler_ = new goog.Transpiler, goog.protectScriptTag_ = function(a) {
    return a.replace(/<\/(SCRIPT)/ig, "\\x3c/$1");
}, goog.DebugLoader_ = function() {
    this.dependencies_ = {};
    this.idToPath_ = {};
    this.written_ = {};
    this.loadingDeps_ = [];
    this.depsToLoad_ = [];
    this.paused_ = !1;
    this.factory_ = new goog.DependencyFactory(goog.transpiler_);
    this.deferredCallbacks_ = {};
    this.deferredQueue_ = [];
}, goog.DebugLoader_.prototype.bootstrap = function(a, b) {
    function c() {
        d && (goog.global.setTimeout(d, 0), d = null);
    }
    var d = b;
    if (a.length) {
        b = [];
        for(var e = 0; e < a.length; e++){
            var f = this.getPathFromDeps_(a[e]);
            if (!f) throw Error("Unregonized namespace: " + a[e]);
            b.push(this.dependencies_[f]);
        }
        f = goog.require;
        var g = 0;
        for(e = 0; e < a.length; e++)f(a[e]), b[e].onLoad(function() {
            ++g == a.length && c();
        });
    } else c();
}, goog.DebugLoader_.prototype.loadClosureDeps = function() {
    this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + "deps.js"), "deps.js", [], [], {}, !1));
    this.loadDeps_();
}, goog.DebugLoader_.prototype.requested = function(a, b) {
    (a = this.getPathFromDeps_(a)) && (b || this.areDepsLoaded_(this.dependencies_[a].requires)) && (b = this.deferredCallbacks_[a]) && (delete this.deferredCallbacks_[a], b());
}, goog.DebugLoader_.prototype.setDependencyFactory = function(a) {
    this.factory_ = a;
}, goog.DebugLoader_.prototype.load_ = function(a) {
    if (this.getPathFromDeps_(a)) {
        var b = this, c = [], d = function(a) {
            var e = b.getPathFromDeps_(a);
            if (!e) throw Error("Bad dependency path or symbol: " + a);
            if (!b.written_[e]) {
                b.written_[e] = !0;
                a = b.dependencies_[e];
                for(e = 0; e < a.requires.length; e++)goog.isProvided_(a.requires[e]) || d(a.requires[e]);
                c.push(a);
            }
        };
        d(a);
        a = !!this.depsToLoad_.length;
        this.depsToLoad_ = this.depsToLoad_.concat(c);
        this.paused_ || a || this.loadDeps_();
    } else throw a = "goog.require could not find: " + a, goog.logToConsole_(a), Error(a);
}, goog.DebugLoader_.prototype.loadDeps_ = function() {
    for(var a = this, b = this.paused_; this.depsToLoad_.length && !b;)(function() {
        var c = !1, d = a.depsToLoad_.shift(), e = !1;
        a.loading_(d);
        var f = {
            pause: function() {
                if (c) throw Error("Cannot call pause after the call to load.");
                b = !0;
            },
            resume: function() {
                c ? a.resume_() : b = !1;
            },
            loaded: function() {
                if (e) throw Error("Double call to loaded.");
                e = !0;
                a.loaded_(d);
            },
            pending: function() {
                for(var b = [], c = 0; c < a.loadingDeps_.length; c++)b.push(a.loadingDeps_[c]);
                return b;
            },
            setModuleState: function(a) {
                goog.moduleLoaderState_ = {
                    type: a,
                    moduleName: "",
                    declareLegacyNamespace: !1
                };
            },
            registerEs6ModuleExports: function(a, b, c) {
                c && (goog.loadedModules_[c] = {
                    exports: b,
                    type: goog.ModuleType.ES6,
                    moduleId: c || ""
                });
            },
            registerGoogModuleExports: function(a, b) {
                goog.loadedModules_[a] = {
                    exports: b,
                    type: goog.ModuleType.GOOG,
                    moduleId: a
                };
            },
            clearModuleState: function() {
                goog.moduleLoaderState_ = null;
            },
            defer: function(b) {
                if (c) throw Error("Cannot register with defer after the call to load.");
                a.defer_(d, b);
            },
            areDepsLoaded: function() {
                return a.areDepsLoaded_(d.requires);
            }
        };
        try {
            d.load(f);
        } finally{
            c = !0;
        }
    })();
    b && this.pause_();
}, goog.DebugLoader_.prototype.pause_ = function() {
    this.paused_ = !0;
}, goog.DebugLoader_.prototype.resume_ = function() {
    this.paused_ && (this.paused_ = !1, this.loadDeps_());
}, goog.DebugLoader_.prototype.loading_ = function(a) {
    this.loadingDeps_.push(a);
}, goog.DebugLoader_.prototype.loaded_ = function(a) {
    for(var b = 0; b < this.loadingDeps_.length; b++)if (this.loadingDeps_[b] == a) {
        this.loadingDeps_.splice(b, 1);
        break;
    }
    for(b = 0; b < this.deferredQueue_.length; b++)if (this.deferredQueue_[b] == a.path) {
        this.deferredQueue_.splice(b, 1);
        break;
    }
    if (this.loadingDeps_.length == this.deferredQueue_.length && !this.depsToLoad_.length) for(; this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(), !0);
    a.loaded();
}, goog.DebugLoader_.prototype.areDepsLoaded_ = function(a) {
    for(var b = 0; b < a.length; b++){
        var c = this.getPathFromDeps_(a[b]);
        if (!c || !(c in this.deferredCallbacks_ || goog.isProvided_(a[b]))) return !1;
    }
    return !0;
}, goog.DebugLoader_.prototype.getPathFromDeps_ = function(a) {
    return a in this.idToPath_ ? this.idToPath_[a] : a in this.dependencies_ ? a : null;
}, goog.DebugLoader_.prototype.defer_ = function(a, b) {
    this.deferredCallbacks_[a.path] = b;
    this.deferredQueue_.push(a.path);
}, goog.LoadController = function() {}, goog.LoadController.prototype.pause = function() {}, goog.LoadController.prototype.resume = function() {}, goog.LoadController.prototype.loaded = function() {}, goog.LoadController.prototype.pending = function() {}, goog.LoadController.prototype.registerEs6ModuleExports = function(a, b, c) {}, goog.LoadController.prototype.setModuleState = function(a) {}, goog.LoadController.prototype.clearModuleState = function() {}, goog.LoadController.prototype.defer = function(a) {}, goog.LoadController.prototype.areDepsLoaded = function() {}, goog.Dependency = function(a, b, c, d, e) {
    this.path = a;
    this.relativePath = b;
    this.provides = c;
    this.requires = d;
    this.loadFlags = e;
    this.loaded_ = !1;
    this.loadCallbacks_ = [];
}, goog.Dependency.prototype.getPathName = function() {
    var a = this.path, b = a.indexOf("://");
    0 <= b && (a = a.substring(b + 3), b = a.indexOf("/"), 0 <= b && (a = a.substring(b + 1)));
    return a;
}, goog.Dependency.prototype.onLoad = function(a) {
    this.loaded_ ? a() : this.loadCallbacks_.push(a);
}, goog.Dependency.prototype.loaded = function() {
    this.loaded_ = !0;
    var a = this.loadCallbacks_;
    this.loadCallbacks_ = [];
    for(var b = 0; b < a.length; b++)a[b]();
}, goog.Dependency.defer_ = !1, goog.Dependency.callbackMap_ = {}, goog.Dependency.registerCallback_ = function(a) {
    var b = Math.random().toString(32);
    goog.Dependency.callbackMap_[b] = a;
    return b;
}, goog.Dependency.unregisterCallback_ = function(a) {
    delete goog.Dependency.callbackMap_[a];
}, goog.Dependency.callback_ = function(a, b) {
    if (a in goog.Dependency.callbackMap_) {
        for(var c = goog.Dependency.callbackMap_[a], d = [], e = 1; e < arguments.length; e++)d.push(arguments[e]);
        c.apply(void 0, d);
    } else throw Error("Callback key " + a + " does not exist (was base.js loaded more than once?).");
}, goog.Dependency.prototype.load = function(a) {
    if (goog.global.CLOSURE_IMPORT_SCRIPT) goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a.loaded() : a.pause();
    else if (goog.inHtmlDocument_()) {
        var b = goog.global.document;
        if ("complete" == b.readyState && !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            if (/\bdeps.js$/.test(this.path)) {
                a.loaded();
                return;
            }
            throw Error('Cannot write "' + this.path + '" after document load');
        }
        if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && goog.isDocumentLoading_()) {
            var c = goog.Dependency.registerCallback_(function(b) {
                goog.DebugLoader_.IS_OLD_IE_ && "complete" != b.readyState || (goog.Dependency.unregisterCallback_(c), a.loaded());
            }), d = !goog.DebugLoader_.IS_OLD_IE_ && goog.getScriptNonce() ? ' nonce="' + goog.getScriptNonce() + '"' : "";
            d = '<script src="' + this.path + '" ' + (goog.DebugLoader_.IS_OLD_IE_ ? "onreadystatechange" : "onload") + "=\"goog.Dependency.callback_('" + c + '\', this)" type="text/javascript" ' + (goog.Dependency.defer_ ? "defer" : "") + d + "></script>";
            b.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d) : d);
        } else {
            var e = b.createElement("script");
            e.defer = goog.Dependency.defer_;
            e.async = !1;
            e.type = "text/javascript";
            (d = goog.getScriptNonce()) && e.setAttribute("nonce", d);
            goog.DebugLoader_.IS_OLD_IE_ ? (a.pause(), e.onreadystatechange = function() {
                if ("loaded" == e.readyState || "complete" == e.readyState) a.loaded(), a.resume();
            }) : e.onload = function() {
                e.onload = null;
                a.loaded();
            };
            e.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) : this.path;
            b.head.appendChild(e);
        }
    } else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), "deps.js" == this.relativePath ? (goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."), a.loaded()) : a.pause();
}, goog.Es6ModuleDependency = function(a, b, c, d, e) {
    goog.Dependency.call(this, a, b, c, d, e);
}, goog.inherits(goog.Es6ModuleDependency, goog.Dependency), goog.Es6ModuleDependency.prototype.load = function(a) {
    function b(a, b) {
        a = b ? '<script type="module" crossorigin>' + b + "</script>" : '<script type="module" crossorigin src="' + a + '"></script>';
        d.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(a) : a);
    }
    function c(a, b) {
        var c = d.createElement("script");
        c.defer = !0;
        c.async = !1;
        c.type = "module";
        c.setAttribute("crossorigin", !0);
        var e = goog.getScriptNonce();
        e && c.setAttribute("nonce", e);
        b ? c.textContent = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScript(b) : b : c.src = goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createScriptURL(a) : a;
        d.head.appendChild(c);
    }
    if (goog.global.CLOSURE_IMPORT_SCRIPT) goog.global.CLOSURE_IMPORT_SCRIPT(this.path) ? a.loaded() : a.pause();
    else if (goog.inHtmlDocument_()) {
        var d = goog.global.document, e = this;
        if (goog.isDocumentLoading_()) {
            var f = b;
            goog.Dependency.defer_ = !0;
        } else f = c;
        var g = goog.Dependency.registerCallback_(function() {
            goog.Dependency.unregisterCallback_(g);
            a.setModuleState(goog.ModuleType.ES6);
        });
        f(void 0, 'goog.Dependency.callback_("' + g + '")');
        f(this.path, void 0);
        var h = goog.Dependency.registerCallback_(function(b) {
            goog.Dependency.unregisterCallback_(h);
            a.registerEs6ModuleExports(e.path, b, goog.moduleLoaderState_.moduleName);
        });
        f(void 0, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' + h + '", m)');
        var k = goog.Dependency.registerCallback_(function() {
            goog.Dependency.unregisterCallback_(k);
            a.clearModuleState();
            a.loaded();
        });
        f(void 0, 'goog.Dependency.callback_("' + k + '")');
    } else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."), a.pause();
}, goog.TransformedDependency = function(a, b, c, d, e) {
    goog.Dependency.call(this, a, b, c, d, e);
    this.contents_ = null;
    this.lazyFetch_ = !goog.inHtmlDocument_() || !("noModule" in goog.global.document.createElement("script"));
}, goog.inherits(goog.TransformedDependency, goog.Dependency), goog.TransformedDependency.prototype.load = function(a) {
    function b() {
        e.contents_ = goog.loadFileSync_(e.path);
        e.contents_ && (e.contents_ = e.transform(e.contents_), e.contents_ && (e.contents_ += "\n//# sourceURL=" + e.path));
    }
    function c() {
        e.lazyFetch_ && b();
        if (e.contents_) {
            f && a.setModuleState(goog.ModuleType.ES6);
            try {
                var c = e.contents_;
                e.contents_ = null;
                goog.globalEval(c);
                if (f) var d = goog.moduleLoaderState_.moduleName;
            } finally{
                f && a.clearModuleState();
            }
            f && goog.global.$jscomp.require.ensure([
                e.getPathName()
            ], function() {
                a.registerEs6ModuleExports(e.path, goog.global.$jscomp.require(e.getPathName()), d);
            });
            a.loaded();
        }
    }
    function d() {
        var a = goog.global.document, b = goog.Dependency.registerCallback_(function() {
            goog.Dependency.unregisterCallback_(b);
            c();
        }), d = '<script type="text/javascript">' + goog.protectScriptTag_('goog.Dependency.callback_("' + b + '");') + "</script>";
        a.write(goog.TRUSTED_TYPES_POLICY_ ? goog.TRUSTED_TYPES_POLICY_.createHTML(d) : d);
    }
    var e = this;
    if (goog.global.CLOSURE_IMPORT_SCRIPT) b(), this.contents_ && goog.global.CLOSURE_IMPORT_SCRIPT("", this.contents_) ? (this.contents_ = null, a.loaded()) : a.pause();
    else {
        var f = this.loadFlags.module == goog.ModuleType.ES6;
        this.lazyFetch_ || b();
        var g = 1 < a.pending().length, h = g && goog.DebugLoader_.IS_OLD_IE_;
        g = goog.Dependency.defer_ && (g || goog.isDocumentLoading_());
        if (h || g) a.defer(function() {
            c();
        });
        else {
            var k = goog.global.document;
            h = goog.inHtmlDocument_() && "ActiveXObject" in goog.global;
            if (f && goog.inHtmlDocument_() && goog.isDocumentLoading_() && !h) {
                goog.Dependency.defer_ = !0;
                a.pause();
                var l = k.onreadystatechange;
                k.onreadystatechange = function() {
                    "interactive" == k.readyState && (k.onreadystatechange = l, c(), a.resume());
                    goog.isFunction(l) && l.apply(void 0, arguments);
                };
            } else !goog.DebugLoader_.IS_OLD_IE_ && goog.inHtmlDocument_() && goog.isDocumentLoading_() ? d() : c();
        }
    }
}, goog.TransformedDependency.prototype.transform = function(a) {}, goog.TranspiledDependency = function(a, b, c, d, e, f) {
    goog.TransformedDependency.call(this, a, b, c, d, e);
    this.transpiler = f;
}, goog.inherits(goog.TranspiledDependency, goog.TransformedDependency), goog.TranspiledDependency.prototype.transform = function(a) {
    return this.transpiler.transpile(a, this.getPathName());
}, goog.PreTranspiledEs6ModuleDependency = function(a, b, c, d, e) {
    goog.TransformedDependency.call(this, a, b, c, d, e);
}, goog.inherits(goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency), goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(a) {
    return a;
}, goog.GoogModuleDependency = function(a, b, c, d, e, f, g) {
    goog.TransformedDependency.call(this, a, b, c, d, e);
    this.needsTranspile_ = f;
    this.transpiler_ = g;
}, goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency), goog.GoogModuleDependency.prototype.transform = function(a) {
    this.needsTranspile_ && (a = this.transpiler_.transpile(a, this.getPathName()));
    return goog.LOAD_MODULE_USING_EVAL && void 0 !== goog.global.JSON ? "goog.loadModule(" + goog.global.JSON.stringify(a + "\n//# sourceURL=" + this.path + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + a + "\n;return exports});\n//# sourceURL=" + this.path + "\n";
}, goog.DebugLoader_.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), goog.DebugLoader_.prototype.addDependency = function(a, b, c, d) {
    b = b || [];
    a = a.replace(/\\/g, "/");
    var e = goog.normalizePath_(goog.basePath + a);
    d && "boolean" !== typeof d || (d = d ? {
        module: goog.ModuleType.GOOG
    } : {});
    c = this.factory_.createDependency(e, a, b, c, d, goog.transpiler_.needsTranspile(d.lang || "es3", d.module));
    this.dependencies_[e] = c;
    for(c = 0; c < b.length; c++)this.idToPath_[b[c]] = e;
    this.idToPath_[a] = e;
}, goog.DependencyFactory = function(a) {
    this.transpiler = a;
}, goog.DependencyFactory.prototype.createDependency = function(a, b, c, d, e, f) {
    return e.module == goog.ModuleType.GOOG ? new goog.GoogModuleDependency(a, b, c, d, e, f, this.transpiler) : f ? new goog.TranspiledDependency(a, b, c, d, e, this.transpiler) : e.module == goog.ModuleType.ES6 ? "never" == goog.TRANSPILE && goog.ASSUME_ES_MODULES_TRANSPILED ? new goog.PreTranspiledEs6ModuleDependency(a, b, c, d, e) : new goog.Es6ModuleDependency(a, b, c, d, e) : new goog.Dependency(a, b, c, d, e);
}, goog.debugLoader_ = new goog.DebugLoader_, goog.loadClosureDeps = function() {
    goog.debugLoader_.loadClosureDeps();
}, goog.setDependencyFactory = function(a) {
    goog.debugLoader_.setDependencyFactory(a);
}, goog.global.CLOSURE_NO_DEPS || goog.debugLoader_.loadClosureDeps(), goog.bootstrap = function(a, b) {
    goog.debugLoader_.bootstrap(a, b);
});
goog.TRUSTED_TYPES_POLICY_NAME = "";
goog.identity_ = function(a) {
    return a;
};
goog.createTrustedTypesPolicy = function(a) {
    var b = null, c = goog.global.trustedTypes || goog.global.TrustedTypes;
    if (!c || !c.createPolicy) return b;
    try {
        b = c.createPolicy(a, {
            createHTML: goog.identity_,
            createScript: goog.identity_,
            createScriptURL: goog.identity_,
            createURL: goog.identity_
        });
    } catch (d) {
        goog.logToConsole_(d.message);
    }
    return b;
};
goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#base") : null;
goog.object = {};
goog.object.is = function(a, b) {
    return a === b ? 0 !== a || 1 / a === 1 / b : a !== a && b !== b;
};
goog.object.forEach = function(a, b, c) {
    for(var d in a)b.call(c, a[d], d, a);
};
goog.object.filter = function(a, b, c) {
    var d = {}, e;
    for(e in a)b.call(c, a[e], e, a) && (d[e] = a[e]);
    return d;
};
goog.object.map = function(a, b, c) {
    var d = {}, e;
    for(e in a)d[e] = b.call(c, a[e], e, a);
    return d;
};
goog.object.some = function(a, b, c) {
    for(var d in a)if (b.call(c, a[d], d, a)) return !0;
    return !1;
};
goog.object.every = function(a, b, c) {
    for(var d in a)if (!b.call(c, a[d], d, a)) return !1;
    return !0;
};
goog.object.getCount = function(a) {
    var b = 0, c;
    for(c in a)b++;
    return b;
};
goog.object.getAnyKey = function(a) {
    for(var b in a)return b;
};
goog.object.getAnyValue = function(a) {
    for(var b in a)return a[b];
};
goog.object.contains = function(a, b) {
    return goog.object.containsValue(a, b);
};
goog.object.getValues = function(a) {
    var b = [], c = 0, d;
    for(d in a)b[c++] = a[d];
    return b;
};
goog.object.getKeys = function(a) {
    var b = [], c = 0, d;
    for(d in a)b[c++] = d;
    return b;
};
goog.object.getValueByKeys = function(a, b) {
    var c = goog.isArrayLike(b), d = c ? b : arguments;
    for(c = c ? 0 : 1; c < d.length; c++){
        if (null == a) return;
        a = a[d[c]];
    }
    return a;
};
goog.object.containsKey = function(a, b) {
    return null !== a && b in a;
};
goog.object.containsValue = function(a, b) {
    for(var c in a)if (a[c] == b) return !0;
    return !1;
};
goog.object.findKey = function(a, b, c) {
    for(var d in a)if (b.call(c, a[d], d, a)) return d;
};
goog.object.findValue = function(a, b, c) {
    return (b = goog.object.findKey(a, b, c)) && a[b];
};
goog.object.isEmpty = function(a) {
    for(var b in a)return !1;
    return !0;
};
goog.object.clear = function(a) {
    for(var b in a)delete a[b];
};
goog.object.remove = function(a, b) {
    var c;
    (c = b in a) && delete a[b];
    return c;
};
goog.object.add = function(a, b, c) {
    if (null !== a && b in a) throw Error('The object already contains the key "' + b + '"');
    goog.object.set(a, b, c);
};
goog.object.get = function(a, b, c) {
    return null !== a && b in a ? a[b] : c;
};
goog.object.set = function(a, b, c) {
    a[b] = c;
};
goog.object.setIfUndefined = function(a, b, c) {
    return b in a ? a[b] : a[b] = c;
};
goog.object.setWithReturnValueIfNotSet = function(a, b, c) {
    if (b in a) return a[b];
    c = c();
    return a[b] = c;
};
goog.object.equals = function(a, b) {
    for(var c in a)if (!(c in b) || a[c] !== b[c]) return !1;
    for(var d in b)if (!(d in a)) return !1;
    return !0;
};
goog.object.clone = function(a) {
    var b = {}, c;
    for(c in a)b[c] = a[c];
    return b;
};
goog.object.unsafeClone = function(a) {
    var b = goog.typeOf(a);
    if ("object" == b || "array" == b) {
        if (goog.isFunction(a.clone)) return a.clone();
        b = "array" == b ? [] : {};
        for(var c in a)b[c] = goog.object.unsafeClone(a[c]);
        return b;
    }
    return a;
};
goog.object.transpose = function(a) {
    var b = {}, c;
    for(c in a)b[a[c]] = c;
    return b;
};
goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend = function(a, b) {
    for(var c, d, e = 1; e < arguments.length; e++){
        d = arguments[e];
        for(c in d)a[c] = d[c];
        for(var f = 0; f < goog.object.PROTOTYPE_FIELDS_.length; f++)c = goog.object.PROTOTYPE_FIELDS_[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
};
goog.object.create = function(a) {
    var b = arguments.length;
    if (1 == b && Array.isArray(arguments[0])) return goog.object.create.apply(null, arguments[0]);
    if (b % 2) throw Error("Uneven number of arguments");
    for(var c = {}, d = 0; d < b; d += 2)c[arguments[d]] = arguments[d + 1];
    return c;
};
goog.object.createSet = function(a) {
    var b = arguments.length;
    if (1 == b && Array.isArray(arguments[0])) return goog.object.createSet.apply(null, arguments[0]);
    for(var c = {}, d = 0; d < b; d++)c[arguments[d]] = !0;
    return c;
};
goog.object.createImmutableView = function(a) {
    var b = a;
    Object.isFrozen && !Object.isFrozen(a) && (b = Object.create(a), Object.freeze(b));
    return b;
};
goog.object.isImmutableView = function(a) {
    return !!Object.isFrozen && Object.isFrozen(a);
};
goog.object.getAllPropertyNames = function(a, b, c) {
    if (!a) return [];
    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) return goog.object.getKeys(a);
    for(var d = {}; a && (a !== Object.prototype || b) && (a !== Function.prototype || c);){
        for(var e = Object.getOwnPropertyNames(a), f = 0; f < e.length; f++)d[e[f]] = !0;
        a = Object.getPrototypeOf(a);
    }
    return goog.object.getKeys(d);
};
goog.object.getSuperClass = function(a) {
    return (a = Object.getPrototypeOf(a.prototype)) && a.constructor;
};
var jspb = {
    asserts: {}
};
jspb.asserts.doAssertFailure = function(a, b, c, d) {
    var e = "Assertion failed";
    if (c) {
        e += ": " + c;
        var f = d;
    } else a && (e += ": " + a, f = b);
    throw Error("" + e, f || []);
};
jspb.asserts.assert = function(a, b, c) {
    for(var d = [], e = 2; e < arguments.length; ++e)d[e - 2] = arguments[e];
    a || jspb.asserts.doAssertFailure("", null, b, d);
    return a;
};
jspb.asserts.assertString = function(a, b, c) {
    for(var d = [], e = 2; e < arguments.length; ++e)d[e - 2] = arguments[e];
    "string" !== typeof a && jspb.asserts.doAssertFailure("Expected string but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, d);
    return a;
};
jspb.asserts.assertArray = function(a, b, c) {
    for(var d = [], e = 2; e < arguments.length; ++e)d[e - 2] = arguments[e];
    Array.isArray(a) || jspb.asserts.doAssertFailure("Expected array but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, d);
    return a;
};
jspb.asserts.fail = function(a, b) {
    for(var c = [], d = 1; d < arguments.length; ++d)c[d - 1] = arguments[d];
    throw Error("Failure" + (a ? ": " + a : ""), c);
};
jspb.asserts.assertInstanceof = function(a, b, c, d) {
    for(var e = [], f = 3; f < arguments.length; ++f)e[f - 3] = arguments[f];
    a instanceof b || jspb.asserts.doAssertFailure("Expected instanceof %s but got %s.", [
        jspb.asserts.getType(b),
        jspb.asserts.getType(a)
    ], c, e);
    return a;
};
jspb.asserts.getType = function(a) {
    return a instanceof Function ? a.displayName || a.name || "unknown type name" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? "null" : typeof a;
};
jspb.BinaryConstants = {};
jspb.ConstBinaryMessage = function() {};
jspb.BinaryMessage = function() {};
jspb.BinaryConstants.FieldType = {
    INVALID: -1,
    DOUBLE: 1,
    FLOAT: 2,
    INT64: 3,
    UINT64: 4,
    INT32: 5,
    FIXED64: 6,
    FIXED32: 7,
    BOOL: 8,
    STRING: 9,
    GROUP: 10,
    MESSAGE: 11,
    BYTES: 12,
    UINT32: 13,
    ENUM: 14,
    SFIXED32: 15,
    SFIXED64: 16,
    SINT32: 17,
    SINT64: 18,
    FHASH64: 30,
    VHASH64: 31
};
jspb.BinaryConstants.WireType = {
    INVALID: -1,
    VARINT: 0,
    FIXED64: 1,
    DELIMITED: 2,
    START_GROUP: 3,
    END_GROUP: 4,
    FIXED32: 5
};
jspb.BinaryConstants.FieldTypeToWireType = function(a) {
    var b = jspb.BinaryConstants.FieldType, c = jspb.BinaryConstants.WireType;
    switch(a){
        case b.INT32:
        case b.INT64:
        case b.UINT32:
        case b.UINT64:
        case b.SINT32:
        case b.SINT64:
        case b.BOOL:
        case b.ENUM:
        case b.VHASH64:
            return c.VARINT;
        case b.DOUBLE:
        case b.FIXED64:
        case b.SFIXED64:
        case b.FHASH64:
            return c.FIXED64;
        case b.STRING:
        case b.MESSAGE:
        case b.BYTES:
            return c.DELIMITED;
        case b.FLOAT:
        case b.FIXED32:
        case b.SFIXED32:
            return c.FIXED32;
        default:
            return c.INVALID;
    }
};
jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1;
jspb.BinaryConstants.FLOAT32_EPS = 1.401298464324817E-45;
jspb.BinaryConstants.FLOAT32_MIN = 1.1754943508222875E-38;
jspb.BinaryConstants.FLOAT32_MAX = 3.4028234663852886E38;
jspb.BinaryConstants.FLOAT64_EPS = 4.9E-324;
jspb.BinaryConstants.FLOAT64_MIN = 2.2250738585072014E-308;
jspb.BinaryConstants.FLOAT64_MAX = 1.7976931348623157E308;
jspb.BinaryConstants.TWO_TO_20 = 1048576;
jspb.BinaryConstants.TWO_TO_23 = 8388608;
jspb.BinaryConstants.TWO_TO_31 = 2147483648;
jspb.BinaryConstants.TWO_TO_32 = 4294967296;
jspb.BinaryConstants.TWO_TO_52 = 4503599627370496;
jspb.BinaryConstants.TWO_TO_63 = 0x7fffffffffffffff;
jspb.BinaryConstants.TWO_TO_64 = 1.8446744073709552E19;
jspb.BinaryConstants.ZERO_HASH = "\0\0\0\0\0\0\0\0";
goog.debug = {};
goog.debug.Error = function(a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, goog.debug.Error);
    else {
        var b = Error().stack;
        b && (this.stack = b);
    }
    a && (this.message = String(a));
    this.reportErrorToServer = !0;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.dom = {};
goog.dom.NodeType = {
    ELEMENT: 1,
    ATTRIBUTE: 2,
    TEXT: 3,
    CDATA_SECTION: 4,
    ENTITY_REFERENCE: 5,
    ENTITY: 6,
    PROCESSING_INSTRUCTION: 7,
    COMMENT: 8,
    DOCUMENT: 9,
    DOCUMENT_TYPE: 10,
    DOCUMENT_FRAGMENT: 11,
    NOTATION: 12
};
goog.asserts = {};
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(a, b) {
    goog.debug.Error.call(this, goog.asserts.subs_(a, b));
    this.messagePattern = a;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(a) {
    throw a;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_ = function(a, b) {
    a = a.split("%s");
    for(var c = "", d = a.length - 1, e = 0; e < d; e++)c += a[e] + (e < b.length ? b[e] : "%s");
    return c + a[d];
};
goog.asserts.doAssertFailure_ = function(a, b, c, d) {
    var e = "Assertion failed";
    if (c) {
        e += ": " + c;
        var f = d;
    } else a && (e += ": " + a, f = b);
    a = new goog.asserts.AssertionError("" + e, f || []);
    goog.asserts.errorHandler_(a);
};
goog.asserts.setErrorHandler = function(a) {
    goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a);
};
goog.asserts.assert = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !a && goog.asserts.doAssertFailure_("", null, b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertExists = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && null == a && goog.asserts.doAssertFailure_("Expected to exist: %s.", [
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.fail = function(a, b) {
    goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1)));
};
goog.asserts.assertNumber = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && "number" !== typeof a && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertString = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && "string" !== typeof a && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertFunction = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertObject = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isObject(a) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertArray = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !Array.isArray(a) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertBoolean = function(a, b, c) {
    goog.asserts.ENABLE_ASSERTS && "boolean" !== typeof a && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertElement = function(a, b, c) {
    !goog.asserts.ENABLE_ASSERTS || goog.isObject(a) && a.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [
        goog.typeOf(a),
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertInstanceof = function(a, b, c, d) {
    !goog.asserts.ENABLE_ASSERTS || a instanceof b || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [
        goog.asserts.getType_(b),
        goog.asserts.getType_(a)
    ], c, Array.prototype.slice.call(arguments, 3));
    return a;
};
goog.asserts.assertFinite = function(a, b, c) {
    !goog.asserts.ENABLE_ASSERTS || "number" == typeof a && isFinite(a) || goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [
        a
    ], b, Array.prototype.slice.call(arguments, 2));
    return a;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
    for(var a in Object.prototype)goog.asserts.fail(a + " should not be enumerable in Object.prototype.");
};
goog.asserts.getType_ = function(a) {
    return a instanceof Function ? a.displayName || a.name || "unknown type name" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? "null" : typeof a;
};
goog.array = {};
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ASSUME_NATIVE_FUNCTIONS = 2012 < goog.FEATURESET_YEAR;
goog.array.peek = function(a) {
    return a[a.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.indexOf.call(a, b, c);
} : function(a, b, c) {
    c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, c);
    for(; c < a.length; c++)if (c in a && a[c] === b) return c;
    return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.lastIndexOf.call(a, b, null == c ? a.length - 1 : c);
} : function(a, b, c) {
    c = null == c ? a.length - 1 : c;
    0 > c && (c = Math.max(0, a.length + c));
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.lastIndexOf(b, c);
    for(; 0 <= c; c--)if (c in a && a[c] === b) return c;
    return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
};
goog.array.forEachRight = function(a, b, c) {
    var d = a.length, e = "string" === typeof a ? a.split("") : a;
    for(--d; 0 <= d; --d)d in e && b.call(c, e[d], d, a);
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.filter.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = [], f = 0, g = "string" === typeof a ? a.split("") : a, h = 0; h < d; h++)if (h in g) {
        var k = g[h];
        b.call(c, k, h, a) && (e[f++] = k);
    }
    return e;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.map.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = Array(d), f = "string" === typeof a ? a.split("") : a, g = 0; g < d; g++)g in f && (e[g] = b.call(c, f[g], g, a));
    return e;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(a, b, c, d) {
    goog.asserts.assert(null != a.length);
    d && (b = goog.bind(b, d));
    return Array.prototype.reduce.call(a, b, c);
} : function(a, b, c, d) {
    var e = c;
    goog.array.forEach(a, function(c, g) {
        e = b.call(d, e, c, g, a);
    });
    return e;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(a, b, c, d) {
    goog.asserts.assert(null != a.length);
    goog.asserts.assert(null != b);
    d && (b = goog.bind(b, d));
    return Array.prototype.reduceRight.call(a, b, c);
} : function(a, b, c, d) {
    var e = c;
    goog.array.forEachRight(a, function(c, g) {
        e = b.call(d, e, c, g, a);
    });
    return e;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.some.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)if (f in e && b.call(c, e[f], f, a)) return !0;
    return !1;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.every.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)if (f in e && !b.call(c, e[f], f, a)) return !1;
    return !0;
};
goog.array.count = function(a, b, c) {
    var d = 0;
    goog.array.forEach(a, function(a, f, g) {
        b.call(c, a, f, g) && ++d;
    }, c);
    return d;
};
goog.array.find = function(a, b, c) {
    b = goog.array.findIndex(a, b, c);
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
};
goog.array.findIndex = function(a, b, c) {
    for(var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)if (f in e && b.call(c, e[f], f, a)) return f;
    return -1;
};
goog.array.findRight = function(a, b, c) {
    b = goog.array.findIndexRight(a, b, c);
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
};
goog.array.findIndexRight = function(a, b, c) {
    var d = a.length, e = "string" === typeof a ? a.split("") : a;
    for(--d; 0 <= d; d--)if (d in e && b.call(c, e[d], d, a)) return d;
    return -1;
};
goog.array.contains = function(a, b) {
    return 0 <= goog.array.indexOf(a, b);
};
goog.array.isEmpty = function(a) {
    return 0 == a.length;
};
goog.array.clear = function(a) {
    if (!Array.isArray(a)) for(var b = a.length - 1; 0 <= b; b--)delete a[b];
    a.length = 0;
};
goog.array.insert = function(a, b) {
    goog.array.contains(a, b) || a.push(b);
};
goog.array.insertAt = function(a, b, c) {
    goog.array.splice(a, c, 0, b);
};
goog.array.insertArrayAt = function(a, b, c) {
    goog.partial(goog.array.splice, a, c, 0).apply(null, b);
};
goog.array.insertBefore = function(a, b, c) {
    var d;
    2 == arguments.length || 0 > (d = goog.array.indexOf(a, c)) ? a.push(b) : goog.array.insertAt(a, b, d);
};
goog.array.remove = function(a, b) {
    b = goog.array.indexOf(a, b);
    var c;
    (c = 0 <= b) && goog.array.removeAt(a, b);
    return c;
};
goog.array.removeLast = function(a, b) {
    b = goog.array.lastIndexOf(a, b);
    return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
};
goog.array.removeAt = function(a, b) {
    goog.asserts.assert(null != a.length);
    return 1 == Array.prototype.splice.call(a, b, 1).length;
};
goog.array.removeIf = function(a, b, c) {
    b = goog.array.findIndex(a, b, c);
    return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
};
goog.array.removeAllIf = function(a, b, c) {
    var d = 0;
    goog.array.forEachRight(a, function(e, f) {
        b.call(c, e, f, a) && goog.array.removeAt(a, f) && d++;
    });
    return d;
};
goog.array.concat = function(a) {
    return Array.prototype.concat.apply([], arguments);
};
goog.array.join = function(a) {
    return Array.prototype.concat.apply([], arguments);
};
goog.array.toArray = function(a) {
    var b = a.length;
    if (0 < b) {
        for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
        return c;
    }
    return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(a, b) {
    for(var c = 1; c < arguments.length; c++){
        var d = arguments[c];
        if (goog.isArrayLike(d)) {
            var e = a.length || 0, f = d.length || 0;
            a.length = e + f;
            for(var g = 0; g < f; g++)a[e + g] = d[g];
        } else a.push(d);
    }
};
goog.array.splice = function(a, b, c, d) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.splice.apply(a, goog.array.slice(arguments, 1));
};
goog.array.slice = function(a, b, c) {
    goog.asserts.assert(null != a.length);
    return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
};
goog.array.removeDuplicates = function(a, b, c) {
    b = b || a;
    var d = function(a) {
        return goog.isObject(a) ? "o" + goog.getUid(a) : (typeof a).charAt(0) + a;
    };
    c = c || d;
    d = {};
    for(var e = 0, f = 0; f < a.length;){
        var g = a[f++], h = c(g);
        Object.prototype.hasOwnProperty.call(d, h) || (d[h] = !0, b[e++] = g);
    }
    b.length = e;
};
goog.array.binarySearch = function(a, b, c) {
    return goog.array.binarySearch_(a, c || goog.array.defaultCompare, !1, b);
};
goog.array.binarySelect = function(a, b, c) {
    return goog.array.binarySearch_(a, b, !0, void 0, c);
};
goog.array.binarySearch_ = function(a, b, c, d, e) {
    for(var f = 0, g = a.length, h; f < g;){
        var k = f + (g - f >>> 1);
        var l = c ? b.call(e, a[k], k, a) : b(d, a[k]);
        0 < l ? f = k + 1 : (g = k, h = !l);
    }
    return h ? f : -f - 1;
};
goog.array.sort = function(a, b) {
    a.sort(b || goog.array.defaultCompare);
};
goog.array.stableSort = function(a, b) {
    for(var c = Array(a.length), d = 0; d < a.length; d++)c[d] = {
        index: d,
        value: a[d]
    };
    var e = b || goog.array.defaultCompare;
    goog.array.sort(c, function(a, b) {
        return e(a.value, b.value) || a.index - b.index;
    });
    for(d = 0; d < a.length; d++)a[d] = c[d].value;
};
goog.array.sortByKey = function(a, b, c) {
    var d = c || goog.array.defaultCompare;
    goog.array.sort(a, function(a, c) {
        return d(b(a), b(c));
    });
};
goog.array.sortObjectsByKey = function(a, b, c) {
    goog.array.sortByKey(a, function(a) {
        return a[b];
    }, c);
};
goog.array.isSorted = function(a, b, c) {
    b = b || goog.array.defaultCompare;
    for(var d = 1; d < a.length; d++){
        var e = b(a[d - 1], a[d]);
        if (0 < e || 0 == e && c) return !1;
    }
    return !0;
};
goog.array.equals = function(a, b, c) {
    if (!goog.isArrayLike(a) || !goog.isArrayLike(b) || a.length != b.length) return !1;
    var d = a.length;
    c = c || goog.array.defaultCompareEquality;
    for(var e = 0; e < d; e++)if (!c(a[e], b[e])) return !1;
    return !0;
};
goog.array.compare3 = function(a, b, c) {
    c = c || goog.array.defaultCompare;
    for(var d = Math.min(a.length, b.length), e = 0; e < d; e++){
        var f = c(a[e], b[e]);
        if (0 != f) return f;
    }
    return goog.array.defaultCompare(a.length, b.length);
};
goog.array.defaultCompare = function(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
    return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
    return a === b;
};
goog.array.binaryInsert = function(a, b, c) {
    c = goog.array.binarySearch(a, b, c);
    return 0 > c ? (goog.array.insertAt(a, b, -(c + 1)), !0) : !1;
};
goog.array.binaryRemove = function(a, b, c) {
    b = goog.array.binarySearch(a, b, c);
    return 0 <= b ? goog.array.removeAt(a, b) : !1;
};
goog.array.bucket = function(a, b, c) {
    for(var d = {}, e = 0; e < a.length; e++){
        var f = a[e], g = b.call(c, f, e, a);
        void 0 !== g && (d[g] || (d[g] = [])).push(f);
    }
    return d;
};
goog.array.toObject = function(a, b, c) {
    var d = {};
    goog.array.forEach(a, function(e, f) {
        d[b.call(c, e, f, a)] = e;
    });
    return d;
};
goog.array.range = function(a, b, c) {
    var d = [], e = 0, f = a;
    c = c || 1;
    void 0 !== b && (e = a, f = b);
    if (0 > c * (f - e)) return [];
    if (0 < c) for(a = e; a < f; a += c)d.push(a);
    else for(a = e; a > f; a += c)d.push(a);
    return d;
};
goog.array.repeat = function(a, b) {
    for(var c = [], d = 0; d < b; d++)c[d] = a;
    return c;
};
goog.array.flatten = function(a) {
    for(var b = [], c = 0; c < arguments.length; c++){
        var d = arguments[c];
        if (Array.isArray(d)) for(var e = 0; e < d.length; e += 8192){
            var f = goog.array.slice(d, e, e + 8192);
            f = goog.array.flatten.apply(null, f);
            for(var g = 0; g < f.length; g++)b.push(f[g]);
        }
        else b.push(d);
    }
    return b;
};
goog.array.rotate = function(a, b) {
    goog.asserts.assert(null != a.length);
    a.length && (b %= a.length, 0 < b ? Array.prototype.unshift.apply(a, a.splice(-b, b)) : 0 > b && Array.prototype.push.apply(a, a.splice(0, -b)));
    return a;
};
goog.array.moveItem = function(a, b, c) {
    goog.asserts.assert(0 <= b && b < a.length);
    goog.asserts.assert(0 <= c && c < a.length);
    b = Array.prototype.splice.call(a, b, 1);
    Array.prototype.splice.call(a, c, 0, b[0]);
};
goog.array.zip = function(a) {
    if (!arguments.length) return [];
    for(var b = [], c = arguments[0].length, d = 1; d < arguments.length; d++)arguments[d].length < c && (c = arguments[d].length);
    for(d = 0; d < c; d++){
        for(var e = [], f = 0; f < arguments.length; f++)e.push(arguments[f][d]);
        b.push(e);
    }
    return b;
};
goog.array.shuffle = function(a, b) {
    b = b || Math.random;
    for(var c = a.length - 1; 0 < c; c--){
        var d = Math.floor(b() * (c + 1)), e = a[c];
        a[c] = a[d];
        a[d] = e;
    }
};
goog.array.copyByIndex = function(a, b) {
    var c = [];
    goog.array.forEach(b, function(b) {
        c.push(a[b]);
    });
    return c;
};
goog.array.concatMap = function(a, b, c) {
    return goog.array.concat.apply([], goog.array.map(a, b, c));
};
goog.crypt = {};
goog.crypt.stringToByteArray = function(a) {
    for(var b = [], c = 0, d = 0; d < a.length; d++){
        var e = a.charCodeAt(d);
        255 < e && (b[c++] = e & 255, e >>= 8);
        b[c++] = e;
    }
    return b;
};
goog.crypt.byteArrayToString = function(a) {
    if (8192 >= a.length) return String.fromCharCode.apply(null, a);
    for(var b = "", c = 0; c < a.length; c += 8192){
        var d = goog.array.slice(a, c, c + 8192);
        b += String.fromCharCode.apply(null, d);
    }
    return b;
};
goog.crypt.byteArrayToHex = function(a, b) {
    return goog.array.map(a, function(a) {
        a = a.toString(16);
        return 1 < a.length ? a : "0" + a;
    }).join(b || "");
};
goog.crypt.hexToByteArray = function(a) {
    goog.asserts.assert(0 == a.length % 2, "Key string length must be multiple of 2");
    for(var b = [], c = 0; c < a.length; c += 2)b.push(parseInt(a.substring(c, c + 2), 16));
    return b;
};
goog.crypt.stringToUtf8ByteArray = function(a) {
    for(var b = [], c = 0, d = 0; d < a.length; d++){
        var e = a.charCodeAt(d);
        128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (55296 == (e & 64512) && d + 1 < a.length && 56320 == (a.charCodeAt(d + 1) & 64512) ? (e = 65536 + ((e & 1023) << 10) + (a.charCodeAt(++d) & 1023), b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128) : b[c++] = e >> 12 | 224, b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
    }
    return b;
};
goog.crypt.utf8ByteArrayToString = function(a) {
    for(var b = [], c = 0, d = 0; c < a.length;){
        var e = a[c++];
        if (128 > e) b[d++] = String.fromCharCode(e);
        else if (191 < e && 224 > e) {
            var f = a[c++];
            b[d++] = String.fromCharCode((e & 31) << 6 | f & 63);
        } else if (239 < e && 365 > e) {
            f = a[c++];
            var g = a[c++], h = a[c++];
            e = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
            b[d++] = String.fromCharCode(55296 + (e >> 10));
            b[d++] = String.fromCharCode(56320 + (e & 1023));
        } else f = a[c++], g = a[c++], b[d++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63);
    }
    return b.join("");
};
goog.crypt.xorByteArray = function(a, b) {
    goog.asserts.assert(a.length == b.length, "XOR array lengths must match");
    for(var c = [], d = 0; d < a.length; d++)c.push(a[d] ^ b[d]);
    return c;
};
goog.dom.asserts = {};
goog.dom.asserts.assertIsLocation = function(a) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var b = goog.dom.asserts.getWindow_(a);
        b && (!a || !(a instanceof b.Location) && a instanceof b.Element) && goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s", goog.dom.asserts.debugStringForType_(a));
    }
    return a;
};
goog.dom.asserts.assertIsElementType_ = function(a, b) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var c = goog.dom.asserts.getWindow_(a);
        c && "undefined" != typeof c[b] && (a && (a instanceof c[b] || !(a instanceof c.Location || a instanceof c.Element)) || goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, goog.dom.asserts.debugStringForType_(a)));
    }
    return a;
};
goog.dom.asserts.assertIsHTMLAnchorElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLAnchorElement");
};
goog.dom.asserts.assertIsHTMLButtonElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLButtonElement");
};
goog.dom.asserts.assertIsHTMLLinkElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLLinkElement");
};
goog.dom.asserts.assertIsHTMLImageElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLImageElement");
};
goog.dom.asserts.assertIsHTMLAudioElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLAudioElement");
};
goog.dom.asserts.assertIsHTMLVideoElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLVideoElement");
};
goog.dom.asserts.assertIsHTMLInputElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLInputElement");
};
goog.dom.asserts.assertIsHTMLTextAreaElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLTextAreaElement");
};
goog.dom.asserts.assertIsHTMLCanvasElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLCanvasElement");
};
goog.dom.asserts.assertIsHTMLEmbedElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLEmbedElement");
};
goog.dom.asserts.assertIsHTMLFormElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLFormElement");
};
goog.dom.asserts.assertIsHTMLFrameElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLFrameElement");
};
goog.dom.asserts.assertIsHTMLIFrameElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLIFrameElement");
};
goog.dom.asserts.assertIsHTMLObjectElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLObjectElement");
};
goog.dom.asserts.assertIsHTMLScriptElement = function(a) {
    return goog.dom.asserts.assertIsElementType_(a, "HTMLScriptElement");
};
goog.dom.asserts.debugStringForType_ = function(a) {
    if (goog.isObject(a)) try {
        return a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
    } catch (b) {
        return "<object could not be stringified>";
    }
    else return void 0 === a ? "undefined" : null === a ? "null" : typeof a;
};
goog.dom.asserts.getWindow_ = function(a) {
    try {
        var b = a && a.ownerDocument, c = b && (b.defaultView || b.parentWindow);
        c = c || goog.global;
        if (c.Element && c.Location) return c;
    } catch (d) {}
    return null;
};
goog.functions = {};
goog.functions.constant = function(a) {
    return function() {
        return a;
    };
};
goog.functions.FALSE = function() {
    return !1;
};
goog.functions.TRUE = function() {
    return !0;
};
goog.functions.NULL = function() {
    return null;
};
goog.functions.identity = function(a, b) {
    return a;
};
goog.functions.error = function(a) {
    return function() {
        throw Error(a);
    };
};
goog.functions.fail = function(a) {
    return function() {
        throw a;
    };
};
goog.functions.lock = function(a, b) {
    b = b || 0;
    return function() {
        return a.apply(this, Array.prototype.slice.call(arguments, 0, b));
    };
};
goog.functions.nth = function(a) {
    return function() {
        return arguments[a];
    };
};
goog.functions.partialRight = function(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var b = Array.prototype.slice.call(arguments);
        b.push.apply(b, c);
        return a.apply(this, b);
    };
};
goog.functions.withReturnValue = function(a, b) {
    return goog.functions.sequence(a, goog.functions.constant(b));
};
goog.functions.equalTo = function(a, b) {
    return function(c) {
        return b ? a == c : a === c;
    };
};
goog.functions.compose = function(a, b) {
    var c = arguments, d = c.length;
    return function() {
        var a;
        d && (a = c[d - 1].apply(this, arguments));
        for(var b = d - 2; 0 <= b; b--)a = c[b].call(this, a);
        return a;
    };
};
goog.functions.sequence = function(a) {
    var b = arguments, c = b.length;
    return function() {
        for(var a, e = 0; e < c; e++)a = b[e].apply(this, arguments);
        return a;
    };
};
goog.functions.and = function(a) {
    var b = arguments, c = b.length;
    return function() {
        for(var a = 0; a < c; a++)if (!b[a].apply(this, arguments)) return !1;
        return !0;
    };
};
goog.functions.or = function(a) {
    var b = arguments, c = b.length;
    return function() {
        for(var a = 0; a < c; a++)if (b[a].apply(this, arguments)) return !0;
        return !1;
    };
};
goog.functions.not = function(a) {
    return function() {
        return !a.apply(this, arguments);
    };
};
goog.functions.create = function(a, b) {
    var c = function() {};
    c.prototype = a.prototype;
    c = new c;
    a.apply(c, Array.prototype.slice.call(arguments, 1));
    return c;
};
goog.functions.CACHE_RETURN_VALUE = !0;
goog.functions.cacheReturnValue = function(a) {
    var b = !1, c;
    return function() {
        if (!goog.functions.CACHE_RETURN_VALUE) return a();
        b || (c = a(), b = !0);
        return c;
    };
};
goog.functions.once = function(a) {
    var b = a;
    return function() {
        if (b) {
            var a = b;
            b = null;
            a();
        }
    };
};
goog.functions.debounce = function(a, b, c) {
    var d = 0;
    return function(e) {
        goog.global.clearTimeout(d);
        var f = arguments;
        d = goog.global.setTimeout(function() {
            a.apply(c, f);
        }, b);
    };
};
goog.functions.throttle = function(a, b, c) {
    var d = 0, e = !1, f = [], g = function() {
        d = 0;
        e && (e = !1, h());
    }, h = function() {
        d = goog.global.setTimeout(g, b);
        a.apply(c, f);
    };
    return function(a) {
        f = arguments;
        d ? e = !0 : h();
    };
};
goog.functions.rateLimit = function(a, b, c) {
    var d = 0, e = function() {
        d = 0;
    };
    return function(f) {
        d || (d = goog.global.setTimeout(e, b), a.apply(c, arguments));
    };
};
goog.dom.HtmlElement = function() {};
goog.dom.TagName = function(a) {
    this.tagName_ = a;
};
goog.dom.TagName.prototype.toString = function() {
    return this.tagName_;
};
goog.dom.TagName.A = new goog.dom.TagName("A");
goog.dom.TagName.ABBR = new goog.dom.TagName("ABBR");
goog.dom.TagName.ACRONYM = new goog.dom.TagName("ACRONYM");
goog.dom.TagName.ADDRESS = new goog.dom.TagName("ADDRESS");
goog.dom.TagName.APPLET = new goog.dom.TagName("APPLET");
goog.dom.TagName.AREA = new goog.dom.TagName("AREA");
goog.dom.TagName.ARTICLE = new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE = new goog.dom.TagName("ASIDE");
goog.dom.TagName.AUDIO = new goog.dom.TagName("AUDIO");
goog.dom.TagName.B = new goog.dom.TagName("B");
goog.dom.TagName.BASE = new goog.dom.TagName("BASE");
goog.dom.TagName.BASEFONT = new goog.dom.TagName("BASEFONT");
goog.dom.TagName.BDI = new goog.dom.TagName("BDI");
goog.dom.TagName.BDO = new goog.dom.TagName("BDO");
goog.dom.TagName.BIG = new goog.dom.TagName("BIG");
goog.dom.TagName.BLOCKQUOTE = new goog.dom.TagName("BLOCKQUOTE");
goog.dom.TagName.BODY = new goog.dom.TagName("BODY");
goog.dom.TagName.BR = new goog.dom.TagName("BR");
goog.dom.TagName.BUTTON = new goog.dom.TagName("BUTTON");
goog.dom.TagName.CANVAS = new goog.dom.TagName("CANVAS");
goog.dom.TagName.CAPTION = new goog.dom.TagName("CAPTION");
goog.dom.TagName.CENTER = new goog.dom.TagName("CENTER");
goog.dom.TagName.CITE = new goog.dom.TagName("CITE");
goog.dom.TagName.CODE = new goog.dom.TagName("CODE");
goog.dom.TagName.COL = new goog.dom.TagName("COL");
goog.dom.TagName.COLGROUP = new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND = new goog.dom.TagName("COMMAND");
goog.dom.TagName.DATA = new goog.dom.TagName("DATA");
goog.dom.TagName.DATALIST = new goog.dom.TagName("DATALIST");
goog.dom.TagName.DD = new goog.dom.TagName("DD");
goog.dom.TagName.DEL = new goog.dom.TagName("DEL");
goog.dom.TagName.DETAILS = new goog.dom.TagName("DETAILS");
goog.dom.TagName.DFN = new goog.dom.TagName("DFN");
goog.dom.TagName.DIALOG = new goog.dom.TagName("DIALOG");
goog.dom.TagName.DIR = new goog.dom.TagName("DIR");
goog.dom.TagName.DIV = new goog.dom.TagName("DIV");
goog.dom.TagName.DL = new goog.dom.TagName("DL");
goog.dom.TagName.DT = new goog.dom.TagName("DT");
goog.dom.TagName.EM = new goog.dom.TagName("EM");
goog.dom.TagName.EMBED = new goog.dom.TagName("EMBED");
goog.dom.TagName.FIELDSET = new goog.dom.TagName("FIELDSET");
goog.dom.TagName.FIGCAPTION = new goog.dom.TagName("FIGCAPTION");
goog.dom.TagName.FIGURE = new goog.dom.TagName("FIGURE");
goog.dom.TagName.FONT = new goog.dom.TagName("FONT");
goog.dom.TagName.FOOTER = new goog.dom.TagName("FOOTER");
goog.dom.TagName.FORM = new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME = new goog.dom.TagName("FRAME");
goog.dom.TagName.FRAMESET = new goog.dom.TagName("FRAMESET");
goog.dom.TagName.H1 = new goog.dom.TagName("H1");
goog.dom.TagName.H2 = new goog.dom.TagName("H2");
goog.dom.TagName.H3 = new goog.dom.TagName("H3");
goog.dom.TagName.H4 = new goog.dom.TagName("H4");
goog.dom.TagName.H5 = new goog.dom.TagName("H5");
goog.dom.TagName.H6 = new goog.dom.TagName("H6");
goog.dom.TagName.HEAD = new goog.dom.TagName("HEAD");
goog.dom.TagName.HEADER = new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP = new goog.dom.TagName("HGROUP");
goog.dom.TagName.HR = new goog.dom.TagName("HR");
goog.dom.TagName.HTML = new goog.dom.TagName("HTML");
goog.dom.TagName.I = new goog.dom.TagName("I");
goog.dom.TagName.IFRAME = new goog.dom.TagName("IFRAME");
goog.dom.TagName.IMG = new goog.dom.TagName("IMG");
goog.dom.TagName.INPUT = new goog.dom.TagName("INPUT");
goog.dom.TagName.INS = new goog.dom.TagName("INS");
goog.dom.TagName.ISINDEX = new goog.dom.TagName("ISINDEX");
goog.dom.TagName.KBD = new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN = new goog.dom.TagName("KEYGEN");
goog.dom.TagName.LABEL = new goog.dom.TagName("LABEL");
goog.dom.TagName.LEGEND = new goog.dom.TagName("LEGEND");
goog.dom.TagName.LI = new goog.dom.TagName("LI");
goog.dom.TagName.LINK = new goog.dom.TagName("LINK");
goog.dom.TagName.MAIN = new goog.dom.TagName("MAIN");
goog.dom.TagName.MAP = new goog.dom.TagName("MAP");
goog.dom.TagName.MARK = new goog.dom.TagName("MARK");
goog.dom.TagName.MATH = new goog.dom.TagName("MATH");
goog.dom.TagName.MENU = new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM = new goog.dom.TagName("MENUITEM");
goog.dom.TagName.META = new goog.dom.TagName("META");
goog.dom.TagName.METER = new goog.dom.TagName("METER");
goog.dom.TagName.NAV = new goog.dom.TagName("NAV");
goog.dom.TagName.NOFRAMES = new goog.dom.TagName("NOFRAMES");
goog.dom.TagName.NOSCRIPT = new goog.dom.TagName("NOSCRIPT");
goog.dom.TagName.OBJECT = new goog.dom.TagName("OBJECT");
goog.dom.TagName.OL = new goog.dom.TagName("OL");
goog.dom.TagName.OPTGROUP = new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION = new goog.dom.TagName("OPTION");
goog.dom.TagName.OUTPUT = new goog.dom.TagName("OUTPUT");
goog.dom.TagName.P = new goog.dom.TagName("P");
goog.dom.TagName.PARAM = new goog.dom.TagName("PARAM");
goog.dom.TagName.PICTURE = new goog.dom.TagName("PICTURE");
goog.dom.TagName.PRE = new goog.dom.TagName("PRE");
goog.dom.TagName.PROGRESS = new goog.dom.TagName("PROGRESS");
goog.dom.TagName.Q = new goog.dom.TagName("Q");
goog.dom.TagName.RP = new goog.dom.TagName("RP");
goog.dom.TagName.RT = new goog.dom.TagName("RT");
goog.dom.TagName.RTC = new goog.dom.TagName("RTC");
goog.dom.TagName.RUBY = new goog.dom.TagName("RUBY");
goog.dom.TagName.S = new goog.dom.TagName("S");
goog.dom.TagName.SAMP = new goog.dom.TagName("SAMP");
goog.dom.TagName.SCRIPT = new goog.dom.TagName("SCRIPT");
goog.dom.TagName.SECTION = new goog.dom.TagName("SECTION");
goog.dom.TagName.SELECT = new goog.dom.TagName("SELECT");
goog.dom.TagName.SMALL = new goog.dom.TagName("SMALL");
goog.dom.TagName.SOURCE = new goog.dom.TagName("SOURCE");
goog.dom.TagName.SPAN = new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE = new goog.dom.TagName("STRIKE");
goog.dom.TagName.STRONG = new goog.dom.TagName("STRONG");
goog.dom.TagName.STYLE = new goog.dom.TagName("STYLE");
goog.dom.TagName.SUB = new goog.dom.TagName("SUB");
goog.dom.TagName.SUMMARY = new goog.dom.TagName("SUMMARY");
goog.dom.TagName.SUP = new goog.dom.TagName("SUP");
goog.dom.TagName.SVG = new goog.dom.TagName("SVG");
goog.dom.TagName.TABLE = new goog.dom.TagName("TABLE");
goog.dom.TagName.TBODY = new goog.dom.TagName("TBODY");
goog.dom.TagName.TD = new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE = new goog.dom.TagName("TEMPLATE");
goog.dom.TagName.TEXTAREA = new goog.dom.TagName("TEXTAREA");
goog.dom.TagName.TFOOT = new goog.dom.TagName("TFOOT");
goog.dom.TagName.TH = new goog.dom.TagName("TH");
goog.dom.TagName.THEAD = new goog.dom.TagName("THEAD");
goog.dom.TagName.TIME = new goog.dom.TagName("TIME");
goog.dom.TagName.TITLE = new goog.dom.TagName("TITLE");
goog.dom.TagName.TR = new goog.dom.TagName("TR");
goog.dom.TagName.TRACK = new goog.dom.TagName("TRACK");
goog.dom.TagName.TT = new goog.dom.TagName("TT");
goog.dom.TagName.U = new goog.dom.TagName("U");
goog.dom.TagName.UL = new goog.dom.TagName("UL");
goog.dom.TagName.VAR = new goog.dom.TagName("VAR");
goog.dom.TagName.VIDEO = new goog.dom.TagName("VIDEO");
goog.dom.TagName.WBR = new goog.dom.TagName("WBR");
goog.dom.tags = {};
goog.dom.tags.VOID_TAGS_ = {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    command: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
};
goog.dom.tags.isVoidTag = function(a) {
    return !0 === goog.dom.tags.VOID_TAGS_[a];
};
goog.html = {};
goog.html.trustedtypes = {};
goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY = goog.TRUSTED_TYPES_POLICY_NAME ? goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + "#html") : null;
goog.string = {};
goog.string.TypedString = function() {};
goog.string.Const = function(a, b) {
    this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = a === goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ && b || "";
    this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = !0;
goog.string.Const.prototype.getTypedStringValue = function() {
    return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.DEBUG && (goog.string.Const.prototype.toString = function() {
    return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
});
goog.string.Const.unwrap = function(a) {
    if (a instanceof goog.string.Const && a.constructor === goog.string.Const && a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
    goog.asserts.fail("expected object of type Const, got '" + a + "'");
    return "type_error:Const";
};
goog.string.Const.from = function(a) {
    return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, a);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.string.Const.EMPTY = goog.string.Const.from("");
goog.html.SafeScript = function() {
    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
    this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = !0;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(a) {
    a = goog.string.Const.unwrap(a);
    return 0 === a.length ? goog.html.SafeScript.EMPTY : goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeScript.fromConstantAndArgs = function(a, b) {
    for(var c = [], d = 1; d < arguments.length; d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));
    return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("(" + goog.string.Const.unwrap(a) + ")(" + c.join(", ") + ");");
};
goog.html.SafeScript.fromJson = function(a) {
    return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a));
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
};
goog.DEBUG && (goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
});
goog.html.SafeScript.unwrap = function(a) {
    return goog.html.SafeScript.unwrapTrustedScript(a).toString();
};
goog.html.SafeScript.unwrapTrustedScript = function(a) {
    if (a instanceof goog.html.SafeScript && a.constructor === goog.html.SafeScript && a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;
    goog.asserts.fail("expected object of type SafeScript, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:SafeScript";
};
goog.html.SafeScript.stringify_ = function(a) {
    return JSON.stringify(a).replace(/</g, "\\x3c");
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(a) {
    return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a) {
    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a) : a;
    return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.fs = {};
goog.fs.url = {};
goog.fs.url.createObjectUrl = function(a) {
    return goog.fs.url.getUrlObject_().createObjectURL(a);
};
goog.fs.url.revokeObjectUrl = function(a) {
    goog.fs.url.getUrlObject_().revokeObjectURL(a);
};
goog.fs.url.UrlObject_ = function() {};
goog.fs.url.UrlObject_.prototype.createObjectURL = function(a) {};
goog.fs.url.UrlObject_.prototype.revokeObjectURL = function(a) {};
goog.fs.url.getUrlObject_ = function() {
    var a = goog.fs.url.findUrlObject_();
    if (null != a) return a;
    throw Error("This browser doesn't seem to support blob URLs");
};
goog.fs.url.findUrlObject_ = function() {
    return void 0 !== goog.global.URL && void 0 !== goog.global.URL.createObjectURL ? goog.global.URL : void 0 !== goog.global.webkitURL && void 0 !== goog.global.webkitURL.createObjectURL ? goog.global.webkitURL : void 0 !== goog.global.createObjectURL ? goog.global : null;
};
goog.fs.url.browserSupportsObjectUrls = function() {
    return null != goog.fs.url.findUrlObject_();
};
goog.fs.blob = {};
goog.fs.blob.getBlob = function(a) {
    var b = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;
    if (void 0 !== b) {
        b = new b;
        for(var c = 0; c < arguments.length; c++)b.append(arguments[c]);
        return b.getBlob();
    }
    return goog.fs.blob.getBlobWithProperties(goog.array.toArray(arguments));
};
goog.fs.blob.getBlobWithProperties = function(a, b, c) {
    var d = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;
    if (void 0 !== d) {
        d = new d;
        for(var e = 0; e < a.length; e++)d.append(a[e], c);
        return d.getBlob(b);
    }
    if (void 0 !== goog.global.Blob) return d = {}, b && (d.type = b), c && (d.endings = c), new Blob(a, d);
    throw Error("This browser doesn't seem to support creating Blobs");
};
goog.i18n = {};
goog.i18n.bidi = {};
goog.i18n.bidi.FORCE_RTL = !1;
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || ("ar" == goog.LOCALE.substring(0, 2).toLowerCase() || "fa" == goog.LOCALE.substring(0, 2).toLowerCase() || "he" == goog.LOCALE.substring(0, 2).toLowerCase() || "iw" == goog.LOCALE.substring(0, 2).toLowerCase() || "ps" == goog.LOCALE.substring(0, 2).toLowerCase() || "sd" == goog.LOCALE.substring(0, 2).toLowerCase() || "ug" == goog.LOCALE.substring(0, 2).toLowerCase() || "ur" == goog.LOCALE.substring(0, 2).toLowerCase() || "yi" == goog.LOCALE.substring(0, 2).toLowerCase()) && (2 == goog.LOCALE.length || "-" == goog.LOCALE.substring(2, 3) || "_" == goog.LOCALE.substring(2, 3)) || 3 <= goog.LOCALE.length && "ckb" == goog.LOCALE.substring(0, 3).toLowerCase() && (3 == goog.LOCALE.length || "-" == goog.LOCALE.substring(3, 4) || "_" == goog.LOCALE.substring(3, 4)) || 7 <= goog.LOCALE.length && ("-" == goog.LOCALE.substring(2, 3) || "_" == goog.LOCALE.substring(2, 3)) && ("adlm" == goog.LOCALE.substring(3, 7).toLowerCase() || "arab" == goog.LOCALE.substring(3, 7).toLowerCase() || "hebr" == goog.LOCALE.substring(3, 7).toLowerCase() || "nkoo" == goog.LOCALE.substring(3, 7).toLowerCase() || "rohg" == goog.LOCALE.substring(3, 7).toLowerCase() || "thaa" == goog.LOCALE.substring(3, 7).toLowerCase()) || 8 <= goog.LOCALE.length && ("-" == goog.LOCALE.substring(3, 4) || "_" == goog.LOCALE.substring(3, 4)) && ("adlm" == goog.LOCALE.substring(4, 8).toLowerCase() || "arab" == goog.LOCALE.substring(4, 8).toLowerCase() || "hebr" == goog.LOCALE.substring(4, 8).toLowerCase() || "nkoo" == goog.LOCALE.substring(4, 8).toLowerCase() || "rohg" == goog.LOCALE.substring(4, 8).toLowerCase() || "thaa" == goog.LOCALE.substring(4, 8).toLowerCase());
goog.i18n.bidi.Format = {
    LRE: "\u202A",
    RLE: "\u202B",
    PDF: "\u202C",
    LRM: "\u200E",
    RLM: "\u200F"
};
goog.i18n.bidi.Dir = {
    LTR: 1,
    RTL: -1,
    NEUTRAL: 0
};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(a, b) {
    return "number" == typeof a ? 0 < a ? goog.i18n.bidi.Dir.LTR : 0 > a ? goog.i18n.bidi.Dir.RTL : b ? null : goog.i18n.bidi.Dir.NEUTRAL : null == a ? null : a ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02B8\u0300-\u0590\u0900-\u1FFF\u200E\u2C00-\ud801\ud804-\ud839\ud83c-\udbff\uF900-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
goog.i18n.bidi.rtlChars_ = "\u0591-\u06EF\u06FA-\u08FF\u200F\ud802-\ud803\ud83a-\ud83b\uFB1D-\uFDFF\uFE70-\uFEFC";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(a, b) {
    return b ? a.replace(goog.i18n.bidi.htmlSkipReg_, "") : a;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(a, b) {
    return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(a, b) {
    return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(a) {
    return goog.i18n.bidi.rtlRe_.test(a);
};
goog.i18n.bidi.isLtrChar = function(a) {
    return goog.i18n.bidi.ltrRe_.test(a);
};
goog.i18n.bidi.isNeutralChar = function(a) {
    return !goog.i18n.bidi.isLtrChar(a) && !goog.i18n.bidi.isRtlChar(a);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(a, b) {
    return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(a, b) {
    return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(a, b) {
    a = goog.i18n.bidi.stripHtmlIfNeeded_(a, b);
    return goog.i18n.bidi.isRequiredLtrRe_.test(a) || !goog.i18n.bidi.hasAnyLtr(a) && !goog.i18n.bidi.hasAnyRtl(a);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(a, b) {
    return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(a, b) {
    return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a, b));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
goog.i18n.bidi.isRtlLanguage = function(a) {
    return goog.i18n.bidi.rtlLocalesRe_.test(a);
};
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText = function(a, b) {
    b = (void 0 === b ? goog.i18n.bidi.hasAnyRtl(a) : b) ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
    return a.replace(goog.i18n.bidi.bracketGuardTextRe_, b + "$&" + b);
};
goog.i18n.bidi.enforceRtlInHtml = function(a) {
    return "<" == a.charAt(0) ? a.replace(/<\w+/, "$& dir=rtl") : "\n<span dir=rtl>" + a + "</span>";
};
goog.i18n.bidi.enforceRtlInText = function(a) {
    return goog.i18n.bidi.Format.RLE + a + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(a) {
    return "<" == a.charAt(0) ? a.replace(/<\w+/, "$& dir=ltr") : "\n<span dir=ltr>" + a + "</span>";
};
goog.i18n.bidi.enforceLtrInText = function(a) {
    return goog.i18n.bidi.Format.LRE + a + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(a) {
    return a.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(a) {
    return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05F4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05F3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(a, b) {
    var c = 0, d = 0, e = !1;
    a = goog.i18n.bidi.stripHtmlIfNeeded_(a, b).split(goog.i18n.bidi.wordSeparatorRe_);
    for(b = 0; b < a.length; b++){
        var f = a[b];
        goog.i18n.bidi.startsWithRtl(f) ? (c++, d++) : goog.i18n.bidi.isRequiredLtrRe_.test(f) ? e = !0 : goog.i18n.bidi.hasAnyLtr(f) ? d++ : goog.i18n.bidi.hasNumeralsRe_.test(f) && (e = !0);
    }
    return 0 == d ? e ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : c / d > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(a, b) {
    return goog.i18n.bidi.estimateDirection(a, b) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(a, b) {
    a && (b = goog.i18n.bidi.toDir(b)) && (a.style.textAlign = b == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT, a.dir = b == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr");
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(a, b) {
    switch(goog.i18n.bidi.estimateDirection(b)){
        case goog.i18n.bidi.Dir.LTR:
            a.dir = "ltr";
            break;
        case goog.i18n.bidi.Dir.RTL:
            a.dir = "rtl";
            break;
        default:
            a.removeAttribute("dir");
    }
};
goog.i18n.bidi.DirectionalString = function() {};
goog.html.TrustedResourceUrl = function(a, b) {
    this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = a === goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ && b || "";
    this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = !0;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString();
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = !0;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
    return goog.i18n.bidi.Dir.LTR;
};
goog.html.TrustedResourceUrl.prototype.cloneWithParams = function(a, b) {
    var c = goog.html.TrustedResourceUrl.unwrap(this);
    c = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);
    var d = c[3] || "";
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1] + goog.html.TrustedResourceUrl.stringifyParams_("?", c[2] || "", a) + goog.html.TrustedResourceUrl.stringifyParams_("#", d, b));
};
goog.DEBUG && (goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
});
goog.html.TrustedResourceUrl.unwrap = function(a) {
    return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString();
};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(a) {
    if (a instanceof goog.html.TrustedResourceUrl && a.constructor === goog.html.TrustedResourceUrl && a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:TrustedResourceUrl";
};
goog.html.TrustedResourceUrl.format = function(a, b) {
    var c = goog.string.Const.unwrap(a);
    if (!goog.html.TrustedResourceUrl.BASE_URL_.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
    a = c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(a, e) {
        if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
        a = b[e];
        return a instanceof goog.string.Const ? goog.string.Const.unwrap(a) : encodeURIComponent(String(a));
    });
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;
goog.html.TrustedResourceUrl.BASE_URL_ = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;
goog.html.TrustedResourceUrl.URL_PARAM_PARSER_ = /^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams = function(a, b, c, d) {
    return goog.html.TrustedResourceUrl.format(a, b).cloneWithParams(c, d);
};
goog.html.TrustedResourceUrl.fromConstant = function(a) {
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a));
};
goog.html.TrustedResourceUrl.fromConstants = function(a) {
    for(var b = "", c = 0; c < a.length; c++)b += goog.string.Const.unwrap(a[c]);
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.TrustedResourceUrl.fromSafeScript = function(a) {
    a = goog.fs.blob.getBlobWithProperties([
        goog.html.SafeScript.unwrap(a)
    ], "text/javascript");
    a = goog.fs.url.createObjectUrl(a);
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(a) {
    a = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a) : a;
    return new goog.html.TrustedResourceUrl(goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_, a);
};
goog.html.TrustedResourceUrl.stringifyParams_ = function(a, b, c) {
    if (null == c) return b;
    if ("string" === typeof c) return c ? a + encodeURIComponent(c) : "";
    for(var d in c){
        var e = c[d];
        e = Array.isArray(e) ? e : [
            e
        ];
        for(var f = 0; f < e.length; f++){
            var g = e[f];
            null != g && (b || (b = a), b += (b.length > a.length ? "&" : "") + encodeURIComponent(d) + "=" + encodeURIComponent(String(g)));
        }
    }
    return b;
};
goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.string.internal = {};
goog.string.internal.startsWith = function(a, b) {
    return 0 == a.lastIndexOf(b, 0);
};
goog.string.internal.endsWith = function(a, b) {
    var c = a.length - b.length;
    return 0 <= c && a.indexOf(b, c) == c;
};
goog.string.internal.caseInsensitiveStartsWith = function(a, b) {
    return 0 == goog.string.internal.caseInsensitiveCompare(b, a.substr(0, b.length));
};
goog.string.internal.caseInsensitiveEndsWith = function(a, b) {
    return 0 == goog.string.internal.caseInsensitiveCompare(b, a.substr(a.length - b.length, b.length));
};
goog.string.internal.caseInsensitiveEquals = function(a, b) {
    return a.toLowerCase() == b.toLowerCase();
};
goog.string.internal.isEmptyOrWhitespace = function(a) {
    return /^[\s\xa0]*$/.test(a);
};
goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(a) {
    return a.trim();
} : function(a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
goog.string.internal.caseInsensitiveCompare = function(a, b) {
    a = String(a).toLowerCase();
    b = String(b).toLowerCase();
    return a < b ? -1 : a == b ? 0 : 1;
};
goog.string.internal.newLineToBr = function(a, b) {
    return a.replace(/(\r\n|\r|\n)/g, b ? "<br />" : "<br>");
};
goog.string.internal.htmlEscape = function(a, b) {
    if (b) a = a.replace(goog.string.internal.AMP_RE_, "&amp;").replace(goog.string.internal.LT_RE_, "&lt;").replace(goog.string.internal.GT_RE_, "&gt;").replace(goog.string.internal.QUOT_RE_, "&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.internal.NULL_RE_, "&#0;");
    else {
        if (!goog.string.internal.ALL_RE_.test(a)) return a;
        -1 != a.indexOf("&") && (a = a.replace(goog.string.internal.AMP_RE_, "&amp;"));
        -1 != a.indexOf("<") && (a = a.replace(goog.string.internal.LT_RE_, "&lt;"));
        -1 != a.indexOf(">") && (a = a.replace(goog.string.internal.GT_RE_, "&gt;"));
        -1 != a.indexOf('"') && (a = a.replace(goog.string.internal.QUOT_RE_, "&quot;"));
        -1 != a.indexOf("'") && (a = a.replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;"));
        -1 != a.indexOf("\0") && (a = a.replace(goog.string.internal.NULL_RE_, "&#0;"));
    }
    return a;
};
goog.string.internal.AMP_RE_ = /&/g;
goog.string.internal.LT_RE_ = /</g;
goog.string.internal.GT_RE_ = />/g;
goog.string.internal.QUOT_RE_ = /"/g;
goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
goog.string.internal.NULL_RE_ = /\x00/g;
goog.string.internal.ALL_RE_ = /[\x00&<>"']/;
goog.string.internal.whitespaceEscape = function(a, b) {
    return goog.string.internal.newLineToBr(a.replace(/  /g, " &#160;"), b);
};
goog.string.internal.contains = function(a, b) {
    return -1 != a.indexOf(b);
};
goog.string.internal.caseInsensitiveContains = function(a, b) {
    return goog.string.internal.contains(a.toLowerCase(), b.toLowerCase());
};
goog.string.internal.compareVersions = function(a, b) {
    var c = 0;
    a = goog.string.internal.trim(String(a)).split(".");
    b = goog.string.internal.trim(String(b)).split(".");
    for(var d = Math.max(a.length, b.length), e = 0; 0 == c && e < d; e++){
        var f = a[e] || "", g = b[e] || "";
        do {
            f = /(\d*)(\D*)(.*)/.exec(f) || [
                "",
                "",
                "",
                ""
            ];
            g = /(\d*)(\D*)(.*)/.exec(g) || [
                "",
                "",
                "",
                ""
            ];
            if (0 == f[0].length && 0 == g[0].length) break;
            c = 0 == f[1].length ? 0 : parseInt(f[1], 10);
            var h = 0 == g[1].length ? 0 : parseInt(g[1], 10);
            c = goog.string.internal.compareElements_(c, h) || goog.string.internal.compareElements_(0 == f[2].length, 0 == g[2].length) || goog.string.internal.compareElements_(f[2], g[2]);
            f = f[3];
            g = g[3];
        }while (0 == c);
    }
    return c;
};
goog.string.internal.compareElements_ = function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
};
goog.html.SafeUrl = function(a, b) {
    this.privateDoNotAccessOrElseSafeUrlWrappedValue_ = a === goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ && b || "";
    this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = !0;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = !0;
goog.html.SafeUrl.prototype.getDirection = function() {
    return goog.i18n.bidi.Dir.LTR;
};
goog.DEBUG && (goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeUrlWrappedValue_ + "}";
});
goog.html.SafeUrl.unwrap = function(a) {
    if (a instanceof goog.html.SafeUrl && a.constructor === goog.html.SafeUrl && a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;
    goog.asserts.fail("expected object of type SafeUrl, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:SafeUrl";
};
goog.html.SafeUrl.fromConstant = function(a) {
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i;
goog.html.SafeUrl.isSafeMimeType = function(a) {
    return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a);
};
goog.html.SafeUrl.fromBlob = function(a) {
    a = goog.html.SafeUrl.isSafeMimeType(a.type) ? goog.fs.url.createObjectUrl(a) : goog.html.SafeUrl.INNOCUOUS_STRING;
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.fromMediaSource = function(a) {
    goog.asserts.assert("MediaSource" in goog.global, "No support for MediaSource");
    a = a instanceof MediaSource ? goog.fs.url.createObjectUrl(a) : goog.html.SafeUrl.INNOCUOUS_STRING;
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.DATA_URL_PATTERN_ = /^data:(.*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(a) {
    a = a.replace(/(%0A|%0D)/g, "");
    var b = a.match(goog.html.DATA_URL_PATTERN_);
    b = b && goog.html.SafeUrl.isSafeMimeType(b[1]);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b ? a : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SafeUrl.fromTelUrl = function(a) {
    goog.string.internal.caseInsensitiveStartsWith(a, "tel:") || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SIP_URL_PATTERN_ = /^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;
goog.html.SafeUrl.fromSipUrl = function(a) {
    goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a)) || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.fromFacebookMessengerUrl = function(a) {
    goog.string.internal.caseInsensitiveStartsWith(a, "fb-messenger://share") || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.fromWhatsAppUrl = function(a) {
    goog.string.internal.caseInsensitiveStartsWith(a, "whatsapp://send") || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.fromSmsUrl = function(a) {
    goog.string.internal.caseInsensitiveStartsWith(a, "sms:") && goog.html.SafeUrl.isSmsUrlBodyValid_(a) || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.isSmsUrlBodyValid_ = function(a) {
    var b = a.indexOf("#");
    0 < b && (a = a.substring(0, b));
    b = a.match(/[?&]body=/gi);
    if (!b) return !0;
    if (1 < b.length) return !1;
    a = a.match(/[?&]body=([^&]*)/)[1];
    if (!a) return !0;
    try {
        decodeURIComponent(a);
    } catch (c) {
        return !1;
    }
    return /^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a);
};
goog.html.SafeUrl.fromSshUrl = function(a) {
    goog.string.internal.caseInsensitiveStartsWith(a, "ssh://") || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.sanitizeChromeExtensionUrl = function(a, b) {
    return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//, a, b);
};
goog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(a, b) {
    return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//, a, b);
};
goog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(a, b) {
    return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//, a, b);
};
goog.html.SafeUrl.sanitizeExtensionUrl_ = function(a, b, c) {
    (a = a.exec(b)) ? (a = a[1], -1 == (c instanceof goog.string.Const ? [
        goog.string.Const.unwrap(c)
    ] : c.map(function(a) {
        return goog.string.Const.unwrap(a);
    })).indexOf(a) && (b = goog.html.SafeUrl.INNOCUOUS_STRING)) : b = goog.html.SafeUrl.INNOCUOUS_STRING;
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.SafeUrl.fromTrustedResourceUrl = function(a) {
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;
goog.html.SafeUrl.sanitize = function(a) {
    if (a instanceof goog.html.SafeUrl) return a;
    a = "object" == typeof a && a.implementsGoogStringTypedString ? a.getTypedStringValue() : String(a);
    goog.html.SAFE_URL_PATTERN_.test(a) || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.sanitizeAssertUnchanged = function(a, b) {
    if (a instanceof goog.html.SafeUrl) return a;
    a = "object" == typeof a && a.implementsGoogStringTypedString ? a.getTypedStringValue() : String(a);
    if (b && /^data:/i.test(a) && (b = goog.html.SafeUrl.fromDataUrl(a), b.getTypedStringValue() == a)) return b;
    goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a), "%s does not match the safe URL pattern", a) || (a = goog.html.SafeUrl.INNOCUOUS_STRING);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(a) {
    return new goog.html.SafeUrl(goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_, a);
};
goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};
goog.html.SafeStyle = function() {
    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
    this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = !0;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(a) {
    a = goog.string.Const.unwrap(a);
    if (0 === a.length) return goog.html.SafeStyle.EMPTY;
    goog.asserts.assert(goog.string.internal.endsWith(a, ";"), "Last character of style string is not ';': " + a);
    goog.asserts.assert(goog.string.internal.contains(a, ":"), "Style string must contain at least one ':', to specify a \"name: value\" pair: " + a);
    return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
goog.DEBUG && (goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
});
goog.html.SafeStyle.unwrap = function(a) {
    if (a instanceof goog.html.SafeStyle && a.constructor === goog.html.SafeStyle && a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;
    goog.asserts.fail("expected object of type SafeStyle, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:SafeStyle";
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(a) {
    return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a) {
    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = a;
    return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.create = function(a) {
    var b = "", c;
    for(c in a){
        if (!/^[-_a-zA-Z0-9]+$/.test(c)) throw Error("Name allows only [-_a-zA-Z0-9], got: " + c);
        var d = a[c];
        null != d && (d = Array.isArray(d) ? goog.array.map(d, goog.html.SafeStyle.sanitizePropertyValue_).join(" ") : goog.html.SafeStyle.sanitizePropertyValue_(d), b += c + ":" + d + ";");
    }
    return b ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b) : goog.html.SafeStyle.EMPTY;
};
goog.html.SafeStyle.sanitizePropertyValue_ = function(a) {
    if (a instanceof goog.html.SafeUrl) return 'url("' + goog.html.SafeUrl.unwrap(a).replace(/</g, "%3c").replace(/[\\"]/g, "\\$&") + '")';
    a = a instanceof goog.string.Const ? goog.string.Const.unwrap(a) : goog.html.SafeStyle.sanitizePropertyValueString_(String(a));
    if (/[{;}]/.test(a)) throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.", [
        a
    ]);
    return a;
};
goog.html.SafeStyle.sanitizePropertyValueString_ = function(a) {
    var b = a.replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_, "$1").replace(goog.html.SafeStyle.URL_RE_, "url");
    if (goog.html.SafeStyle.VALUE_RE_.test(b)) {
        if (goog.html.SafeStyle.COMMENT_RE_.test(a)) return goog.asserts.fail("String value disallows comments, got: " + a), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedQuotes_(a)) return goog.asserts.fail("String value requires balanced quotes, got: " + a), goog.html.SafeStyle.INNOCUOUS_STRING;
        if (!goog.html.SafeStyle.hasBalancedSquareBrackets_(a)) return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: " + a), goog.html.SafeStyle.INNOCUOUS_STRING;
    } else return goog.asserts.fail("String value allows only " + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + " and simple functions, got: " + a), goog.html.SafeStyle.INNOCUOUS_STRING;
    return goog.html.SafeStyle.sanitizeUrl_(a);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(a) {
    for(var b = !0, c = !0, d = 0; d < a.length; d++){
        var e = a.charAt(d);
        "'" == e && c ? b = !b : '"' == e && b && (c = !c);
    }
    return b && c;
};
goog.html.SafeStyle.hasBalancedSquareBrackets_ = function(a) {
    for(var b = !0, c = /^[-_a-zA-Z0-9]$/, d = 0; d < a.length; d++){
        var e = a.charAt(d);
        if ("]" == e) {
            if (b) return !1;
            b = !0;
        } else if ("[" == e) {
            if (!b) return !1;
            b = !1;
        } else if (!b && !c.test(e)) return !1;
    }
    return b;
};
goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = "[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_ = new RegExp("^" + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + "+$");
goog.html.SafeStyle.URL_RE_ = /\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;
goog.html.SafeStyle.ALLOWED_FUNCTIONS_ = "calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)?".split(" ");
goog.html.SafeStyle.FUNCTIONS_RE_ = new RegExp("\\b(" + goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join("|") + ")\\([-+*/0-9a-z.%\\[\\], ]+\\)", "g");
goog.html.SafeStyle.COMMENT_RE_ = /\/\*/;
goog.html.SafeStyle.sanitizeUrl_ = function(a) {
    return a.replace(goog.html.SafeStyle.URL_RE_, function(a, c, d, e) {
        var b = "";
        d = d.replace(/^(['"])(.*)\1$/, function(a, c, d) {
            b = c;
            return d;
        });
        a = goog.html.SafeUrl.sanitize(d).getTypedStringValue();
        return c + b + a + b + e;
    });
};
goog.html.SafeStyle.concat = function(a) {
    var b = "", c = function(a) {
        Array.isArray(a) ? goog.array.forEach(a, c) : b += goog.html.SafeStyle.unwrap(a);
    };
    goog.array.forEach(arguments, c);
    return b ? goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b) : goog.html.SafeStyle.EMPTY;
};
goog.html.SafeStyleSheet = function() {
    this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
    this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = !0;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.createRule = function(a, b) {
    if (goog.string.internal.contains(a, "<")) throw Error("Selector does not allow '<', got: " + a);
    var c = a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, "");
    if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c)) throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: " + a);
    if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(c)) throw Error("() and [] in selector must be balanced, got: " + a);
    b instanceof goog.html.SafeStyle || (b = goog.html.SafeStyle.create(b));
    a = a + "{" + goog.html.SafeStyle.unwrap(b).replace(/</g, "\\3C ") + "}";
    return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeStyleSheet.hasBalancedBrackets_ = function(a) {
    for(var b = {
        "(": ")",
        "[": "]"
    }, c = [], d = 0; d < a.length; d++){
        var e = a[d];
        if (b[e]) c.push(b[e]);
        else if (goog.object.contains(b, e) && c.pop() != e) return !1;
    }
    return 0 == c.length;
};
goog.html.SafeStyleSheet.concat = function(a) {
    var b = "", c = function(a) {
        Array.isArray(a) ? goog.array.forEach(a, c) : b += goog.html.SafeStyleSheet.unwrap(a);
    };
    goog.array.forEach(arguments, c);
    return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.SafeStyleSheet.fromConstant = function(a) {
    a = goog.string.Const.unwrap(a);
    if (0 === a.length) return goog.html.SafeStyleSheet.EMPTY;
    goog.asserts.assert(!goog.string.internal.contains(a, "<"), "Forbidden '<' character in style sheet string: " + a);
    return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
goog.DEBUG && (goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
});
goog.html.SafeStyleSheet.unwrap = function(a) {
    if (a instanceof goog.html.SafeStyleSheet && a.constructor === goog.html.SafeStyleSheet && a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:SafeStyleSheet";
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(a) {
    return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a) {
    this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = a;
    return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.labs = {};
goog.labs.userAgent = {};
goog.labs.userAgent.util = {};
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
    var a = goog.labs.userAgent.util.getNavigator_();
    return a && (a = a.userAgent) ? a : "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
    return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(a) {
    goog.labs.userAgent.util.userAgent_ = a || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
    return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(a) {
    var b = goog.labs.userAgent.util.getUserAgent();
    return goog.string.internal.contains(b, a);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(a) {
    var b = goog.labs.userAgent.util.getUserAgent();
    return goog.string.internal.caseInsensitiveContains(b, a);
};
goog.labs.userAgent.util.extractVersionTuples = function(a) {
    for(var b = /(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g, c = [], d; d = b.exec(a);)c.push([
        d[1],
        d[2],
        d[3] || void 0
    ]);
    return c;
};
goog.labs.userAgent.browser = {};
goog.labs.userAgent.browser.matchOpera_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Opera");
};
goog.labs.userAgent.browser.matchIE_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdgeHtml_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchEdgeChromium_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Edg/");
};
goog.labs.userAgent.browser.matchOperaChromium_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Firefox") || goog.labs.userAgent.util.matchUserAgent("FxiOS");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdgeHtml_() || goog.labs.userAgent.browser.matchEdgeChromium_() || goog.labs.userAgent.browser.matchOperaChromium_() || goog.labs.userAgent.browser.matchFirefox_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
    return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && !goog.labs.userAgent.browser.matchFirefox_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
    return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdgeHtml_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
    return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdgeHtml_;
goog.labs.userAgent.browser.isEdgeChromium = goog.labs.userAgent.browser.matchEdgeChromium_;
goog.labs.userAgent.browser.isOperaChromium = goog.labs.userAgent.browser.matchOperaChromium_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
    return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
    function a(a) {
        a = goog.array.find(a, d);
        return c[a] || "";
    }
    var b = goog.labs.userAgent.util.getUserAgent();
    if (goog.labs.userAgent.browser.isIE()) return goog.labs.userAgent.browser.getIEVersion_(b);
    b = goog.labs.userAgent.util.extractVersionTuples(b);
    var c = {};
    goog.array.forEach(b, function(a) {
        c[a[0]] = a[1];
    });
    var d = goog.partial(goog.object.containsKey, c);
    return goog.labs.userAgent.browser.isOpera() ? a([
        "Version",
        "Opera"
    ]) : goog.labs.userAgent.browser.isEdge() ? a([
        "Edge"
    ]) : goog.labs.userAgent.browser.isEdgeChromium() ? a([
        "Edg"
    ]) : goog.labs.userAgent.browser.isChrome() ? a([
        "Chrome",
        "CriOS",
        "HeadlessChrome"
    ]) : (b = b[2]) && b[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(a) {
    return 0 <= goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(), a);
};
goog.labs.userAgent.browser.getIEVersion_ = function(a) {
    var b = /rv: *([\d\.]*)/.exec(a);
    if (b && b[1]) return b[1];
    b = "";
    var c = /MSIE +([\d\.]+)/.exec(a);
    if (c && c[1]) {
        if (a = /Trident\/(\d.\d)/.exec(a), "7.0" == c[1]) {
            if (a && a[1]) switch(a[1]){
                case "4.0":
                    b = "8.0";
                    break;
                case "5.0":
                    b = "9.0";
                    break;
                case "6.0":
                    b = "10.0";
                    break;
                case "7.0":
                    b = "11.0";
            }
            else b = "7.0";
        } else b = c[1];
    }
    return b;
};
goog.html.SafeHtml = function() {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
    this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    this.dir_ = null;
};
goog.html.SafeHtml.ENABLE_ERROR_MESSAGES = goog.DEBUG;
goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE = !0;
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = !0;
goog.html.SafeHtml.prototype.getDirection = function() {
    return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = !0;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
};
goog.DEBUG && (goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
});
goog.html.SafeHtml.unwrap = function(a) {
    return goog.html.SafeHtml.unwrapTrustedHTML(a).toString();
};
goog.html.SafeHtml.unwrapTrustedHTML = function(a) {
    if (a instanceof goog.html.SafeHtml && a.constructor === goog.html.SafeHtml && a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
    goog.asserts.fail("expected object of type SafeHtml, got '" + a + "' of type " + goog.typeOf(a));
    return "type_error:SafeHtml";
};
goog.html.SafeHtml.htmlEscape = function(a) {
    if (a instanceof goog.html.SafeHtml) return a;
    var b = "object" == typeof a, c = null;
    b && a.implementsGoogI18nBidiDirectionalString && (c = a.getDirection());
    a = b && a.implementsGoogStringTypedString ? a.getTypedStringValue() : String(a);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a), c);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(a) {
    if (a instanceof goog.html.SafeHtml) return a;
    a = goog.html.SafeHtml.htmlEscape(a);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)), a.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(a) {
    if (a instanceof goog.html.SafeHtml) return a;
    a = goog.html.SafeHtml.htmlEscape(a);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)), a.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.comment = function(a) {
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!--" + goog.string.internal.htmlEscape(a) + "-->", null);
};
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = {
    action: !0,
    cite: !0,
    data: !0,
    formaction: !0,
    href: !0,
    manifest: !0,
    poster: !0,
    src: !0
};
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = {
    APPLET: !0,
    BASE: !0,
    EMBED: !0,
    IFRAME: !0,
    LINK: !0,
    MATH: !0,
    META: !0,
    OBJECT: !0,
    SCRIPT: !0,
    STYLE: !0,
    SVG: !0,
    TEMPLATE: !0
};
goog.html.SafeHtml.create = function(a, b, c) {
    goog.html.SafeHtml.verifyTagName(String(a));
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a), b, c);
};
goog.html.SafeHtml.verifyTagName = function(a) {
    if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a)) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "Invalid tag name <" + a + ">." : "");
    if (a.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "Tag name <" + a + "> is not allowed for SafeHtml." : "");
};
goog.html.SafeHtml.createIframe = function(a, b, c, d) {
    a && goog.html.TrustedResourceUrl.unwrap(a);
    var e = {};
    e.src = a || null;
    e.srcdoc = b && goog.html.SafeHtml.unwrap(b);
    a = goog.html.SafeHtml.combineAttributes(e, {
        sandbox: ""
    }, c);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a, d);
};
goog.html.SafeHtml.createSandboxIframe = function(a, b, c, d) {
    if (!goog.html.SafeHtml.canUseSandboxIframe()) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? "The browser does not support sandboxed iframes." : "");
    var e = {};
    e.src = a ? goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)) : null;
    e.srcdoc = b || null;
    e.sandbox = "";
    a = goog.html.SafeHtml.combineAttributes(e, {}, c);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", a, d);
};
goog.html.SafeHtml.canUseSandboxIframe = function() {
    return goog.global.HTMLIFrameElement && "sandbox" in goog.global.HTMLIFrameElement.prototype;
};
goog.html.SafeHtml.createScriptSrc = function(a, b) {
    goog.html.TrustedResourceUrl.unwrap(a);
    a = goog.html.SafeHtml.combineAttributes({
        src: a
    }, {}, b);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", a);
};
goog.html.SafeHtml.createScript = function(a, b) {
    for(var c in b){
        var d = c.toLowerCase();
        if ("language" == d || "src" == d || "text" == d || "type" == d) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Cannot set "' + d + '" attribute' : "");
    }
    c = "";
    a = goog.array.concat(a);
    for(d = 0; d < a.length; d++)c += goog.html.SafeScript.unwrap(a[d]);
    a = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c, goog.i18n.bidi.Dir.NEUTRAL);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", b, a);
};
goog.html.SafeHtml.createStyle = function(a, b) {
    b = goog.html.SafeHtml.combineAttributes({
        type: "text/css"
    }, {}, b);
    var c = "";
    a = goog.array.concat(a);
    for(var d = 0; d < a.length; d++)c += goog.html.SafeStyleSheet.unwrap(a[d]);
    a = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c, goog.i18n.bidi.Dir.NEUTRAL);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", b, a);
};
goog.html.SafeHtml.createMetaRefresh = function(a, b) {
    a = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));
    (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) && goog.string.internal.contains(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'");
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", {
        "http-equiv": "refresh",
        content: (b || 0) + "; url=" + a
    });
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(a, b, c) {
    if (c instanceof goog.string.Const) c = goog.string.Const.unwrap(c);
    else if ("style" == b.toLowerCase()) {
        if (goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE) c = goog.html.SafeHtml.getStyleValue_(c);
        else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "style" not supported.' : "");
    } else {
        if (/^on/i.test(b)) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "' + b + '" requires goog.string.Const value, "' + c + '" given.' : "");
        if (b.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
            if (c instanceof goog.html.TrustedResourceUrl) c = goog.html.TrustedResourceUrl.unwrap(c);
            else if (c instanceof goog.html.SafeUrl) c = goog.html.SafeUrl.unwrap(c);
            else if ("string" === typeof c) c = goog.html.SafeUrl.sanitize(c).getTypedStringValue();
            else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "' + b + '" on tag "' + a + '" requires goog.html.SafeUrl, goog.string.Const, or string, value "' + c + '" given.' : "");
        }
    }
    c.implementsGoogStringTypedString && (c = c.getTypedStringValue());
    goog.asserts.assert("string" === typeof c || "number" === typeof c, "String or number value expected, got " + typeof c + " with value: " + c);
    return b + '="' + goog.string.internal.htmlEscape(String(c)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(a) {
    if (!goog.isObject(a)) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'The "style" attribute requires goog.html.SafeStyle or map of style properties, ' + typeof a + " given: " + a : "");
    a instanceof goog.html.SafeStyle || (a = goog.html.SafeStyle.create(a));
    return goog.html.SafeStyle.unwrap(a);
};
goog.html.SafeHtml.createWithDir = function(a, b, c, d) {
    b = goog.html.SafeHtml.create(b, c, d);
    b.dir_ = a;
    return b;
};
goog.html.SafeHtml.join = function(a, b) {
    a = goog.html.SafeHtml.htmlEscape(a);
    var c = a.getDirection(), d = [], e = function(a) {
        Array.isArray(a) ? goog.array.forEach(a, e) : (a = goog.html.SafeHtml.htmlEscape(a), d.push(goog.html.SafeHtml.unwrap(a)), a = a.getDirection(), c == goog.i18n.bidi.Dir.NEUTRAL ? c = a : a != goog.i18n.bidi.Dir.NEUTRAL && c != a && (c = null));
    };
    goog.array.forEach(b, e);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)), c);
};
goog.html.SafeHtml.concat = function(a) {
    return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY, Array.prototype.slice.call(arguments));
};
goog.html.SafeHtml.concatWithDir = function(a, b) {
    var c = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
    c.dir_ = a;
    return c;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(a, b) {
    return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a, b);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(a, b) {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY ? goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a) : a;
    this.dir_ = b;
    return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(a, b, c) {
    var d = null;
    var e = "<" + a + goog.html.SafeHtml.stringifyAttributes(a, b);
    null == c ? c = [] : Array.isArray(c) || (c = [
        c
    ]);
    goog.dom.tags.isVoidTag(a.toLowerCase()) ? (goog.asserts.assert(!c.length, "Void tag <" + a + "> does not allow content."), e += ">") : (d = goog.html.SafeHtml.concat(c), e += ">" + goog.html.SafeHtml.unwrap(d) + "</" + a + ">", d = d.getDirection());
    (a = b && b.dir) && (d = /^(ltr|rtl|auto)$/i.test(a) ? goog.i18n.bidi.Dir.NEUTRAL : null);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e, d);
};
goog.html.SafeHtml.stringifyAttributes = function(a, b) {
    var c = "";
    if (b) for(var d in b){
        if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d)) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Invalid attribute name "' + d + '".' : "");
        var e = b[d];
        null != e && (c += " " + goog.html.SafeHtml.getAttrNameAndValue_(a, d, e));
    }
    return c;
};
goog.html.SafeHtml.combineAttributes = function(a, b, c) {
    var d = {}, e;
    for(e in a)goog.asserts.assert(e.toLowerCase() == e, "Must be lower case"), d[e] = a[e];
    for(e in b)goog.asserts.assert(e.toLowerCase() == e, "Must be lower case"), d[e] = b[e];
    if (c) for(e in c){
        var f = e.toLowerCase();
        if (f in a) throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES ? 'Cannot override "' + f + '" attribute, got "' + e + '" with value "' + c[e] + '"' : "");
        f in b && delete d[f];
        d[e] = c[e];
    }
    return d;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.uncheckedconversions = {};
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(a, b, c) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b, c || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(a, b) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(a, b) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(a, b) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(a, b) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(a, b) {
    goog.asserts.assertString(goog.string.Const.unwrap(a), "must provide justification");
    goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)), "must provide non-empty justification");
    return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b);
};
goog.dom.safe = {};
goog.dom.safe.InsertAdjacentHtmlPosition = {
    AFTERBEGIN: "afterbegin",
    AFTEREND: "afterend",
    BEFOREBEGIN: "beforebegin",
    BEFOREEND: "beforeend"
};
goog.dom.safe.insertAdjacentHtml = function(a, b, c) {
    a.insertAdjacentHTML(b, goog.html.SafeHtml.unwrapTrustedHTML(c));
};
goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {
    MATH: !0,
    SCRIPT: !0,
    STYLE: !0,
    SVG: !0,
    TEMPLATE: !0
};
goog.dom.safe.isInnerHtmlCleanupRecursive_ = goog.functions.cacheReturnValue(function() {
    if (goog.DEBUG && "undefined" === typeof document) return !1;
    var a = document.createElement("div"), b = document.createElement("div");
    b.appendChild(document.createElement("div"));
    a.appendChild(b);
    if (goog.DEBUG && !a.firstChild) return !1;
    b = a.firstChild.firstChild;
    a.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);
    return !b.parentElement;
});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(a, b) {
    if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) for(; a.lastChild;)a.removeChild(a.lastChild);
    a.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b);
};
goog.dom.safe.setInnerHtml = function(a, b) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var c = a.tagName.toUpperCase();
        if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c]) throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of " + a.tagName + ".");
    }
    goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a, b);
};
goog.dom.safe.setOuterHtml = function(a, b) {
    a.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(b);
};
goog.dom.safe.setFormElementAction = function(a, b) {
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    goog.dom.asserts.assertIsHTMLFormElement(a).action = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setButtonFormAction = function(a, b) {
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    goog.dom.asserts.assertIsHTMLButtonElement(a).formAction = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setInputFormAction = function(a, b) {
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    goog.dom.asserts.assertIsHTMLInputElement(a).formAction = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setStyle = function(a, b) {
    a.style.cssText = goog.html.SafeStyle.unwrap(b);
};
goog.dom.safe.documentWrite = function(a, b) {
    a.write(goog.html.SafeHtml.unwrapTrustedHTML(b));
};
goog.dom.safe.setAnchorHref = function(a, b) {
    goog.dom.asserts.assertIsHTMLAnchorElement(a);
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    a.href = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setImageSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLImageElement(a);
    if (!(b instanceof goog.html.SafeUrl)) {
        var c = /^data:image\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c);
    }
    a.src = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setAudioSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLAudioElement(a);
    if (!(b instanceof goog.html.SafeUrl)) {
        var c = /^data:audio\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c);
    }
    a.src = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setVideoSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLVideoElement(a);
    if (!(b instanceof goog.html.SafeUrl)) {
        var c = /^data:video\//i.test(b);
        b = goog.html.SafeUrl.sanitizeAssertUnchanged(b, c);
    }
    a.src = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.setEmbedSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLEmbedElement(a);
    a.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
};
goog.dom.safe.setFrameSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLFrameElement(a);
    a.src = goog.html.TrustedResourceUrl.unwrap(b);
};
goog.dom.safe.setIframeSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLIFrameElement(a);
    a.src = goog.html.TrustedResourceUrl.unwrap(b);
};
goog.dom.safe.setIframeSrcdoc = function(a, b) {
    goog.dom.asserts.assertIsHTMLIFrameElement(a);
    a.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(b);
};
goog.dom.safe.setLinkHrefAndRel = function(a, b, c) {
    goog.dom.asserts.assertIsHTMLLinkElement(a);
    a.rel = c;
    goog.string.internal.caseInsensitiveContains(c, "stylesheet") ? (goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'), a.href = goog.html.TrustedResourceUrl.unwrap(b)) : a.href = b instanceof goog.html.TrustedResourceUrl ? goog.html.TrustedResourceUrl.unwrap(b) : b instanceof goog.html.SafeUrl ? goog.html.SafeUrl.unwrap(b) : goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b));
};
goog.dom.safe.setObjectData = function(a, b) {
    goog.dom.asserts.assertIsHTMLObjectElement(a);
    a.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
};
goog.dom.safe.setScriptSrc = function(a, b) {
    goog.dom.asserts.assertIsHTMLScriptElement(a);
    a.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);
    (b = goog.getScriptNonce()) && a.setAttribute("nonce", b);
};
goog.dom.safe.setScriptContent = function(a, b) {
    goog.dom.asserts.assertIsHTMLScriptElement(a);
    a.text = goog.html.SafeScript.unwrapTrustedScript(b);
    (b = goog.getScriptNonce()) && a.setAttribute("nonce", b);
};
goog.dom.safe.setLocationHref = function(a, b) {
    goog.dom.asserts.assertIsLocation(a);
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    a.href = goog.html.SafeUrl.unwrap(b);
};
goog.dom.safe.assignLocation = function(a, b) {
    goog.dom.asserts.assertIsLocation(a);
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    a.assign(goog.html.SafeUrl.unwrap(b));
};
goog.dom.safe.replaceLocation = function(a, b) {
    b = b instanceof goog.html.SafeUrl ? b : goog.html.SafeUrl.sanitizeAssertUnchanged(b);
    a.replace(goog.html.SafeUrl.unwrap(b));
};
goog.dom.safe.openInWindow = function(a, b, c, d, e) {
    a = a instanceof goog.html.SafeUrl ? a : goog.html.SafeUrl.sanitizeAssertUnchanged(a);
    b = b || goog.global;
    c = c instanceof goog.string.Const ? goog.string.Const.unwrap(c) : c || "";
    return b.open(goog.html.SafeUrl.unwrap(a), c, d, e);
};
goog.dom.safe.parseFromStringHtml = function(a, b) {
    return goog.dom.safe.parseFromString(a, b, "text/html");
};
goog.dom.safe.parseFromString = function(a, b, c) {
    return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b), c);
};
goog.dom.safe.createImageFromBlob = function(a) {
    if (!/^image\/.*/g.test(a.type)) throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");
    var b = goog.global.URL.createObjectURL(a);
    a = new goog.global.Image;
    a.onload = function() {
        goog.global.URL.revokeObjectURL(b);
    };
    goog.dom.safe.setImageSrc(a, goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."), b));
    return a;
};
goog.string.DETECT_DOUBLE_ESCAPING = !1;
goog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1;
goog.string.Unicode = {
    NBSP: "\xa0"
};
goog.string.startsWith = goog.string.internal.startsWith;
goog.string.endsWith = goog.string.internal.endsWith;
goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;
goog.string.subs = function(a, b) {
    for(var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;)d += c.shift() + e.shift();
    return d + c.join("%s");
};
goog.string.collapseWhitespace = function(a) {
    return a.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;
goog.string.isEmptyString = function(a) {
    return 0 == a.length;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(a) {
    return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(a) {
    return !/[^\t\n\r ]/.test(a);
};
goog.string.isAlpha = function(a) {
    return !/[^a-zA-Z]/.test(a);
};
goog.string.isNumeric = function(a) {
    return !/[^0-9]/.test(a);
};
goog.string.isAlphaNumeric = function(a) {
    return !/[^a-zA-Z0-9]/.test(a);
};
goog.string.isSpace = function(a) {
    return " " == a;
};
goog.string.isUnicodeChar = function(a) {
    return 1 == a.length && " " <= a && "~" >= a || "\x80" <= a && "\uFFFD" >= a;
};
goog.string.stripNewlines = function(a) {
    return a.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(a) {
    return a.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(a) {
    return a.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(a) {
    return a.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(a) {
    return a.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.string.internal.trim;
goog.string.trimLeft = function(a) {
    return a.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(a) {
    return a.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_ = function(a, b, c) {
    if (a == b) return 0;
    if (!a) return -1;
    if (!b) return 1;
    for(var d = a.toLowerCase().match(c), e = b.toLowerCase().match(c), f = Math.min(d.length, e.length), g = 0; g < f; g++){
        c = d[g];
        var h = e[g];
        if (c != h) return a = parseInt(c, 10), !isNaN(a) && (b = parseInt(h, 10), !isNaN(b) && a - b) ? a - b : c < h ? -1 : 1;
    }
    return d.length != e.length ? d.length - e.length : a < b ? -1 : 1;
};
goog.string.intAwareCompare = function(a, b) {
    return goog.string.numberAwareCompare_(a, b, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(a, b) {
    return goog.string.numberAwareCompare_(a, b, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(a) {
    return encodeURIComponent(String(a));
};
goog.string.urlDecode = function(a) {
    return decodeURIComponent(a.replace(/\+/g, " "));
};
goog.string.newLineToBr = goog.string.internal.newLineToBr;
goog.string.htmlEscape = function(a, b) {
    a = goog.string.internal.htmlEscape(a, b);
    goog.string.DETECT_DOUBLE_ESCAPING && (a = a.replace(goog.string.E_RE_, "&#101;"));
    return a;
};
goog.string.E_RE_ = /e/g;
goog.string.unescapeEntities = function(a) {
    return goog.string.contains(a, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a) : goog.string.unescapePureXmlEntities_(a) : a;
};
goog.string.unescapeEntitiesWithDocument = function(a, b) {
    return goog.string.contains(a, "&") ? goog.string.unescapeEntitiesUsingDom_(a, b) : a;
};
goog.string.unescapeEntitiesUsingDom_ = function(a, b) {
    var c = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"'
    };
    var d = b ? b.createElement("div") : goog.global.document.createElement("div");
    return a.replace(goog.string.HTML_ENTITY_PATTERN_, function(a, b) {
        var e = c[a];
        if (e) return e;
        "#" == b.charAt(0) && (b = Number("0" + b.substr(1)), isNaN(b) || (e = String.fromCharCode(b)));
        e || (goog.dom.safe.setInnerHtml(d, goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."), a + " ")), e = d.firstChild.nodeValue.slice(0, -1));
        return c[a] = e;
    });
};
goog.string.unescapePureXmlEntities_ = function(a) {
    return a.replace(/&([^;]+);/g, function(a, c) {
        switch(c){
            case "amp":
                return "&";
            case "lt":
                return "<";
            case "gt":
                return ">";
            case "quot":
                return '"';
            default:
                return "#" != c.charAt(0) || (c = Number("0" + c.substr(1)), isNaN(c)) ? a : String.fromCharCode(c);
        }
    });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(a, b) {
    return goog.string.newLineToBr(a.replace(/  /g, " &#160;"), b);
};
goog.string.preserveSpaces = function(a) {
    return a.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(a, b) {
    for(var c = b.length, d = 0; d < c; d++){
        var e = 1 == c ? b : b.charAt(d);
        if (a.charAt(0) == e && a.charAt(a.length - 1) == e) return a.substring(1, a.length - 1);
    }
    return a;
};
goog.string.truncate = function(a, b, c) {
    c && (a = goog.string.unescapeEntities(a));
    a.length > b && (a = a.substring(0, b - 3) + "...");
    c && (a = goog.string.htmlEscape(a));
    return a;
};
goog.string.truncateMiddle = function(a, b, c, d) {
    c && (a = goog.string.unescapeEntities(a));
    if (d && a.length > b) {
        d > b && (d = b);
        var e = a.length - d;
        a = a.substring(0, b - d) + "..." + a.substring(e);
    } else a.length > b && (d = Math.floor(b / 2), e = a.length - d, a = a.substring(0, d + b % 2) + "..." + a.substring(e));
    c && (a = goog.string.htmlEscape(a));
    return a;
};
goog.string.specialEscapeChars_ = {
    "\0": "\\0",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t",
    "\v": "\\x0B",
    '"': '\\"',
    "\\": "\\\\",
    "<": "\\u003C"
};
goog.string.jsEscapeCache_ = {
    "'": "\\'"
};
goog.string.quote = function(a) {
    a = String(a);
    for(var b = [
        '"'
    ], c = 0; c < a.length; c++){
        var d = a.charAt(c), e = d.charCodeAt(0);
        b[c + 1] = goog.string.specialEscapeChars_[d] || (31 < e && 127 > e ? d : goog.string.escapeChar(d));
    }
    b.push('"');
    return b.join("");
};
goog.string.escapeString = function(a) {
    for(var b = [], c = 0; c < a.length; c++)b[c] = goog.string.escapeChar(a.charAt(c));
    return b.join("");
};
goog.string.escapeChar = function(a) {
    if (a in goog.string.jsEscapeCache_) return goog.string.jsEscapeCache_[a];
    if (a in goog.string.specialEscapeChars_) return goog.string.jsEscapeCache_[a] = goog.string.specialEscapeChars_[a];
    var b = a.charCodeAt(0);
    if (31 < b && 127 > b) var c = a;
    else {
        if (256 > b) {
            if (c = "\\x", 16 > b || 256 < b) c += "0";
        } else c = "\\u", 4096 > b && (c += "0");
        c += b.toString(16).toUpperCase();
    }
    return goog.string.jsEscapeCache_[a] = c;
};
goog.string.contains = goog.string.internal.contains;
goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;
goog.string.countOf = function(a, b) {
    return a && b ? a.split(b).length - 1 : 0;
};
goog.string.removeAt = function(a, b, c) {
    var d = a;
    0 <= b && b < a.length && 0 < c && (d = a.substr(0, b) + a.substr(b + c, a.length - b - c));
    return d;
};
goog.string.remove = function(a, b) {
    return a.replace(b, "");
};
goog.string.removeAll = function(a, b) {
    b = new RegExp(goog.string.regExpEscape(b), "g");
    return a.replace(b, "");
};
goog.string.replaceAll = function(a, b, c) {
    b = new RegExp(goog.string.regExpEscape(b), "g");
    return a.replace(b, c.replace(/\$/g, "$$$$"));
};
goog.string.regExpEscape = function(a) {
    return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(a, b) {
    return a.repeat(b);
} : function(a, b) {
    return Array(b + 1).join(a);
};
goog.string.padNumber = function(a, b, c) {
    a = void 0 !== c ? a.toFixed(c) : String(a);
    c = a.indexOf(".");
    -1 == c && (c = a.length);
    return goog.string.repeat("0", Math.max(0, b - c)) + a;
};
goog.string.makeSafe = function(a) {
    return null == a ? "" : String(a);
};
goog.string.buildString = function(a) {
    return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
    return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
};
goog.string.compareVersions = goog.string.internal.compareVersions;
goog.string.hashCode = function(a) {
    for(var b = 0, c = 0; c < a.length; ++c)b = 31 * b + a.charCodeAt(c) >>> 0;
    return b;
};
goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
goog.string.createUniqueString = function() {
    return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(a) {
    var b = Number(a);
    return 0 == b && goog.string.isEmptyOrWhitespace(a) ? NaN : b;
};
goog.string.isLowerCamelCase = function(a) {
    return /^[a-z]+([A-Z][a-z]*)*$/.test(a);
};
goog.string.isUpperCamelCase = function(a) {
    return /^([A-Z][a-z]*)+$/.test(a);
};
goog.string.toCamelCase = function(a) {
    return String(a).replace(/\-([a-z])/g, function(a, c) {
        return c.toUpperCase();
    });
};
goog.string.toSelectorCase = function(a) {
    return String(a).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(a, b) {
    b = "string" === typeof b ? goog.string.regExpEscape(b) : "\\s";
    return a.replace(new RegExp("(^" + (b ? "|[" + b + "]+" : "") + ")([a-z])", "g"), function(a, b, e) {
        return b + e.toUpperCase();
    });
};
goog.string.capitalize = function(a) {
    return String(a.charAt(0)).toUpperCase() + String(a.substr(1)).toLowerCase();
};
goog.string.parseInt = function(a) {
    isFinite(a) && (a = String(a));
    return "string" === typeof a ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;
};
goog.string.splitLimit = function(a, b, c) {
    a = a.split(b);
    for(var d = []; 0 < c && a.length;)d.push(a.shift()), c--;
    a.length && d.push(a.join(b));
    return d;
};
goog.string.lastComponent = function(a, b) {
    if (b) "string" == typeof b && (b = [
        b
    ]);
    else return a;
    for(var c = -1, d = 0; d < b.length; d++)if ("" != b[d]) {
        var e = a.lastIndexOf(b[d]);
        e > c && (c = e);
    }
    return -1 == c ? a : a.slice(c + 1);
};
goog.string.editDistance = function(a, b) {
    var c = [], d = [];
    if (a == b) return 0;
    if (!a.length || !b.length) return Math.max(a.length, b.length);
    for(var e = 0; e < b.length + 1; e++)c[e] = e;
    for(e = 0; e < a.length; e++){
        d[0] = e + 1;
        for(var f = 0; f < b.length; f++)d[f + 1] = Math.min(d[f] + 1, c[f + 1] + 1, c[f] + Number(a[e] != b[f]));
        for(f = 0; f < c.length; f++)c[f] = d[f];
    }
    return d[b.length];
};
goog.labs.userAgent.engine = {};
goog.labs.userAgent.engine.isPresto = function() {
    return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
    return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
    return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
    return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
    var a = goog.labs.userAgent.util.getUserAgent();
    if (a) {
        a = goog.labs.userAgent.util.extractVersionTuples(a);
        var b = goog.labs.userAgent.engine.getEngineTuple_(a);
        if (b) return "Gecko" == b[0] ? goog.labs.userAgent.engine.getVersionForKey_(a, "Firefox") : b[1];
        a = a[0];
        var c;
        if (a && (c = a[2]) && (c = /Trident\/([^\s;]+)/.exec(c))) return c[1];
    }
    return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(a) {
    if (!goog.labs.userAgent.engine.isEdge()) return a[1];
    for(var b = 0; b < a.length; b++){
        var c = a[b];
        if ("Edge" == c[0]) return c;
    }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(a) {
    return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), a);
};
goog.labs.userAgent.engine.getVersionForKey_ = function(a, b) {
    return (a = goog.array.find(a, function(a) {
        return b == a[0];
    })) && a[1] || "";
};
goog.labs.userAgent.platform = {};
goog.labs.userAgent.platform.isAndroid = function() {
    return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
    return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
    return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
    return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
    return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
    return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
    return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
    return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
    return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.isChromecast = function() {
    return goog.labs.userAgent.util.matchUserAgent("CrKey");
};
goog.labs.userAgent.platform.isKaiOS = function() {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS");
};
goog.labs.userAgent.platform.getVersion = function() {
    var a = goog.labs.userAgent.util.getUserAgent(), b = "";
    goog.labs.userAgent.platform.isWindows() ? (b = /Windows (?:NT|Phone) ([0-9.]+)/, b = (a = b.exec(a)) ? a[1] : "0.0") : goog.labs.userAgent.platform.isIos() ? (b = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/, b = (a = b.exec(a)) && a[1].replace(/_/g, ".")) : goog.labs.userAgent.platform.isMacintosh() ? (b = /Mac OS X ([0-9_.]+)/, b = (a = b.exec(a)) ? a[1].replace(/_/g, ".") : "10") : goog.labs.userAgent.platform.isKaiOS() ? (b = /(?:KaiOS)\/(\S+)/i, b = (a = b.exec(a)) && a[1]) : goog.labs.userAgent.platform.isAndroid() ? (b = /Android\s+([^\);]+)(\)|;)/, b = (a = b.exec(a)) && a[1]) : goog.labs.userAgent.platform.isChromeOS() && (b = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/, b = (a = b.exec(a)) && a[1]);
    return b || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(a) {
    return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), a);
};
goog.reflect = {};
goog.reflect.object = function(a, b) {
    return b;
};
goog.reflect.objectProperty = function(a, b) {
    return a;
};
goog.reflect.sinkValue = function(a) {
    goog.reflect.sinkValue[" "](a);
    return a;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(a, b) {
    try {
        return goog.reflect.sinkValue(a[b]), !0;
    } catch (c) {}
    return !1;
};
goog.reflect.cache = function(a, b, c, d) {
    d = d ? d(b) : b;
    return Object.prototype.hasOwnProperty.call(a, d) ? a[d] : a[d] = c(b);
};
goog.userAgent = {};
goog.userAgent.ASSUME_IE = !1;
goog.userAgent.ASSUME_EDGE = !1;
goog.userAgent.ASSUME_GECKO = !1;
goog.userAgent.ASSUME_WEBKIT = !1;
goog.userAgent.ASSUME_MOBILE_WEBKIT = !1;
goog.userAgent.ASSUME_OPERA = !1;
goog.userAgent.ASSUME_ANY_VERSION = !1;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
    return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigatorTyped = function() {
    return goog.global.navigator || null;
};
goog.userAgent.getNavigator = function() {
    return goog.userAgent.getNavigatorTyped();
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
    return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
    var a = goog.userAgent.getNavigatorTyped();
    return a && a.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = !1;
goog.userAgent.ASSUME_WINDOWS = !1;
goog.userAgent.ASSUME_LINUX = !1;
goog.userAgent.ASSUME_X11 = !1;
goog.userAgent.ASSUME_ANDROID = !1;
goog.userAgent.ASSUME_IPHONE = !1;
goog.userAgent.ASSUME_IPAD = !1;
goog.userAgent.ASSUME_IPOD = !1;
goog.userAgent.ASSUME_KAIOS = !1;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
    return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
    var a = goog.userAgent.getNavigatorTyped();
    return !!a && goog.string.contains(a.appVersion || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
goog.userAgent.KAIOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_KAIOS : goog.labs.userAgent.platform.isKaiOS();
goog.userAgent.determineVersion_ = function() {
    var a = "", b = goog.userAgent.getVersionRegexResult_();
    b && (a = b ? b[1] : "");
    return goog.userAgent.IE && (b = goog.userAgent.getDocumentMode_(), null != b && b > parseFloat(a)) ? String(b) : a;
};
goog.userAgent.getVersionRegexResult_ = function() {
    var a = goog.userAgent.getUserAgentString();
    if (goog.userAgent.GECKO) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (goog.userAgent.EDGE) return /Edge\/([\d\.]+)/.exec(a);
    if (goog.userAgent.IE) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (goog.userAgent.WEBKIT) return /WebKit\/(\S+)/.exec(a);
    if (goog.userAgent.OPERA) return /(?:Version)[ \/]?(\S+)/.exec(a);
};
goog.userAgent.getDocumentMode_ = function() {
    var a = goog.global.document;
    return a ? a.documentMode : void 0;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(a, b) {
    return goog.string.compareVersions(a, b);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(a) {
    return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, a, function() {
        return 0 <= goog.string.compareVersions(goog.userAgent.VERSION, a);
    });
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(a) {
    return Number(goog.userAgent.DOCUMENT_MODE) >= a;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
    if (goog.global.document && goog.userAgent.IE) {
        var a = goog.userAgent.getDocumentMode_();
        return a ? a : parseInt(goog.userAgent.VERSION, 10) || void 0;
    }
}();
goog.userAgent.product = {};
goog.userAgent.product.ASSUME_FIREFOX = !1;
goog.userAgent.product.ASSUME_IPHONE = !1;
goog.userAgent.product.ASSUME_IPAD = !1;
goog.userAgent.product.ASSUME_ANDROID = !1;
goog.userAgent.product.ASSUME_CHROME = !1;
goog.userAgent.product.ASSUME_SAFARI = !1;
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
    return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
    return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.crypt.base64 = {};
goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "+/=";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_ + "-_.";
goog.crypt.base64.Alphabet = {
    DEFAULT: 0,
    NO_PADDING: 1,
    WEBSAFE: 2,
    WEBSAFE_DOT_PADDING: 3,
    WEBSAFE_NO_PADDING: 4
};
goog.crypt.base64.paddingChars_ = "=.";
goog.crypt.base64.isPadding_ = function(a) {
    return goog.string.contains(goog.crypt.base64.paddingChars_, a);
};
goog.crypt.base64.byteToCharMaps_ = {};
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || "function" == typeof goog.global.btoa;
goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && "function" == typeof goog.global.atob;
goog.crypt.base64.encodeByteArray = function(a, b) {
    goog.asserts.assert(goog.isArrayLike(a), "encodeByteArray takes an array as a parameter");
    void 0 === b && (b = goog.crypt.base64.Alphabet.DEFAULT);
    goog.crypt.base64.init_();
    b = goog.crypt.base64.byteToCharMaps_[b];
    for(var c = [], d = 0; d < a.length; d += 3){
        var e = a[d], f = d + 1 < a.length, g = f ? a[d + 1] : 0, h = d + 2 < a.length, k = h ? a[d + 2] : 0, l = e >> 2;
        e = (e & 3) << 4 | g >> 4;
        g = (g & 15) << 2 | k >> 6;
        k &= 63;
        h || (k = 64, f || (g = 64));
        c.push(b[l], b[e], b[g] || "", b[k] || "");
    }
    return c.join("");
};
goog.crypt.base64.encodeString = function(a, b) {
    return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !b ? goog.global.btoa(a) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a), b);
};
goog.crypt.base64.decodeString = function(a, b) {
    if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !b) return goog.global.atob(a);
    var c = "";
    goog.crypt.base64.decodeStringInternal_(a, function(a) {
        c += String.fromCharCode(a);
    });
    return c;
};
goog.crypt.base64.decodeStringToByteArray = function(a, b) {
    var c = [];
    goog.crypt.base64.decodeStringInternal_(a, function(a) {
        c.push(a);
    });
    return c;
};
goog.crypt.base64.decodeStringToUint8Array = function(a) {
    goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
    var b = a.length, c = 3 * b / 4;
    c % 3 ? c = Math.floor(c) : goog.crypt.base64.isPadding_(a[b - 1]) && (c = goog.crypt.base64.isPadding_(a[b - 2]) ? c - 2 : c - 1);
    var d = new Uint8Array(c), e = 0;
    goog.crypt.base64.decodeStringInternal_(a, function(a) {
        d[e++] = a;
    });
    return d.subarray(0, e);
};
goog.crypt.base64.decodeStringInternal_ = function(a, b) {
    function c(b) {
        for(; d < a.length;){
            var c = a.charAt(d++), e = goog.crypt.base64.charToByteMap_[c];
            if (null != e) return e;
            if (!goog.string.isEmptyOrWhitespace(c)) throw Error("Unknown base64 encoding at char: " + c);
        }
        return b;
    }
    goog.crypt.base64.init_();
    for(var d = 0;;){
        var e = c(-1), f = c(0), g = c(64), h = c(64);
        if (64 === h && -1 === e) break;
        b(e << 2 | f >> 4);
        64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
    }
};
goog.crypt.base64.init_ = function() {
    if (!goog.crypt.base64.charToByteMap_) {
        goog.crypt.base64.charToByteMap_ = {};
        for(var a = goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""), b = [
            "+/=",
            "+/",
            "-_=",
            "-_.",
            "-_"
        ], c = 0; 5 > c; c++){
            var d = a.concat(b[c].split(""));
            goog.crypt.base64.byteToCharMaps_[c] = d;
            for(var e = 0; e < d.length; e++){
                var f = d[e], g = goog.crypt.base64.charToByteMap_[f];
                void 0 === g ? goog.crypt.base64.charToByteMap_[f] = e : goog.asserts.assert(g === e);
            }
        }
    }
};
jspb.utils = {};
jspb.utils.split64Low = 0;
jspb.utils.split64High = 0;
jspb.utils.splitUint64 = function(a) {
    var b = a >>> 0;
    a = Math.floor((a - b) / jspb.BinaryConstants.TWO_TO_32) >>> 0;
    jspb.utils.split64Low = b;
    jspb.utils.split64High = a;
};
jspb.utils.splitInt64 = function(a) {
    var b = 0 > a;
    a = Math.abs(a);
    var c = a >>> 0;
    a = Math.floor((a - c) / jspb.BinaryConstants.TWO_TO_32);
    a >>>= 0;
    b && (a = ~a >>> 0, c = (~c >>> 0) + 1, 4294967295 < c && (c = 0, a++, 4294967295 < a && (a = 0)));
    jspb.utils.split64Low = c;
    jspb.utils.split64High = a;
};
jspb.utils.splitZigzag64 = function(a) {
    var b = 0 > a;
    a = 2 * Math.abs(a);
    jspb.utils.splitUint64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    b && (0 == a ? 0 == c ? c = a = 4294967295 : (c--, a = 4294967295) : a--);
    jspb.utils.split64Low = a;
    jspb.utils.split64High = c;
};
jspb.utils.splitFloat32 = function(a) {
    var b = 0 > a ? 1 : 0;
    a = b ? -a : a;
    if (0 === a) 0 < 1 / a ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483648);
    else if (isNaN(a)) jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647;
    else if (a > jspb.BinaryConstants.FLOAT32_MAX) jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | 2139095040) >>> 0;
    else if (a < jspb.BinaryConstants.FLOAT32_MIN) a = Math.round(a / Math.pow(2, -149)), jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | a) >>> 0;
    else {
        var c = Math.floor(Math.log(a) / Math.LN2);
        a *= Math.pow(2, -c);
        a = Math.round(a * jspb.BinaryConstants.TWO_TO_23);
        16777216 <= a && ++c;
        jspb.utils.split64High = 0;
        jspb.utils.split64Low = (b << 31 | c + 127 << 23 | a & 8388607) >>> 0;
    }
};
jspb.utils.splitFloat64 = function(a) {
    var b = 0 > a ? 1 : 0;
    a = b ? -a : a;
    if (0 === a) jspb.utils.split64High = 0 < 1 / a ? 0 : 2147483648, jspb.utils.split64Low = 0;
    else if (isNaN(a)) jspb.utils.split64High = 2147483647, jspb.utils.split64Low = 4294967295;
    else if (a > jspb.BinaryConstants.FLOAT64_MAX) jspb.utils.split64High = (b << 31 | 2146435072) >>> 0, jspb.utils.split64Low = 0;
    else if (a < jspb.BinaryConstants.FLOAT64_MIN) {
        var c = a / Math.pow(2, -1074);
        a = c / jspb.BinaryConstants.TWO_TO_32;
        jspb.utils.split64High = (b << 31 | a) >>> 0;
        jspb.utils.split64Low = c >>> 0;
    } else {
        c = a;
        var d = 0;
        if (2 <= c) for(; 2 <= c && 1023 > d;)d++, c /= 2;
        else for(; 1 > c && -1022 < d;)c *= 2, d--;
        c = a * Math.pow(2, -d);
        a = c * jspb.BinaryConstants.TWO_TO_20 & 1048575;
        c = c * jspb.BinaryConstants.TWO_TO_52 >>> 0;
        jspb.utils.split64High = (b << 31 | d + 1023 << 20 | a) >>> 0;
        jspb.utils.split64Low = c;
    }
};
jspb.utils.splitHash64 = function(a) {
    var b = a.charCodeAt(0), c = a.charCodeAt(1), d = a.charCodeAt(2), e = a.charCodeAt(3), f = a.charCodeAt(4), g = a.charCodeAt(5), h = a.charCodeAt(6);
    a = a.charCodeAt(7);
    jspb.utils.split64Low = b + (c << 8) + (d << 16) + (e << 24) >>> 0;
    jspb.utils.split64High = f + (g << 8) + (h << 16) + (a << 24) >>> 0;
};
jspb.utils.joinUint64 = function(a, b) {
    return b * jspb.BinaryConstants.TWO_TO_32 + (a >>> 0);
};
jspb.utils.joinInt64 = function(a, b) {
    var c = b & 2147483648;
    c && (a = ~a + 1 >>> 0, b = ~b >>> 0, 0 == a && (b = b + 1 >>> 0));
    a = jspb.utils.joinUint64(a, b);
    return c ? -a : a;
};
jspb.utils.toZigzag64 = function(a, b, c) {
    var d = b >> 31;
    return c(a << 1 ^ d, (b << 1 | a >>> 31) ^ d);
};
jspb.utils.joinZigzag64 = function(a, b) {
    return jspb.utils.fromZigzag64(a, b, jspb.utils.joinInt64);
};
jspb.utils.fromZigzag64 = function(a, b, c) {
    var d = -(a & 1);
    return c((a >>> 1 | b << 31) ^ d, b >>> 1 ^ d);
};
jspb.utils.joinFloat32 = function(a, b) {
    b = 2 * (a >> 31) + 1;
    var c = a >>> 23 & 255;
    a &= 8388607;
    return 255 == c ? a ? NaN : Infinity * b : 0 == c ? b * Math.pow(2, -149) * a : b * Math.pow(2, c - 150) * (a + Math.pow(2, 23));
};
jspb.utils.joinFloat64 = function(a, b) {
    var c = 2 * (b >> 31) + 1, d = b >>> 20 & 2047;
    a = jspb.BinaryConstants.TWO_TO_32 * (b & 1048575) + a;
    return 2047 == d ? a ? NaN : Infinity * c : 0 == d ? c * Math.pow(2, -1074) * a : c * Math.pow(2, d - 1075) * (a + jspb.BinaryConstants.TWO_TO_52);
};
jspb.utils.joinHash64 = function(a, b) {
    return String.fromCharCode(a >>> 0 & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255, b >>> 0 & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255);
};
jspb.utils.DIGITS = "0123456789abcdef".split("");
jspb.utils.ZERO_CHAR_CODE_ = 48;
jspb.utils.A_CHAR_CODE_ = 97;
jspb.utils.joinUnsignedDecimalString = function(a, b) {
    function c(a, b) {
        a = a ? String(a) : "";
        return b ? "0000000".slice(a.length) + a : a;
    }
    if (2097151 >= b) return "" + jspb.utils.joinUint64(a, b);
    var d = (a >>> 24 | b << 8) >>> 0 & 16777215;
    b = b >> 16 & 65535;
    a = (a & 16777215) + 6777216 * d + 6710656 * b;
    d += 8147497 * b;
    b *= 2;
    1E7 <= a && (d += Math.floor(a / 1E7), a %= 1E7);
    1E7 <= d && (b += Math.floor(d / 1E7), d %= 1E7);
    return c(b, 0) + c(d, b) + c(a, 1);
};
jspb.utils.joinSignedDecimalString = function(a, b) {
    var c = b & 2147483648;
    c && (a = ~a + 1 >>> 0, b = ~b + (0 == a ? 1 : 0) >>> 0);
    a = jspb.utils.joinUnsignedDecimalString(a, b);
    return c ? "-" + a : a;
};
jspb.utils.hash64ToDecimalString = function(a, b) {
    jspb.utils.splitHash64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    return b ? jspb.utils.joinSignedDecimalString(a, c) : jspb.utils.joinUnsignedDecimalString(a, c);
};
jspb.utils.hash64ArrayToDecimalStrings = function(a, b) {
    for(var c = Array(a.length), d = 0; d < a.length; d++)c[d] = jspb.utils.hash64ToDecimalString(a[d], b);
    return c;
};
jspb.utils.decimalStringToHash64 = function(a) {
    function b(a, b) {
        for(var c = 0; 8 > c && (1 !== a || 0 < b); c++)b = a * e[c] + b, e[c] = b & 255, b >>>= 8;
    }
    function c() {
        for(var a = 0; 8 > a; a++)e[a] = ~e[a] & 255;
    }
    jspb.asserts.assert(0 < a.length);
    var d = !1;
    "-" === a[0] && (d = !0, a = a.slice(1));
    for(var e = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ], f = 0; f < a.length; f++)b(10, a.charCodeAt(f) - jspb.utils.ZERO_CHAR_CODE_);
    d && (c(), b(1, 1));
    return goog.crypt.byteArrayToString(e);
};
jspb.utils.splitDecimalString = function(a) {
    jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
};
jspb.utils.toHexDigit_ = function(a) {
    return String.fromCharCode(10 > a ? jspb.utils.ZERO_CHAR_CODE_ + a : jspb.utils.A_CHAR_CODE_ - 10 + a);
};
jspb.utils.fromHexCharCode_ = function(a) {
    return a >= jspb.utils.A_CHAR_CODE_ ? a - jspb.utils.A_CHAR_CODE_ + 10 : a - jspb.utils.ZERO_CHAR_CODE_;
};
jspb.utils.hash64ToHexString = function(a) {
    var b = Array(18);
    b[0] = "0";
    b[1] = "x";
    for(var c = 0; 8 > c; c++){
        var d = a.charCodeAt(7 - c);
        b[2 * c + 2] = jspb.utils.toHexDigit_(d >> 4);
        b[2 * c + 3] = jspb.utils.toHexDigit_(d & 15);
    }
    return b.join("");
};
jspb.utils.hexStringToHash64 = function(a) {
    a = a.toLowerCase();
    jspb.asserts.assert(18 == a.length);
    jspb.asserts.assert("0" == a[0]);
    jspb.asserts.assert("x" == a[1]);
    for(var b = "", c = 0; 8 > c; c++){
        var d = jspb.utils.fromHexCharCode_(a.charCodeAt(2 * c + 2)), e = jspb.utils.fromHexCharCode_(a.charCodeAt(2 * c + 3));
        b = String.fromCharCode(16 * d + e) + b;
    }
    return b;
};
jspb.utils.hash64ToNumber = function(a, b) {
    jspb.utils.splitHash64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    return b ? jspb.utils.joinInt64(a, c) : jspb.utils.joinUint64(a, c);
};
jspb.utils.numberToHash64 = function(a) {
    jspb.utils.splitInt64(a);
    return jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.utils.countVarints = function(a, b, c) {
    for(var d = 0, e = b; e < c; e++)d += a[e] >> 7;
    return c - b - d;
};
jspb.utils.countVarintFields = function(a, b, c, d) {
    var e = 0;
    d = 8 * d + jspb.BinaryConstants.WireType.VARINT;
    if (128 > d) for(; b < c && a[b++] == d;)for(e++;;){
        var f = a[b++];
        if (0 == (f & 128)) break;
    }
    else for(; b < c;){
        for(f = d; 128 < f;){
            if (a[b] != (f & 127 | 128)) return e;
            b++;
            f >>= 7;
        }
        if (a[b++] != f) break;
        for(e++; f = a[b++], 0 != (f & 128););
    }
    return e;
};
jspb.utils.countFixedFields_ = function(a, b, c, d, e) {
    var f = 0;
    if (128 > d) for(; b < c && a[b++] == d;)f++, b += e;
    else for(; b < c;){
        for(var g = d; 128 < g;){
            if (a[b++] != (g & 127 | 128)) return f;
            g >>= 7;
        }
        if (a[b++] != g) break;
        f++;
        b += e;
    }
    return f;
};
jspb.utils.countFixed32Fields = function(a, b, c, d) {
    return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED32, 4);
};
jspb.utils.countFixed64Fields = function(a, b, c, d) {
    return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED64, 8);
};
jspb.utils.countDelimitedFields = function(a, b, c, d) {
    var e = 0;
    for(d = 8 * d + jspb.BinaryConstants.WireType.DELIMITED; b < c;){
        for(var f = d; 128 < f;){
            if (a[b++] != (f & 127 | 128)) return e;
            f >>= 7;
        }
        if (a[b++] != f) break;
        e++;
        for(var g = 0, h = 1; f = a[b++], g += (f & 127) * h, h *= 128, 0 != (f & 128););
        b += g;
    }
    return e;
};
jspb.utils.debugBytesToTextFormat = function(a) {
    var b = '"';
    if (a) {
        a = jspb.utils.byteSourceToUint8Array(a);
        for(var c = 0; c < a.length; c++)b += "\\x", 16 > a[c] && (b += "0"), b += a[c].toString(16);
    }
    return b + '"';
};
jspb.utils.debugScalarToTextFormat = function(a) {
    return "string" === typeof a ? goog.string.quote(a) : a.toString();
};
jspb.utils.stringToByteArray = function(a) {
    for(var b = new Uint8Array(a.length), c = 0; c < a.length; c++){
        var d = a.charCodeAt(c);
        if (255 < d) throw Error("Conversion error: string contains codepoint outside of byte range");
        b[c] = d;
    }
    return b;
};
jspb.utils.byteSourceToUint8Array = function(a) {
    if (a.constructor === Uint8Array) return a;
    if (a.constructor === ArrayBuffer || a.constructor === Array) return new Uint8Array(a);
    if (a.constructor === String) return goog.crypt.base64.decodeStringToUint8Array(a);
    if (a instanceof Uint8Array) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
    jspb.asserts.fail("Type not convertible to Uint8Array.");
    return new Uint8Array(0);
};
jspb.BinaryDecoder = function(a, b, c) {
    this.bytes_ = null;
    this.cursor_ = this.end_ = this.start_ = 0;
    this.error_ = !1;
    a && this.setBlock(a, b, c);
};
jspb.BinaryDecoder.instanceCache_ = [];
jspb.BinaryDecoder.alloc = function(a, b, c) {
    if (jspb.BinaryDecoder.instanceCache_.length) {
        var d = jspb.BinaryDecoder.instanceCache_.pop();
        a && d.setBlock(a, b, c);
        return d;
    }
    return new jspb.BinaryDecoder(a, b, c);
};
jspb.BinaryDecoder.prototype.free = function() {
    this.clear();
    100 > jspb.BinaryDecoder.instanceCache_.length && jspb.BinaryDecoder.instanceCache_.push(this);
};
jspb.BinaryDecoder.prototype.clone = function() {
    return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
};
jspb.BinaryDecoder.prototype.clear = function() {
    this.bytes_ = null;
    this.cursor_ = this.end_ = this.start_ = 0;
    this.error_ = !1;
};
jspb.BinaryDecoder.prototype.getBuffer = function() {
    return this.bytes_;
};
jspb.BinaryDecoder.prototype.setBlock = function(a, b, c) {
    this.bytes_ = jspb.utils.byteSourceToUint8Array(a);
    this.start_ = void 0 !== b ? b : 0;
    this.end_ = void 0 !== c ? this.start_ + c : this.bytes_.length;
    this.cursor_ = this.start_;
};
jspb.BinaryDecoder.prototype.getEnd = function() {
    return this.end_;
};
jspb.BinaryDecoder.prototype.setEnd = function(a) {
    this.end_ = a;
};
jspb.BinaryDecoder.prototype.reset = function() {
    this.cursor_ = this.start_;
};
jspb.BinaryDecoder.prototype.getCursor = function() {
    return this.cursor_;
};
jspb.BinaryDecoder.prototype.setCursor = function(a) {
    this.cursor_ = a;
};
jspb.BinaryDecoder.prototype.advance = function(a) {
    this.cursor_ += a;
    jspb.asserts.assert(this.cursor_ <= this.end_);
};
jspb.BinaryDecoder.prototype.atEnd = function() {
    return this.cursor_ == this.end_;
};
jspb.BinaryDecoder.prototype.pastEnd = function() {
    return this.cursor_ > this.end_;
};
jspb.BinaryDecoder.prototype.getError = function() {
    return this.error_ || 0 > this.cursor_ || this.cursor_ > this.end_;
};
jspb.BinaryDecoder.prototype.readSplitVarint64 = function(a) {
    for(var b = 128, c = 0, d = 0, e = 0; 4 > e && 128 <= b; e++)b = this.bytes_[this.cursor_++], c |= (b & 127) << 7 * e;
    128 <= b && (b = this.bytes_[this.cursor_++], c |= (b & 127) << 28, d |= (b & 127) >> 4);
    if (128 <= b) for(e = 0; 5 > e && 128 <= b; e++)b = this.bytes_[this.cursor_++], d |= (b & 127) << 7 * e + 3;
    if (128 > b) return a(c >>> 0, d >>> 0);
    jspb.asserts.fail("Failed to read varint, encoding is invalid.");
    this.error_ = !0;
};
jspb.BinaryDecoder.prototype.readSplitZigzagVarint64 = function(a) {
    return this.readSplitVarint64(function(b, c) {
        return jspb.utils.fromZigzag64(b, c, a);
    });
};
jspb.BinaryDecoder.prototype.readSplitFixed64 = function(a) {
    var b = this.bytes_, c = this.cursor_;
    this.cursor_ += 8;
    for(var d = 0, e = 0, f = c + 7; f >= c; f--)d = d << 8 | b[f], e = e << 8 | b[f + 4];
    return a(d, e);
};
jspb.BinaryDecoder.prototype.skipVarint = function() {
    for(; this.bytes_[this.cursor_] & 128;)this.cursor_++;
    this.cursor_++;
};
jspb.BinaryDecoder.prototype.unskipVarint = function(a) {
    for(; 128 < a;)this.cursor_--, a >>>= 7;
    this.cursor_--;
};
jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function() {
    var a = this.bytes_;
    var b = a[this.cursor_ + 0];
    var c = b & 127;
    if (128 > b) return this.cursor_ += 1, jspb.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 1];
    c |= (b & 127) << 7;
    if (128 > b) return this.cursor_ += 2, jspb.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 2];
    c |= (b & 127) << 14;
    if (128 > b) return this.cursor_ += 3, jspb.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 3];
    c |= (b & 127) << 21;
    if (128 > b) return this.cursor_ += 4, jspb.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 4];
    c |= (b & 15) << 28;
    if (128 > b) return this.cursor_ += 5, jspb.asserts.assert(this.cursor_ <= this.end_), c >>> 0;
    this.cursor_ += 5;
    128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && jspb.asserts.assert(!1);
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return c;
};
jspb.BinaryDecoder.prototype.readSignedVarint32 = function() {
    return ~~this.readUnsignedVarint32();
};
jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function() {
    return this.readUnsignedVarint32().toString();
};
jspb.BinaryDecoder.prototype.readSignedVarint32String = function() {
    return this.readSignedVarint32().toString();
};
jspb.BinaryDecoder.prototype.readZigzagVarint32 = function() {
    var a = this.readUnsignedVarint32();
    return a >>> 1 ^ -(a & 1);
};
jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function() {
    return this.readSplitVarint64(jspb.utils.joinUint64);
};
jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function() {
    return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString);
};
jspb.BinaryDecoder.prototype.readSignedVarint64 = function() {
    return this.readSplitVarint64(jspb.utils.joinInt64);
};
jspb.BinaryDecoder.prototype.readSignedVarint64String = function() {
    return this.readSplitVarint64(jspb.utils.joinSignedDecimalString);
};
jspb.BinaryDecoder.prototype.readZigzagVarint64 = function() {
    return this.readSplitVarint64(jspb.utils.joinZigzag64);
};
jspb.BinaryDecoder.prototype.readZigzagVarintHash64 = function() {
    return this.readSplitZigzagVarint64(jspb.utils.joinHash64);
};
jspb.BinaryDecoder.prototype.readZigzagVarint64String = function() {
    return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString);
};
jspb.BinaryDecoder.prototype.readUint8 = function() {
    var a = this.bytes_[this.cursor_ + 0];
    this.cursor_ += 1;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return a;
};
jspb.BinaryDecoder.prototype.readUint16 = function() {
    var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
    this.cursor_ += 2;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return a << 0 | b << 8;
};
jspb.BinaryDecoder.prototype.readUint32 = function() {
    var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c = this.bytes_[this.cursor_ + 2], d = this.bytes_[this.cursor_ + 3];
    this.cursor_ += 4;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return (a << 0 | b << 8 | c << 16 | d << 24) >>> 0;
};
jspb.BinaryDecoder.prototype.readUint64 = function() {
    var a = this.readUint32(), b = this.readUint32();
    return jspb.utils.joinUint64(a, b);
};
jspb.BinaryDecoder.prototype.readUint64String = function() {
    var a = this.readUint32(), b = this.readUint32();
    return jspb.utils.joinUnsignedDecimalString(a, b);
};
jspb.BinaryDecoder.prototype.readInt8 = function() {
    var a = this.bytes_[this.cursor_ + 0];
    this.cursor_ += 1;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return a << 24 >> 24;
};
jspb.BinaryDecoder.prototype.readInt16 = function() {
    var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
    this.cursor_ += 2;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return (a << 0 | b << 8) << 16 >> 16;
};
jspb.BinaryDecoder.prototype.readInt32 = function() {
    var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c = this.bytes_[this.cursor_ + 2], d = this.bytes_[this.cursor_ + 3];
    this.cursor_ += 4;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return a << 0 | b << 8 | c << 16 | d << 24;
};
jspb.BinaryDecoder.prototype.readInt64 = function() {
    var a = this.readUint32(), b = this.readUint32();
    return jspb.utils.joinInt64(a, b);
};
jspb.BinaryDecoder.prototype.readInt64String = function() {
    var a = this.readUint32(), b = this.readUint32();
    return jspb.utils.joinSignedDecimalString(a, b);
};
jspb.BinaryDecoder.prototype.readFloat = function() {
    var a = this.readUint32();
    return jspb.utils.joinFloat32(a, 0);
};
jspb.BinaryDecoder.prototype.readDouble = function() {
    var a = this.readUint32(), b = this.readUint32();
    return jspb.utils.joinFloat64(a, b);
};
jspb.BinaryDecoder.prototype.readBool = function() {
    return !!this.bytes_[this.cursor_++];
};
jspb.BinaryDecoder.prototype.readEnum = function() {
    return this.readSignedVarint32();
};
jspb.BinaryDecoder.prototype.readString = function(a) {
    var b = this.bytes_, c = this.cursor_;
    a = c + a;
    for(var d = [], e = ""; c < a;){
        var f = b[c++];
        if (128 > f) d.push(f);
        else if (192 > f) continue;
        else if (224 > f) {
            var g = b[c++];
            d.push((f & 31) << 6 | g & 63);
        } else if (240 > f) {
            g = b[c++];
            var h = b[c++];
            d.push((f & 15) << 12 | (g & 63) << 6 | h & 63);
        } else if (248 > f) {
            g = b[c++];
            h = b[c++];
            var k = b[c++];
            f = (f & 7) << 18 | (g & 63) << 12 | (h & 63) << 6 | k & 63;
            f -= 65536;
            d.push((f >> 10 & 1023) + 55296, (f & 1023) + 56320);
        }
        8192 <= d.length && (e += String.fromCharCode.apply(null, d), d.length = 0);
    }
    e += goog.crypt.byteArrayToString(d);
    this.cursor_ = c;
    return e;
};
jspb.BinaryDecoder.prototype.readStringWithLength = function() {
    var a = this.readUnsignedVarint32();
    return this.readString(a);
};
jspb.BinaryDecoder.prototype.readBytes = function(a) {
    if (0 > a || this.cursor_ + a > this.bytes_.length) return this.error_ = !0, jspb.asserts.fail("Invalid byte length!"), new Uint8Array(0);
    var b = this.bytes_.subarray(this.cursor_, this.cursor_ + a);
    this.cursor_ += a;
    jspb.asserts.assert(this.cursor_ <= this.end_);
    return b;
};
jspb.BinaryDecoder.prototype.readVarintHash64 = function() {
    return this.readSplitVarint64(jspb.utils.joinHash64);
};
jspb.BinaryDecoder.prototype.readFixedHash64 = function() {
    var a = this.bytes_, b = this.cursor_, c = a[b + 0], d = a[b + 1], e = a[b + 2], f = a[b + 3], g = a[b + 4], h = a[b + 5], k = a[b + 6];
    a = a[b + 7];
    this.cursor_ += 8;
    return String.fromCharCode(c, d, e, f, g, h, k, a);
};
jspb.BinaryReader = function(a, b, c) {
    this.decoder_ = jspb.BinaryDecoder.alloc(a, b, c);
    this.fieldCursor_ = this.decoder_.getCursor();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    this.error_ = !1;
    this.readCallbacks_ = null;
};
jspb.BinaryReader.instanceCache_ = [];
jspb.BinaryReader.alloc = function(a, b, c) {
    if (jspb.BinaryReader.instanceCache_.length) {
        var d = jspb.BinaryReader.instanceCache_.pop();
        a && d.decoder_.setBlock(a, b, c);
        return d;
    }
    return new jspb.BinaryReader(a, b, c);
};
jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc;
jspb.BinaryReader.prototype.free = function() {
    this.decoder_.clear();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    this.error_ = !1;
    this.readCallbacks_ = null;
    100 > jspb.BinaryReader.instanceCache_.length && jspb.BinaryReader.instanceCache_.push(this);
};
jspb.BinaryReader.prototype.getFieldCursor = function() {
    return this.fieldCursor_;
};
jspb.BinaryReader.prototype.getCursor = function() {
    return this.decoder_.getCursor();
};
jspb.BinaryReader.prototype.getBuffer = function() {
    return this.decoder_.getBuffer();
};
jspb.BinaryReader.prototype.getFieldNumber = function() {
    return this.nextField_;
};
goog.exportProperty(jspb.BinaryReader.prototype, "getFieldNumber", jspb.BinaryReader.prototype.getFieldNumber);
jspb.BinaryReader.prototype.getWireType = function() {
    return this.nextWireType_;
};
jspb.BinaryReader.prototype.isDelimited = function() {
    return this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED;
};
goog.exportProperty(jspb.BinaryReader.prototype, "isDelimited", jspb.BinaryReader.prototype.isDelimited);
jspb.BinaryReader.prototype.isEndGroup = function() {
    return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
};
goog.exportProperty(jspb.BinaryReader.prototype, "isEndGroup", jspb.BinaryReader.prototype.isEndGroup);
jspb.BinaryReader.prototype.getError = function() {
    return this.error_ || this.decoder_.getError();
};
jspb.BinaryReader.prototype.setBlock = function(a, b, c) {
    this.decoder_.setBlock(a, b, c);
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
};
jspb.BinaryReader.prototype.reset = function() {
    this.decoder_.reset();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
};
jspb.BinaryReader.prototype.advance = function(a) {
    this.decoder_.advance(a);
};
jspb.BinaryReader.prototype.nextField = function() {
    if (this.decoder_.atEnd()) return !1;
    if (this.getError()) return jspb.asserts.fail("Decoder hit an error"), !1;
    this.fieldCursor_ = this.decoder_.getCursor();
    var a = this.decoder_.readUnsignedVarint32(), b = a >>> 3;
    a &= 7;
    if (a != jspb.BinaryConstants.WireType.VARINT && a != jspb.BinaryConstants.WireType.FIXED32 && a != jspb.BinaryConstants.WireType.FIXED64 && a != jspb.BinaryConstants.WireType.DELIMITED && a != jspb.BinaryConstants.WireType.START_GROUP && a != jspb.BinaryConstants.WireType.END_GROUP) return jspb.asserts.fail("Invalid wire type: %s (at position %s)", a, this.fieldCursor_), this.error_ = !0, !1;
    this.nextField_ = b;
    this.nextWireType_ = a;
    return !0;
};
goog.exportProperty(jspb.BinaryReader.prototype, "nextField", jspb.BinaryReader.prototype.nextField);
jspb.BinaryReader.prototype.unskipHeader = function() {
    this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
};
jspb.BinaryReader.prototype.skipMatchingFields = function() {
    var a = this.nextField_;
    for(this.unskipHeader(); this.nextField() && this.getFieldNumber() == a;)this.skipField();
    this.decoder_.atEnd() || this.unskipHeader();
};
jspb.BinaryReader.prototype.skipVarintField = function() {
    this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (jspb.asserts.fail("Invalid wire type for skipVarintField"), this.skipField()) : this.decoder_.skipVarint();
};
jspb.BinaryReader.prototype.skipDelimitedField = function() {
    if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED) jspb.asserts.fail("Invalid wire type for skipDelimitedField"), this.skipField();
    else {
        var a = this.decoder_.readUnsignedVarint32();
        this.decoder_.advance(a);
    }
};
jspb.BinaryReader.prototype.skipFixed32Field = function() {
    this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (jspb.asserts.fail("Invalid wire type for skipFixed32Field"), this.skipField()) : this.decoder_.advance(4);
};
jspb.BinaryReader.prototype.skipFixed64Field = function() {
    this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (jspb.asserts.fail("Invalid wire type for skipFixed64Field"), this.skipField()) : this.decoder_.advance(8);
};
jspb.BinaryReader.prototype.skipGroup = function() {
    var a = this.nextField_;
    do {
        if (!this.nextField()) {
            jspb.asserts.fail("Unmatched start-group tag: stream EOF");
            this.error_ = !0;
            break;
        }
        if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP) {
            this.nextField_ != a && (jspb.asserts.fail("Unmatched end-group tag"), this.error_ = !0);
            break;
        }
        this.skipField();
    }while (1);
};
jspb.BinaryReader.prototype.skipField = function() {
    switch(this.nextWireType_){
        case jspb.BinaryConstants.WireType.VARINT:
            this.skipVarintField();
            break;
        case jspb.BinaryConstants.WireType.FIXED64:
            this.skipFixed64Field();
            break;
        case jspb.BinaryConstants.WireType.DELIMITED:
            this.skipDelimitedField();
            break;
        case jspb.BinaryConstants.WireType.FIXED32:
            this.skipFixed32Field();
            break;
        case jspb.BinaryConstants.WireType.START_GROUP:
            this.skipGroup();
            break;
        default:
            jspb.asserts.fail("Invalid wire encoding for field.");
    }
};
jspb.BinaryReader.prototype.registerReadCallback = function(a, b) {
    null === this.readCallbacks_ && (this.readCallbacks_ = {});
    jspb.asserts.assert(!this.readCallbacks_[a]);
    this.readCallbacks_[a] = b;
};
jspb.BinaryReader.prototype.runReadCallback = function(a) {
    jspb.asserts.assert(null !== this.readCallbacks_);
    a = this.readCallbacks_[a];
    jspb.asserts.assert(a);
    return a(this);
};
jspb.BinaryReader.prototype.readAny = function(a) {
    this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(a);
    var b = jspb.BinaryConstants.FieldType;
    switch(a){
        case b.DOUBLE:
            return this.readDouble();
        case b.FLOAT:
            return this.readFloat();
        case b.INT64:
            return this.readInt64();
        case b.UINT64:
            return this.readUint64();
        case b.INT32:
            return this.readInt32();
        case b.FIXED64:
            return this.readFixed64();
        case b.FIXED32:
            return this.readFixed32();
        case b.BOOL:
            return this.readBool();
        case b.STRING:
            return this.readString();
        case b.GROUP:
            jspb.asserts.fail("Group field type not supported in readAny()");
        case b.MESSAGE:
            jspb.asserts.fail("Message field type not supported in readAny()");
        case b.BYTES:
            return this.readBytes();
        case b.UINT32:
            return this.readUint32();
        case b.ENUM:
            return this.readEnum();
        case b.SFIXED32:
            return this.readSfixed32();
        case b.SFIXED64:
            return this.readSfixed64();
        case b.SINT32:
            return this.readSint32();
        case b.SINT64:
            return this.readSint64();
        case b.FHASH64:
            return this.readFixedHash64();
        case b.VHASH64:
            return this.readVarintHash64();
        default:
            jspb.asserts.fail("Invalid field type in readAny()");
    }
    return 0;
};
jspb.BinaryReader.prototype.readMessage = function(a, b) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var c = this.decoder_.getEnd(), d = this.decoder_.readUnsignedVarint32();
    d = this.decoder_.getCursor() + d;
    this.decoder_.setEnd(d);
    b(a, this);
    this.decoder_.setCursor(d);
    this.decoder_.setEnd(c);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readMessage", jspb.BinaryReader.prototype.readMessage);
jspb.BinaryReader.prototype.readGroup = function(a, b, c) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP);
    jspb.asserts.assert(this.nextField_ == a);
    c(b, this);
    this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (jspb.asserts.fail("Group submessage did not end with an END_GROUP tag"), this.error_ = !0);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readGroup", jspb.BinaryReader.prototype.readGroup);
jspb.BinaryReader.prototype.getFieldDecoder = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32(), b = this.decoder_.getCursor(), c = b + a;
    a = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), b, a);
    this.decoder_.setCursor(c);
    return a;
};
jspb.BinaryReader.prototype.readInt32 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readInt32", jspb.BinaryReader.prototype.readInt32);
jspb.BinaryReader.prototype.readInt32String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint32String();
};
jspb.BinaryReader.prototype.readInt64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readInt64", jspb.BinaryReader.prototype.readInt64);
jspb.BinaryReader.prototype.readInt64String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64String();
};
jspb.BinaryReader.prototype.readUint32 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readUint32", jspb.BinaryReader.prototype.readUint32);
jspb.BinaryReader.prototype.readUint32String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint32String();
};
jspb.BinaryReader.prototype.readUint64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readUint64", jspb.BinaryReader.prototype.readUint64);
jspb.BinaryReader.prototype.readUint64String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint64String();
};
jspb.BinaryReader.prototype.readSint32 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readSint32", jspb.BinaryReader.prototype.readSint32);
jspb.BinaryReader.prototype.readSint64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readSint64", jspb.BinaryReader.prototype.readSint64);
jspb.BinaryReader.prototype.readSint64String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint64String();
};
jspb.BinaryReader.prototype.readFixed32 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readUint32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readFixed32", jspb.BinaryReader.prototype.readFixed32);
jspb.BinaryReader.prototype.readFixed64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readUint64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readFixed64", jspb.BinaryReader.prototype.readFixed64);
jspb.BinaryReader.prototype.readFixed64String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readUint64String();
};
jspb.BinaryReader.prototype.readSfixed32 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readInt32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readSfixed32", jspb.BinaryReader.prototype.readSfixed32);
jspb.BinaryReader.prototype.readSfixed32String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readInt32().toString();
};
jspb.BinaryReader.prototype.readSfixed64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readInt64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readSfixed64", jspb.BinaryReader.prototype.readSfixed64);
jspb.BinaryReader.prototype.readSfixed64String = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readInt64String();
};
jspb.BinaryReader.prototype.readFloat = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readFloat();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readFloat", jspb.BinaryReader.prototype.readFloat);
jspb.BinaryReader.prototype.readDouble = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readDouble();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readDouble", jspb.BinaryReader.prototype.readDouble);
jspb.BinaryReader.prototype.readBool = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return !!this.decoder_.readUnsignedVarint32();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readBool", jspb.BinaryReader.prototype.readBool);
jspb.BinaryReader.prototype.readEnum = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64();
};
goog.exportProperty(jspb.BinaryReader.prototype, "readEnum", jspb.BinaryReader.prototype.readEnum);
jspb.BinaryReader.prototype.readString = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32();
    return this.decoder_.readString(a);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readString", jspb.BinaryReader.prototype.readString);
jspb.BinaryReader.prototype.readBytes = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32();
    return this.decoder_.readBytes(a);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readBytes", jspb.BinaryReader.prototype.readBytes);
jspb.BinaryReader.prototype.readVarintHash64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readVarintHash64();
};
jspb.BinaryReader.prototype.readSintHash64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarintHash64();
};
jspb.BinaryReader.prototype.readSplitVarint64 = function(a) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSplitVarint64(a);
};
jspb.BinaryReader.prototype.readSplitZigzagVarint64 = function(a) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSplitVarint64(function(b, c) {
        return jspb.utils.fromZigzag64(b, c, a);
    });
};
jspb.BinaryReader.prototype.readFixedHash64 = function() {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readFixedHash64();
};
jspb.BinaryReader.prototype.readSplitFixed64 = function(a) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readSplitFixed64(a);
};
jspb.BinaryReader.prototype.readPackedField_ = function(a) {
    jspb.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var b = this.decoder_.readUnsignedVarint32();
    b = this.decoder_.getCursor() + b;
    for(var c = []; this.decoder_.getCursor() < b;)c.push(a.call(this.decoder_));
    return c;
};
jspb.BinaryReader.prototype.readPackedInt32 = function() {
    return this.readPackedField_(this.decoder_.readSignedVarint32);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedInt32", jspb.BinaryReader.prototype.readPackedInt32);
jspb.BinaryReader.prototype.readPackedInt32String = function() {
    return this.readPackedField_(this.decoder_.readSignedVarint32String);
};
jspb.BinaryReader.prototype.readPackedInt64 = function() {
    return this.readPackedField_(this.decoder_.readSignedVarint64);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedInt64", jspb.BinaryReader.prototype.readPackedInt64);
jspb.BinaryReader.prototype.readPackedInt64String = function() {
    return this.readPackedField_(this.decoder_.readSignedVarint64String);
};
jspb.BinaryReader.prototype.readPackedUint32 = function() {
    return this.readPackedField_(this.decoder_.readUnsignedVarint32);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedUint32", jspb.BinaryReader.prototype.readPackedUint32);
jspb.BinaryReader.prototype.readPackedUint32String = function() {
    return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
};
jspb.BinaryReader.prototype.readPackedUint64 = function() {
    return this.readPackedField_(this.decoder_.readUnsignedVarint64);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedUint64", jspb.BinaryReader.prototype.readPackedUint64);
jspb.BinaryReader.prototype.readPackedUint64String = function() {
    return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
};
jspb.BinaryReader.prototype.readPackedSint32 = function() {
    return this.readPackedField_(this.decoder_.readZigzagVarint32);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedSint32", jspb.BinaryReader.prototype.readPackedSint32);
jspb.BinaryReader.prototype.readPackedSint64 = function() {
    return this.readPackedField_(this.decoder_.readZigzagVarint64);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedSint64", jspb.BinaryReader.prototype.readPackedSint64);
jspb.BinaryReader.prototype.readPackedSint64String = function() {
    return this.readPackedField_(this.decoder_.readZigzagVarint64String);
};
jspb.BinaryReader.prototype.readPackedFixed32 = function() {
    return this.readPackedField_(this.decoder_.readUint32);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedFixed32", jspb.BinaryReader.prototype.readPackedFixed32);
jspb.BinaryReader.prototype.readPackedFixed64 = function() {
    return this.readPackedField_(this.decoder_.readUint64);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedFixed64", jspb.BinaryReader.prototype.readPackedFixed64);
jspb.BinaryReader.prototype.readPackedFixed64String = function() {
    return this.readPackedField_(this.decoder_.readUint64String);
};
jspb.BinaryReader.prototype.readPackedSfixed32 = function() {
    return this.readPackedField_(this.decoder_.readInt32);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedSfixed32", jspb.BinaryReader.prototype.readPackedSfixed32);
jspb.BinaryReader.prototype.readPackedSfixed64 = function() {
    return this.readPackedField_(this.decoder_.readInt64);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedSfixed64", jspb.BinaryReader.prototype.readPackedSfixed64);
jspb.BinaryReader.prototype.readPackedSfixed64String = function() {
    return this.readPackedField_(this.decoder_.readInt64String);
};
jspb.BinaryReader.prototype.readPackedFloat = function() {
    return this.readPackedField_(this.decoder_.readFloat);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedFloat", jspb.BinaryReader.prototype.readPackedFloat);
jspb.BinaryReader.prototype.readPackedDouble = function() {
    return this.readPackedField_(this.decoder_.readDouble);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedDouble", jspb.BinaryReader.prototype.readPackedDouble);
jspb.BinaryReader.prototype.readPackedBool = function() {
    return this.readPackedField_(this.decoder_.readBool);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedBool", jspb.BinaryReader.prototype.readPackedBool);
jspb.BinaryReader.prototype.readPackedEnum = function() {
    return this.readPackedField_(this.decoder_.readEnum);
};
goog.exportProperty(jspb.BinaryReader.prototype, "readPackedEnum", jspb.BinaryReader.prototype.readPackedEnum);
jspb.BinaryReader.prototype.readPackedVarintHash64 = function() {
    return this.readPackedField_(this.decoder_.readVarintHash64);
};
jspb.BinaryReader.prototype.readPackedFixedHash64 = function() {
    return this.readPackedField_(this.decoder_.readFixedHash64);
};
jspb.BinaryEncoder = function() {
    this.buffer_ = [];
};
jspb.BinaryEncoder.prototype.length = function() {
    return this.buffer_.length;
};
jspb.BinaryEncoder.prototype.end = function() {
    var a = this.buffer_;
    this.buffer_ = [];
    return a;
};
jspb.BinaryEncoder.prototype.writeSplitVarint64 = function(a, b) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(b == Math.floor(b));
    jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
    for(jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32); 0 < b || 127 < a;)this.buffer_.push(a & 127 | 128), a = (a >>> 7 | b << 25) >>> 0, b >>>= 7;
    this.buffer_.push(a);
};
jspb.BinaryEncoder.prototype.writeSplitFixed64 = function(a, b) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(b == Math.floor(b));
    jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
    jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32);
    this.writeUint32(a);
    this.writeUint32(b);
};
jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    for(jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32); 127 < a;)this.buffer_.push(a & 127 | 128), a >>>= 7;
    this.buffer_.push(a);
};
jspb.BinaryEncoder.prototype.writeSignedVarint32 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    if (0 <= a) this.writeUnsignedVarint32(a);
    else {
        for(var b = 0; 9 > b; b++)this.buffer_.push(a & 127 | 128), a >>= 7;
        this.buffer_.push(1);
    }
};
jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
    jspb.utils.splitInt64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeSignedVarint64 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitInt64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.writeUnsignedVarint32((a << 1 ^ a >> 31) >>> 0);
};
jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitZigzag64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function(a) {
    this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a));
};
jspb.BinaryEncoder.prototype.writeZigzagVarintHash64 = function(a) {
    var b = this;
    jspb.utils.splitHash64(a);
    jspb.utils.toZigzag64(jspb.utils.split64Low, jspb.utils.split64High, function(a, d) {
        b.writeSplitVarint64(a >>> 0, d >>> 0);
    });
};
jspb.BinaryEncoder.prototype.writeUint8 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(0 <= a && 256 > a);
    this.buffer_.push(a >>> 0 & 255);
};
jspb.BinaryEncoder.prototype.writeUint16 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(0 <= a && 65536 > a);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
};
jspb.BinaryEncoder.prototype.writeUint32 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
    this.buffer_.push(a >>> 16 & 255);
    this.buffer_.push(a >>> 24 & 255);
};
jspb.BinaryEncoder.prototype.writeUint64 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
    jspb.utils.splitUint64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeInt8 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(-128 <= a && 128 > a);
    this.buffer_.push(a >>> 0 & 255);
};
jspb.BinaryEncoder.prototype.writeInt16 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(-32768 <= a && 32768 > a);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
};
jspb.BinaryEncoder.prototype.writeInt32 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
    this.buffer_.push(a >>> 16 & 255);
    this.buffer_.push(a >>> 24 & 255);
};
jspb.BinaryEncoder.prototype.writeInt64 = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitInt64(a);
    this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeInt64String = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(+a >= -jspb.BinaryConstants.TWO_TO_63 && +a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
    this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeFloat = function(a) {
    jspb.asserts.assert(Infinity === a || -Infinity === a || isNaN(a) || a >= -jspb.BinaryConstants.FLOAT32_MAX && a <= jspb.BinaryConstants.FLOAT32_MAX);
    jspb.utils.splitFloat32(a);
    this.writeUint32(jspb.utils.split64Low);
};
jspb.BinaryEncoder.prototype.writeDouble = function(a) {
    jspb.asserts.assert(Infinity === a || -Infinity === a || isNaN(a) || a >= -jspb.BinaryConstants.FLOAT64_MAX && a <= jspb.BinaryConstants.FLOAT64_MAX);
    jspb.utils.splitFloat64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeBool = function(a) {
    jspb.asserts.assert("boolean" === typeof a || "number" === typeof a);
    this.buffer_.push(a ? 1 : 0);
};
jspb.BinaryEncoder.prototype.writeEnum = function(a) {
    jspb.asserts.assert(a == Math.floor(a));
    jspb.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.writeSignedVarint32(a);
};
jspb.BinaryEncoder.prototype.writeBytes = function(a) {
    this.buffer_.push.apply(this.buffer_, a);
};
jspb.BinaryEncoder.prototype.writeVarintHash64 = function(a) {
    jspb.utils.splitHash64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeFixedHash64 = function(a) {
    jspb.utils.splitHash64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
};
jspb.BinaryEncoder.prototype.writeString = function(a) {
    var b = this.buffer_.length;
    jspb.asserts.assertString(a);
    for(var c = 0; c < a.length; c++){
        var d = a.charCodeAt(c);
        if (128 > d) this.buffer_.push(d);
        else if (2048 > d) this.buffer_.push(d >> 6 | 192), this.buffer_.push(d & 63 | 128);
        else if (65536 > d) {
            if (55296 <= d && 56319 >= d && c + 1 < a.length) {
                var e = a.charCodeAt(c + 1);
                56320 <= e && 57343 >= e && (d = 1024 * (d - 55296) + e - 56320 + 65536, this.buffer_.push(d >> 18 | 240), this.buffer_.push(d >> 12 & 63 | 128), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128), c++);
            } else this.buffer_.push(d >> 12 | 224), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128);
        }
    }
    return this.buffer_.length - b;
};
jspb.arith = {};
jspb.arith.UInt64 = function(a, b) {
    this.lo = a;
    this.hi = b;
};
jspb.arith.UInt64.prototype.cmp = function(a) {
    return this.hi < a.hi || this.hi == a.hi && this.lo < a.lo ? -1 : this.hi == a.hi && this.lo == a.lo ? 0 : 1;
};
jspb.arith.UInt64.prototype.rightShift = function() {
    return new jspb.arith.UInt64((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
};
jspb.arith.UInt64.prototype.leftShift = function() {
    return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
};
jspb.arith.UInt64.prototype.msb = function() {
    return !!(this.hi & 2147483648);
};
jspb.arith.UInt64.prototype.lsb = function() {
    return !!(this.lo & 1);
};
jspb.arith.UInt64.prototype.zero = function() {
    return 0 == this.lo && 0 == this.hi;
};
jspb.arith.UInt64.prototype.add = function(a) {
    return new jspb.arith.UInt64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
};
jspb.arith.UInt64.prototype.sub = function(a) {
    return new jspb.arith.UInt64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
};
jspb.arith.UInt64.mul32x32 = function(a, b) {
    var c = a & 65535;
    a >>>= 16;
    var d = b & 65535, e = b >>> 16;
    b = c * d + 65536 * (c * e & 65535) + 65536 * (a * d & 65535);
    for(c = a * e + (c * e >>> 16) + (a * d >>> 16); 4294967296 <= b;)b -= 4294967296, c += 1;
    return new jspb.arith.UInt64(b >>> 0, c >>> 0);
};
jspb.arith.UInt64.prototype.mul = function(a) {
    var b = jspb.arith.UInt64.mul32x32(this.lo, a);
    a = jspb.arith.UInt64.mul32x32(this.hi, a);
    a.hi = a.lo;
    a.lo = 0;
    return b.add(a);
};
jspb.arith.UInt64.prototype.div = function(a) {
    if (0 == a) return [];
    var b = new jspb.arith.UInt64(0, 0), c = new jspb.arith.UInt64(this.lo, this.hi);
    a = new jspb.arith.UInt64(a, 0);
    for(var d = new jspb.arith.UInt64(1, 0); !a.msb();)a = a.leftShift(), d = d.leftShift();
    for(; !d.zero();)0 >= a.cmp(c) && (b = b.add(d), c = c.sub(a)), a = a.rightShift(), d = d.rightShift();
    return [
        b,
        c
    ];
};
jspb.arith.UInt64.prototype.toString = function() {
    for(var a = "", b = this; !b.zero();){
        b = b.div(10);
        var c = b[0];
        a = b[1].lo + a;
        b = c;
    }
    "" == a && (a = "0");
    return a;
};
jspb.arith.UInt64.fromString = function(a) {
    for(var b = new jspb.arith.UInt64(0, 0), c = new jspb.arith.UInt64(0, 0), d = 0; d < a.length; d++){
        if ("0" > a[d] || "9" < a[d]) return null;
        var e = parseInt(a[d], 10);
        c.lo = e;
        b = b.mul(10).add(c);
    }
    return b;
};
jspb.arith.UInt64.prototype.clone = function() {
    return new jspb.arith.UInt64(this.lo, this.hi);
};
jspb.arith.Int64 = function(a, b) {
    this.lo = a;
    this.hi = b;
};
jspb.arith.Int64.prototype.add = function(a) {
    return new jspb.arith.Int64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
};
jspb.arith.Int64.prototype.sub = function(a) {
    return new jspb.arith.Int64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
};
jspb.arith.Int64.prototype.clone = function() {
    return new jspb.arith.Int64(this.lo, this.hi);
};
jspb.arith.Int64.prototype.toString = function() {
    var a = 0 != (this.hi & 2147483648), b = new jspb.arith.UInt64(this.lo, this.hi);
    a && (b = new jspb.arith.UInt64(0, 0).sub(b));
    return (a ? "-" : "") + b.toString();
};
jspb.arith.Int64.fromString = function(a) {
    var b = 0 < a.length && "-" == a[0];
    b && (a = a.substring(1));
    a = jspb.arith.UInt64.fromString(a);
    if (null === a) return null;
    b && (a = new jspb.arith.UInt64(0, 0).sub(a));
    return new jspb.arith.Int64(a.lo, a.hi);
};
jspb.BinaryWriter = function() {
    this.blocks_ = [];
    this.totalLength_ = 0;
    this.encoder_ = new jspb.BinaryEncoder;
    this.bookmarks_ = [];
};
jspb.BinaryWriter.prototype.appendUint8Array_ = function(a) {
    var b = this.encoder_.end();
    this.blocks_.push(b);
    this.blocks_.push(a);
    this.totalLength_ += b.length + a.length;
};
jspb.BinaryWriter.prototype.beginDelimited_ = function(a) {
    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
    a = this.encoder_.end();
    this.blocks_.push(a);
    this.totalLength_ += a.length;
    a.push(this.totalLength_);
    return a;
};
jspb.BinaryWriter.prototype.endDelimited_ = function(a) {
    var b = a.pop();
    b = this.totalLength_ + this.encoder_.length() - b;
    for(jspb.asserts.assert(0 <= b); 127 < b;)a.push(b & 127 | 128), b >>>= 7, this.totalLength_++;
    a.push(b);
    this.totalLength_++;
};
jspb.BinaryWriter.prototype.writeSerializedMessage = function(a, b, c) {
    this.appendUint8Array_(a.subarray(b, c));
};
jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function(a, b, c) {
    null != a && null != b && null != c && this.writeSerializedMessage(a, b, c);
};
jspb.BinaryWriter.prototype.reset = function() {
    this.blocks_ = [];
    this.encoder_.end();
    this.totalLength_ = 0;
    this.bookmarks_ = [];
};
jspb.BinaryWriter.prototype.getResultBuffer = function() {
    jspb.asserts.assert(0 == this.bookmarks_.length);
    for(var a = new Uint8Array(this.totalLength_ + this.encoder_.length()), b = this.blocks_, c = b.length, d = 0, e = 0; e < c; e++){
        var f = b[e];
        a.set(f, d);
        d += f.length;
    }
    b = this.encoder_.end();
    a.set(b, d);
    d += b.length;
    jspb.asserts.assert(d == a.length);
    this.blocks_ = [
        a
    ];
    return a;
};
goog.exportProperty(jspb.BinaryWriter.prototype, "getResultBuffer", jspb.BinaryWriter.prototype.getResultBuffer);
jspb.BinaryWriter.prototype.getResultBase64String = function(a) {
    return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), a);
};
jspb.BinaryWriter.prototype.beginSubMessage = function(a) {
    this.bookmarks_.push(this.beginDelimited_(a));
};
jspb.BinaryWriter.prototype.endSubMessage = function() {
    jspb.asserts.assert(0 <= this.bookmarks_.length);
    this.endDelimited_(this.bookmarks_.pop());
};
jspb.BinaryWriter.prototype.writeFieldHeader_ = function(a, b) {
    jspb.asserts.assert(1 <= a && a == Math.floor(a));
    this.encoder_.writeUnsignedVarint32(8 * a + b);
};
jspb.BinaryWriter.prototype.writeAny = function(a, b, c) {
    var d = jspb.BinaryConstants.FieldType;
    switch(a){
        case d.DOUBLE:
            this.writeDouble(b, c);
            break;
        case d.FLOAT:
            this.writeFloat(b, c);
            break;
        case d.INT64:
            this.writeInt64(b, c);
            break;
        case d.UINT64:
            this.writeUint64(b, c);
            break;
        case d.INT32:
            this.writeInt32(b, c);
            break;
        case d.FIXED64:
            this.writeFixed64(b, c);
            break;
        case d.FIXED32:
            this.writeFixed32(b, c);
            break;
        case d.BOOL:
            this.writeBool(b, c);
            break;
        case d.STRING:
            this.writeString(b, c);
            break;
        case d.GROUP:
            jspb.asserts.fail("Group field type not supported in writeAny()");
            break;
        case d.MESSAGE:
            jspb.asserts.fail("Message field type not supported in writeAny()");
            break;
        case d.BYTES:
            this.writeBytes(b, c);
            break;
        case d.UINT32:
            this.writeUint32(b, c);
            break;
        case d.ENUM:
            this.writeEnum(b, c);
            break;
        case d.SFIXED32:
            this.writeSfixed32(b, c);
            break;
        case d.SFIXED64:
            this.writeSfixed64(b, c);
            break;
        case d.SINT32:
            this.writeSint32(b, c);
            break;
        case d.SINT64:
            this.writeSint64(b, c);
            break;
        case d.FHASH64:
            this.writeFixedHash64(b, c);
            break;
        case d.VHASH64:
            this.writeVarintHash64(b, c);
            break;
        default:
            jspb.asserts.fail("Invalid field type in writeAny()");
    }
};
jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(b));
};
jspb.BinaryWriter.prototype.writeSignedVarint32_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
};
jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(b));
};
jspb.BinaryWriter.prototype.writeSignedVarint64_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(b));
};
jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(b));
};
jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(b));
};
jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(b));
};
jspb.BinaryWriter.prototype.writeZigzagVarintHash64_ = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarintHash64(b));
};
jspb.BinaryWriter.prototype.writeInt32 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeInt32", jspb.BinaryWriter.prototype.writeInt32);
jspb.BinaryWriter.prototype.writeInt32String = function(a, b) {
    null != b && (b = parseInt(b, 10), jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a, b));
};
jspb.BinaryWriter.prototype.writeInt64 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeSignedVarint64_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeInt64", jspb.BinaryWriter.prototype.writeInt64);
jspb.BinaryWriter.prototype.writeInt64String = function(a, b) {
    null != b && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
};
jspb.BinaryWriter.prototype.writeUint32 = function(a, b) {
    null != b && (jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeUint32", jspb.BinaryWriter.prototype.writeUint32);
jspb.BinaryWriter.prototype.writeUint32String = function(a, b) {
    null != b && (b = parseInt(b, 10), jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a, b));
};
jspb.BinaryWriter.prototype.writeUint64 = function(a, b) {
    null != b && (jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeUnsignedVarint64_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeUint64", jspb.BinaryWriter.prototype.writeUint64);
jspb.BinaryWriter.prototype.writeUint64String = function(a, b) {
    null != b && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
};
jspb.BinaryWriter.prototype.writeSint32 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeZigzagVarint32_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeSint32", jspb.BinaryWriter.prototype.writeSint32);
jspb.BinaryWriter.prototype.writeSint64 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64_(a, b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeSint64", jspb.BinaryWriter.prototype.writeSint64);
jspb.BinaryWriter.prototype.writeSintHash64 = function(a, b) {
    null != b && this.writeZigzagVarintHash64_(a, b);
};
jspb.BinaryWriter.prototype.writeSint64String = function(a, b) {
    null != b && this.writeZigzagVarint64String_(a, b);
};
jspb.BinaryWriter.prototype.writeFixed32 = function(a, b) {
    null != b && (jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeFixed32", jspb.BinaryWriter.prototype.writeFixed32);
jspb.BinaryWriter.prototype.writeFixed64 = function(a, b) {
    null != b && (jspb.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeFixed64", jspb.BinaryWriter.prototype.writeFixed64);
jspb.BinaryWriter.prototype.writeFixed64String = function(a, b) {
    null != b && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
};
jspb.BinaryWriter.prototype.writeSfixed32 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeSfixed32", jspb.BinaryWriter.prototype.writeSfixed32);
jspb.BinaryWriter.prototype.writeSfixed64 = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeSfixed64", jspb.BinaryWriter.prototype.writeSfixed64);
jspb.BinaryWriter.prototype.writeSfixed64String = function(a, b) {
    null != b && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
};
jspb.BinaryWriter.prototype.writeFloat = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeFloat(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeFloat", jspb.BinaryWriter.prototype.writeFloat);
jspb.BinaryWriter.prototype.writeDouble = function(a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeDouble(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeDouble", jspb.BinaryWriter.prototype.writeDouble);
jspb.BinaryWriter.prototype.writeBool = function(a, b) {
    null != b && (jspb.asserts.assert("boolean" === typeof b || "number" === typeof b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeBool(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeBool", jspb.BinaryWriter.prototype.writeBool);
jspb.BinaryWriter.prototype.writeEnum = function(a, b) {
    null != b && (jspb.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeEnum", jspb.BinaryWriter.prototype.writeEnum);
jspb.BinaryWriter.prototype.writeString = function(a, b) {
    null != b && (a = this.beginDelimited_(a), this.encoder_.writeString(b), this.endDelimited_(a));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeString", jspb.BinaryWriter.prototype.writeString);
jspb.BinaryWriter.prototype.writeBytes = function(a, b) {
    null != b && (b = jspb.utils.byteSourceToUint8Array(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), this.appendUint8Array_(b));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeBytes", jspb.BinaryWriter.prototype.writeBytes);
jspb.BinaryWriter.prototype.writeMessage = function(a, b, c) {
    null != b && (a = this.beginDelimited_(a), c(b, this), this.endDelimited_(a));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeMessage", jspb.BinaryWriter.prototype.writeMessage);
jspb.BinaryWriter.prototype.writeMessageSet = function(a, b, c) {
    null != b && (this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.START_GROUP), this.writeFieldHeader_(2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(a), a = this.beginDelimited_(3), c(b, this), this.endDelimited_(a), this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.END_GROUP));
};
jspb.BinaryWriter.prototype.writeGroup = function(a, b, c) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), c(b, this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP));
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeGroup", jspb.BinaryWriter.prototype.writeGroup);
jspb.BinaryWriter.prototype.writeFixedHash64 = function(a, b) {
    null != b && (jspb.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeFixedHash64(b));
};
jspb.BinaryWriter.prototype.writeVarintHash64 = function(a, b) {
    null != b && (jspb.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeVarintHash64(b));
};
jspb.BinaryWriter.prototype.writeSplitFixed64 = function(a, b, c) {
    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64);
    this.encoder_.writeSplitFixed64(b, c);
};
jspb.BinaryWriter.prototype.writeSplitVarint64 = function(a, b, c) {
    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT);
    this.encoder_.writeSplitVarint64(b, c);
};
jspb.BinaryWriter.prototype.writeSplitZigzagVarint64 = function(a, b, c) {
    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT);
    var d = this.encoder_;
    jspb.utils.toZigzag64(b, c, function(a, b) {
        d.writeSplitVarint64(a >>> 0, b >>> 0);
    });
};
jspb.BinaryWriter.prototype.writeRepeatedInt32 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeSignedVarint32_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedInt32", jspb.BinaryWriter.prototype.writeRepeatedInt32);
jspb.BinaryWriter.prototype.writeRepeatedInt32String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeInt32String(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedInt64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeSignedVarint64_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedInt64", jspb.BinaryWriter.prototype.writeRepeatedInt64);
jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64 = function(a, b, c, d) {
    if (null != b) for(var e = 0; e < b.length; e++)this.writeSplitFixed64(a, c(b[e]), d(b[e]));
};
jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64 = function(a, b, c, d) {
    if (null != b) for(var e = 0; e < b.length; e++)this.writeSplitVarint64(a, c(b[e]), d(b[e]));
};
jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64 = function(a, b, c, d) {
    if (null != b) for(var e = 0; e < b.length; e++)this.writeSplitZigzagVarint64(a, c(b[e]), d(b[e]));
};
jspb.BinaryWriter.prototype.writeRepeatedInt64String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeInt64String(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedUint32 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeUnsignedVarint32_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedUint32", jspb.BinaryWriter.prototype.writeRepeatedUint32);
jspb.BinaryWriter.prototype.writeRepeatedUint32String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeUint32String(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedUint64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeUnsignedVarint64_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedUint64", jspb.BinaryWriter.prototype.writeRepeatedUint64);
jspb.BinaryWriter.prototype.writeRepeatedUint64String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeUint64String(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedSint32 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeZigzagVarint32_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedSint32", jspb.BinaryWriter.prototype.writeRepeatedSint32);
jspb.BinaryWriter.prototype.writeRepeatedSint64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeZigzagVarint64_(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedSint64", jspb.BinaryWriter.prototype.writeRepeatedSint64);
jspb.BinaryWriter.prototype.writeRepeatedSint64String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeZigzagVarint64String_(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedSintHash64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeZigzagVarintHash64_(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeFixed32(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedFixed32", jspb.BinaryWriter.prototype.writeRepeatedFixed32);
jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeFixed64(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedFixed64", jspb.BinaryWriter.prototype.writeRepeatedFixed64);
jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeFixed64String(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedFixed64String", jspb.BinaryWriter.prototype.writeRepeatedFixed64String);
jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeSfixed32(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedSfixed32", jspb.BinaryWriter.prototype.writeRepeatedSfixed32);
jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeSfixed64(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedSfixed64", jspb.BinaryWriter.prototype.writeRepeatedSfixed64);
jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeSfixed64String(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedFloat = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeFloat(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedFloat", jspb.BinaryWriter.prototype.writeRepeatedFloat);
jspb.BinaryWriter.prototype.writeRepeatedDouble = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeDouble(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedDouble", jspb.BinaryWriter.prototype.writeRepeatedDouble);
jspb.BinaryWriter.prototype.writeRepeatedBool = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeBool(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedBool", jspb.BinaryWriter.prototype.writeRepeatedBool);
jspb.BinaryWriter.prototype.writeRepeatedEnum = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeEnum(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedEnum", jspb.BinaryWriter.prototype.writeRepeatedEnum);
jspb.BinaryWriter.prototype.writeRepeatedString = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeString(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedString", jspb.BinaryWriter.prototype.writeRepeatedString);
jspb.BinaryWriter.prototype.writeRepeatedBytes = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeBytes(a, b[c]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedBytes", jspb.BinaryWriter.prototype.writeRepeatedBytes);
jspb.BinaryWriter.prototype.writeRepeatedMessage = function(a, b, c) {
    if (null != b) for(var d = 0; d < b.length; d++){
        var e = this.beginDelimited_(a);
        c(b[d], this);
        this.endDelimited_(e);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedMessage", jspb.BinaryWriter.prototype.writeRepeatedMessage);
jspb.BinaryWriter.prototype.writeRepeatedGroup = function(a, b, c) {
    if (null != b) for(var d = 0; d < b.length; d++)this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), c(b[d], this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writeRepeatedGroup", jspb.BinaryWriter.prototype.writeRepeatedGroup);
jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeFixedHash64(a, b[c]);
};
jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function(a, b) {
    if (null != b) for(var c = 0; c < b.length; c++)this.writeVarintHash64(a, b[c]);
};
jspb.BinaryWriter.prototype.writePackedInt32 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeSignedVarint32(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedInt32", jspb.BinaryWriter.prototype.writePackedInt32);
jspb.BinaryWriter.prototype.writePackedInt32String = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeSignedVarint32(parseInt(b[c], 10));
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedInt64 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeSignedVarint64(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedInt64", jspb.BinaryWriter.prototype.writePackedInt64);
jspb.BinaryWriter.prototype.writePackedSplitFixed64 = function(a, b, c, d) {
    if (null != b) {
        a = this.beginDelimited_(a);
        for(var e = 0; e < b.length; e++)this.encoder_.writeSplitFixed64(c(b[e]), d(b[e]));
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedSplitVarint64 = function(a, b, c, d) {
    if (null != b) {
        a = this.beginDelimited_(a);
        for(var e = 0; e < b.length; e++)this.encoder_.writeSplitVarint64(c(b[e]), d(b[e]));
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64 = function(a, b, c, d) {
    if (null != b) {
        a = this.beginDelimited_(a);
        for(var e = this.encoder_, f = 0; f < b.length; f++)jspb.utils.toZigzag64(c(b[f]), d(b[f]), function(a, b) {
            e.writeSplitVarint64(a >>> 0, b >>> 0);
        });
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedInt64String = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++){
            var d = jspb.arith.Int64.fromString(b[c]);
            this.encoder_.writeSplitVarint64(d.lo, d.hi);
        }
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedUint32 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeUnsignedVarint32(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedUint32", jspb.BinaryWriter.prototype.writePackedUint32);
jspb.BinaryWriter.prototype.writePackedUint32String = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c], 10));
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedUint64 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeUnsignedVarint64(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedUint64", jspb.BinaryWriter.prototype.writePackedUint64);
jspb.BinaryWriter.prototype.writePackedUint64String = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++){
            var d = jspb.arith.UInt64.fromString(b[c]);
            this.encoder_.writeSplitVarint64(d.lo, d.hi);
        }
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedSint32 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeZigzagVarint32(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedSint32", jspb.BinaryWriter.prototype.writePackedSint32);
jspb.BinaryWriter.prototype.writePackedSint64 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeZigzagVarint64(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedSint64", jspb.BinaryWriter.prototype.writePackedSint64);
jspb.BinaryWriter.prototype.writePackedSint64String = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedSintHash64 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeZigzagVarintHash64(b[c]);
        this.endDelimited_(a);
    }
};
jspb.BinaryWriter.prototype.writePackedFixed32 = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++)this.encoder_.writeUint32(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedFixed32", jspb.BinaryWriter.prototype.writePackedFixed32);
jspb.BinaryWriter.prototype.writePackedFixed64 = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++)this.encoder_.writeUint64(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedFixed64", jspb.BinaryWriter.prototype.writePackedFixed64);
jspb.BinaryWriter.prototype.writePackedFixed64String = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++){
        var c = jspb.arith.UInt64.fromString(b[a]);
        this.encoder_.writeSplitFixed64(c.lo, c.hi);
    }
};
jspb.BinaryWriter.prototype.writePackedSfixed32 = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++)this.encoder_.writeInt32(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedSfixed32", jspb.BinaryWriter.prototype.writePackedSfixed32);
jspb.BinaryWriter.prototype.writePackedSfixed64 = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++)this.encoder_.writeInt64(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedSfixed64", jspb.BinaryWriter.prototype.writePackedSfixed64);
jspb.BinaryWriter.prototype.writePackedSfixed64String = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++)this.encoder_.writeInt64String(b[a]);
};
jspb.BinaryWriter.prototype.writePackedFloat = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++)this.encoder_.writeFloat(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedFloat", jspb.BinaryWriter.prototype.writePackedFloat);
jspb.BinaryWriter.prototype.writePackedDouble = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++)this.encoder_.writeDouble(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedDouble", jspb.BinaryWriter.prototype.writePackedDouble);
jspb.BinaryWriter.prototype.writePackedBool = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), a = 0; a < b.length; a++)this.encoder_.writeBool(b[a]);
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedBool", jspb.BinaryWriter.prototype.writePackedBool);
jspb.BinaryWriter.prototype.writePackedEnum = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeEnum(b[c]);
        this.endDelimited_(a);
    }
};
goog.exportProperty(jspb.BinaryWriter.prototype, "writePackedEnum", jspb.BinaryWriter.prototype.writePackedEnum);
jspb.BinaryWriter.prototype.writePackedFixedHash64 = function(a, b) {
    if (null != b && b.length) for(this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++)this.encoder_.writeFixedHash64(b[a]);
};
jspb.BinaryWriter.prototype.writePackedVarintHash64 = function(a, b) {
    if (null != b && b.length) {
        a = this.beginDelimited_(a);
        for(var c = 0; c < b.length; c++)this.encoder_.writeVarintHash64(b[c]);
        this.endDelimited_(a);
    }
};
jspb.Map = function(a, b) {
    this.arr_ = a;
    this.valueCtor_ = b;
    this.map_ = {};
    this.arrClean = !0;
    0 < this.arr_.length && this.loadFromArray_();
};
goog.exportSymbol("jspb.Map", jspb.Map);
jspb.Map.prototype.loadFromArray_ = function() {
    for(var a = 0; a < this.arr_.length; a++){
        var b = this.arr_[a], c = b[0];
        this.map_[c.toString()] = new jspb.Map.Entry_(c, b[1]);
    }
    this.arrClean = !0;
};
jspb.Map.prototype.toArray = function() {
    if (this.arrClean) {
        if (this.valueCtor_) {
            var a = this.map_, b;
            for(b in a)if (Object.prototype.hasOwnProperty.call(a, b)) {
                var c = a[b].valueWrapper;
                c && c.toArray();
            }
        }
    } else {
        this.arr_.length = 0;
        a = this.stringKeys_();
        a.sort();
        for(b = 0; b < a.length; b++){
            var d = this.map_[a[b]];
            (c = d.valueWrapper) && c.toArray();
            this.arr_.push([
                d.key,
                d.value
            ]);
        }
        this.arrClean = !0;
    }
    return this.arr_;
};
goog.exportProperty(jspb.Map.prototype, "toArray", jspb.Map.prototype.toArray);
jspb.Map.prototype.toObject = function(a, b) {
    for(var c = this.toArray(), d = [], e = 0; e < c.length; e++){
        var f = this.map_[c[e][0].toString()];
        this.wrapEntry_(f);
        var g = f.valueWrapper;
        g ? (jspb.asserts.assert(b), d.push([
            f.key,
            b(a, g)
        ])) : d.push([
            f.key,
            f.value
        ]);
    }
    return d;
};
goog.exportProperty(jspb.Map.prototype, "toObject", jspb.Map.prototype.toObject);
jspb.Map.fromObject = function(a, b, c) {
    b = new jspb.Map([], b);
    for(var d = 0; d < a.length; d++){
        var e = a[d][0], f = c(a[d][1]);
        b.set(e, f);
    }
    return b;
};
goog.exportProperty(jspb.Map, "fromObject", jspb.Map.fromObject);
jspb.Map.ArrayIteratorIterable_ = function(a) {
    this.idx_ = 0;
    this.arr_ = a;
};
jspb.Map.ArrayIteratorIterable_.prototype.next = function() {
    return this.idx_ < this.arr_.length ? {
        done: !1,
        value: this.arr_[this.idx_++]
    } : {
        done: !0,
        value: void 0
    };
};
"undefined" != typeof Symbol && (jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function() {
    return this;
});
jspb.Map.prototype.getLength = function() {
    return this.stringKeys_().length;
};
goog.exportProperty(jspb.Map.prototype, "getLength", jspb.Map.prototype.getLength);
jspb.Map.prototype.clear = function() {
    this.map_ = {};
    this.arrClean = !1;
};
goog.exportProperty(jspb.Map.prototype, "clear", jspb.Map.prototype.clear);
jspb.Map.prototype.del = function(a) {
    a = a.toString();
    var b = this.map_.hasOwnProperty(a);
    delete this.map_[a];
    this.arrClean = !1;
    return b;
};
goog.exportProperty(jspb.Map.prototype, "del", jspb.Map.prototype.del);
jspb.Map.prototype.getEntryList = function() {
    var a = [], b = this.stringKeys_();
    b.sort();
    for(var c = 0; c < b.length; c++){
        var d = this.map_[b[c]];
        a.push([
            d.key,
            d.value
        ]);
    }
    return a;
};
goog.exportProperty(jspb.Map.prototype, "getEntryList", jspb.Map.prototype.getEntryList);
jspb.Map.prototype.entries = function() {
    var a = [], b = this.stringKeys_();
    b.sort();
    for(var c = 0; c < b.length; c++){
        var d = this.map_[b[c]];
        a.push([
            d.key,
            this.wrapEntry_(d)
        ]);
    }
    return new jspb.Map.ArrayIteratorIterable_(a);
};
goog.exportProperty(jspb.Map.prototype, "entries", jspb.Map.prototype.entries);
jspb.Map.prototype.keys = function() {
    var a = [], b = this.stringKeys_();
    b.sort();
    for(var c = 0; c < b.length; c++)a.push(this.map_[b[c]].key);
    return new jspb.Map.ArrayIteratorIterable_(a);
};
goog.exportProperty(jspb.Map.prototype, "keys", jspb.Map.prototype.keys);
jspb.Map.prototype.values = function() {
    var a = [], b = this.stringKeys_();
    b.sort();
    for(var c = 0; c < b.length; c++)a.push(this.wrapEntry_(this.map_[b[c]]));
    return new jspb.Map.ArrayIteratorIterable_(a);
};
goog.exportProperty(jspb.Map.prototype, "values", jspb.Map.prototype.values);
jspb.Map.prototype.forEach = function(a, b) {
    var c = this.stringKeys_();
    c.sort();
    for(var d = 0; d < c.length; d++){
        var e = this.map_[c[d]];
        a.call(b, this.wrapEntry_(e), e.key, this);
    }
};
goog.exportProperty(jspb.Map.prototype, "forEach", jspb.Map.prototype.forEach);
jspb.Map.prototype.set = function(a, b) {
    var c = new jspb.Map.Entry_(a);
    this.valueCtor_ ? (c.valueWrapper = b, c.value = b.toArray()) : c.value = b;
    this.map_[a.toString()] = c;
    this.arrClean = !1;
    return this;
};
goog.exportProperty(jspb.Map.prototype, "set", jspb.Map.prototype.set);
jspb.Map.prototype.wrapEntry_ = function(a) {
    return this.valueCtor_ ? (a.valueWrapper || (a.valueWrapper = new this.valueCtor_(a.value)), a.valueWrapper) : a.value;
};
jspb.Map.prototype.get = function(a) {
    if (a = this.map_[a.toString()]) return this.wrapEntry_(a);
};
goog.exportProperty(jspb.Map.prototype, "get", jspb.Map.prototype.get);
jspb.Map.prototype.has = function(a) {
    return a.toString() in this.map_;
};
goog.exportProperty(jspb.Map.prototype, "has", jspb.Map.prototype.has);
jspb.Map.prototype.serializeBinary = function(a, b, c, d, e) {
    var f = this.stringKeys_();
    f.sort();
    for(var g = 0; g < f.length; g++){
        var h = this.map_[f[g]];
        b.beginSubMessage(a);
        c.call(b, 1, h.key);
        this.valueCtor_ ? d.call(b, 2, this.wrapEntry_(h), e) : d.call(b, 2, h.value);
        b.endSubMessage();
    }
};
goog.exportProperty(jspb.Map.prototype, "serializeBinary", jspb.Map.prototype.serializeBinary);
jspb.Map.deserializeBinary = function(a, b, c, d, e, f, g) {
    for(; b.nextField() && !b.isEndGroup();){
        var h = b.getFieldNumber();
        1 == h ? f = c.call(b) : 2 == h && (a.valueCtor_ ? (jspb.asserts.assert(e), g || (g = new a.valueCtor_), d.call(b, g, e)) : g = d.call(b));
    }
    jspb.asserts.assert(void 0 != f);
    jspb.asserts.assert(void 0 != g);
    a.set(f, g);
};
goog.exportProperty(jspb.Map, "deserializeBinary", jspb.Map.deserializeBinary);
jspb.Map.prototype.stringKeys_ = function() {
    var a = this.map_, b = [], c;
    for(c in a)Object.prototype.hasOwnProperty.call(a, c) && b.push(c);
    return b;
};
jspb.Map.Entry_ = function(a, b) {
    this.key = a;
    this.value = b;
    this.valueWrapper = void 0;
};
jspb.ExtensionFieldInfo = function(a, b, c, d, e) {
    this.fieldIndex = a;
    this.fieldName = b;
    this.ctor = c;
    this.toObjectFn = d;
    this.isRepeated = e;
};
goog.exportSymbol("jspb.ExtensionFieldInfo", jspb.ExtensionFieldInfo);
jspb.ExtensionFieldBinaryInfo = function(a, b, c, d, e, f) {
    this.fieldInfo = a;
    this.binaryReaderFn = b;
    this.binaryWriterFn = c;
    this.binaryMessageSerializeFn = d;
    this.binaryMessageDeserializeFn = e;
    this.isPacked = f;
};
goog.exportSymbol("jspb.ExtensionFieldBinaryInfo", jspb.ExtensionFieldBinaryInfo);
jspb.ExtensionFieldInfo.prototype.isMessageType = function() {
    return !!this.ctor;
};
goog.exportProperty(jspb.ExtensionFieldInfo.prototype, "isMessageType", jspb.ExtensionFieldInfo.prototype.isMessageType);
jspb.Message = function() {};
goog.exportSymbol("jspb.Message", jspb.Message);
jspb.Message.GENERATE_TO_OBJECT = !0;
goog.exportProperty(jspb.Message, "GENERATE_TO_OBJECT", jspb.Message.GENERATE_TO_OBJECT);
jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE;
goog.exportProperty(jspb.Message, "GENERATE_FROM_OBJECT", jspb.Message.GENERATE_FROM_OBJECT);
jspb.Message.GENERATE_TO_STRING = !0;
jspb.Message.ASSUME_LOCAL_ARRAYS = !1;
jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = !0;
jspb.Message.SUPPORTS_UINT8ARRAY_ = "function" == typeof Uint8Array;
jspb.Message.prototype.getJsPbMessageId = function() {
    return this.messageId_;
};
goog.exportProperty(jspb.Message.prototype, "getJsPbMessageId", jspb.Message.prototype.getJsPbMessageId);
jspb.Message.getIndex_ = function(a, b) {
    return b + a.arrayIndexOffset_;
};
jspb.Message.hiddenES6Property_ = function() {};
jspb.Message.getFieldNumber_ = function(a, b) {
    return b - a.arrayIndexOffset_;
};
jspb.Message.initialize = function(a, b, c, d, e, f) {
    a.wrappers_ = null;
    b || (b = c ? [
        c
    ] : []);
    a.messageId_ = c ? String(c) : void 0;
    a.arrayIndexOffset_ = 0 === c ? -1 : 0;
    a.array = b;
    jspb.Message.initPivotAndExtensionObject_(a, d);
    a.convertedPrimitiveFields_ = {};
    jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (a.repeatedFields = e);
    if (e) for(b = 0; b < e.length; b++)c = e[b], c < a.pivot_ ? (c = jspb.Message.getIndex_(a, c), a.array[c] = a.array[c] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(a), a.extensionObject_[c] = a.extensionObject_[c] || jspb.Message.EMPTY_LIST_SENTINEL_);
    if (f && f.length) for(b = 0; b < f.length; b++)jspb.Message.computeOneofCase(a, f[b]);
};
goog.exportProperty(jspb.Message, "initialize", jspb.Message.initialize);
jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [];
jspb.Message.isArray_ = function(a) {
    return jspb.Message.ASSUME_LOCAL_ARRAYS ? a instanceof Array : Array.isArray(a);
};
jspb.Message.isExtensionObject_ = function(a) {
    return null !== a && "object" == typeof a && !jspb.Message.isArray_(a) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array);
};
jspb.Message.initPivotAndExtensionObject_ = function(a, b) {
    var c = a.array.length, d = -1;
    if (c && (d = c - 1, c = a.array[d], jspb.Message.isExtensionObject_(c))) {
        a.pivot_ = jspb.Message.getFieldNumber_(a, d);
        a.extensionObject_ = c;
        return;
    }
    -1 < b ? (a.pivot_ = Math.max(b, jspb.Message.getFieldNumber_(a, d + 1)), a.extensionObject_ = null) : a.pivot_ = Number.MAX_VALUE;
};
jspb.Message.maybeInitEmptyExtensionObject_ = function(a) {
    var b = jspb.Message.getIndex_(a, a.pivot_);
    a.array[b] || (a.extensionObject_ = a.array[b] = {});
};
jspb.Message.toObjectList = function(a, b, c) {
    for(var d = [], e = 0; e < a.length; e++)d[e] = b.call(a[e], c, a[e]);
    return d;
};
goog.exportProperty(jspb.Message, "toObjectList", jspb.Message.toObjectList);
jspb.Message.toObjectExtension = function(a, b, c, d, e) {
    for(var f in c){
        var g = c[f], h = d.call(a, g);
        if (null != h) {
            for(var k in g.fieldName)if (g.fieldName.hasOwnProperty(k)) break;
            b[k] = g.toObjectFn ? g.isRepeated ? jspb.Message.toObjectList(h, g.toObjectFn, e) : g.toObjectFn(e, h) : h;
        }
    }
};
goog.exportProperty(jspb.Message, "toObjectExtension", jspb.Message.toObjectExtension);
jspb.Message.serializeBinaryExtensions = function(a, b, c, d) {
    for(var e in c){
        var f = c[e], g = f.fieldInfo;
        if (!f.binaryWriterFn) throw Error("Message extension present that was generated without binary serialization support");
        var h = d.call(a, g);
        if (null != h) {
            if (g.isMessageType()) {
                if (f.binaryMessageSerializeFn) f.binaryWriterFn.call(b, g.fieldIndex, h, f.binaryMessageSerializeFn);
                else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
            } else f.binaryWriterFn.call(b, g.fieldIndex, h);
        }
    }
};
goog.exportProperty(jspb.Message, "serializeBinaryExtensions", jspb.Message.serializeBinaryExtensions);
jspb.Message.readBinaryExtension = function(a, b, c, d, e) {
    var f = c[b.getFieldNumber()];
    if (f) {
        c = f.fieldInfo;
        if (!f.binaryReaderFn) throw Error("Deserializing extension whose generated code does not support binary format");
        if (c.isMessageType()) {
            var g = new c.ctor;
            f.binaryReaderFn.call(b, g, f.binaryMessageDeserializeFn);
        } else g = f.binaryReaderFn.call(b);
        c.isRepeated && !f.isPacked ? (b = d.call(a, c)) ? b.push(g) : e.call(a, c, [
            g
        ]) : e.call(a, c, g);
    } else b.skipField();
};
goog.exportProperty(jspb.Message, "readBinaryExtension", jspb.Message.readBinaryExtension);
jspb.Message.getField = function(a, b) {
    if (b < a.pivot_) {
        b = jspb.Message.getIndex_(a, b);
        var c = a.array[b];
        return c === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.array[b] = [] : c;
    }
    if (a.extensionObject_) return c = a.extensionObject_[b], c === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.extensionObject_[b] = [] : c;
};
goog.exportProperty(jspb.Message, "getField", jspb.Message.getField);
jspb.Message.getRepeatedField = function(a, b) {
    return jspb.Message.getField(a, b);
};
goog.exportProperty(jspb.Message, "getRepeatedField", jspb.Message.getRepeatedField);
jspb.Message.getOptionalFloatingPointField = function(a, b) {
    a = jspb.Message.getField(a, b);
    return null == a ? a : +a;
};
goog.exportProperty(jspb.Message, "getOptionalFloatingPointField", jspb.Message.getOptionalFloatingPointField);
jspb.Message.getBooleanField = function(a, b) {
    a = jspb.Message.getField(a, b);
    return null == a ? a : !!a;
};
goog.exportProperty(jspb.Message, "getBooleanField", jspb.Message.getBooleanField);
jspb.Message.getRepeatedFloatingPointField = function(a, b) {
    var c = jspb.Message.getRepeatedField(a, b);
    a.convertedPrimitiveFields_ || (a.convertedPrimitiveFields_ = {});
    if (!a.convertedPrimitiveFields_[b]) {
        for(var d = 0; d < c.length; d++)c[d] = +c[d];
        a.convertedPrimitiveFields_[b] = !0;
    }
    return c;
};
goog.exportProperty(jspb.Message, "getRepeatedFloatingPointField", jspb.Message.getRepeatedFloatingPointField);
jspb.Message.getRepeatedBooleanField = function(a, b) {
    var c = jspb.Message.getRepeatedField(a, b);
    a.convertedPrimitiveFields_ || (a.convertedPrimitiveFields_ = {});
    if (!a.convertedPrimitiveFields_[b]) {
        for(var d = 0; d < c.length; d++)c[d] = !!c[d];
        a.convertedPrimitiveFields_[b] = !0;
    }
    return c;
};
goog.exportProperty(jspb.Message, "getRepeatedBooleanField", jspb.Message.getRepeatedBooleanField);
jspb.Message.bytesAsB64 = function(a) {
    if (null == a || "string" === typeof a) return a;
    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return goog.crypt.base64.encodeByteArray(a);
    jspb.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(a));
    return null;
};
goog.exportProperty(jspb.Message, "bytesAsB64", jspb.Message.bytesAsB64);
jspb.Message.bytesAsU8 = function(a) {
    if (null == a || a instanceof Uint8Array) return a;
    if ("string" === typeof a) return goog.crypt.base64.decodeStringToUint8Array(a);
    jspb.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(a));
    return null;
};
goog.exportProperty(jspb.Message, "bytesAsU8", jspb.Message.bytesAsU8);
jspb.Message.bytesListAsB64 = function(a) {
    jspb.Message.assertConsistentTypes_(a);
    return a.length && "string" !== typeof a[0] ? goog.array.map(a, jspb.Message.bytesAsB64) : a;
};
goog.exportProperty(jspb.Message, "bytesListAsB64", jspb.Message.bytesListAsB64);
jspb.Message.bytesListAsU8 = function(a) {
    jspb.Message.assertConsistentTypes_(a);
    return !a.length || a[0] instanceof Uint8Array ? a : goog.array.map(a, jspb.Message.bytesAsU8);
};
goog.exportProperty(jspb.Message, "bytesListAsU8", jspb.Message.bytesListAsU8);
jspb.Message.assertConsistentTypes_ = function(a) {
    if (goog.DEBUG && a && 1 < a.length) {
        var b = goog.typeOf(a[0]);
        goog.array.forEach(a, function(a) {
            goog.typeOf(a) != b && jspb.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(a) + " expected " + b);
        });
    }
};
jspb.Message.getFieldWithDefault = function(a, b, c) {
    a = jspb.Message.getField(a, b);
    return null == a ? c : a;
};
goog.exportProperty(jspb.Message, "getFieldWithDefault", jspb.Message.getFieldWithDefault);
jspb.Message.getBooleanFieldWithDefault = function(a, b, c) {
    a = jspb.Message.getBooleanField(a, b);
    return null == a ? c : a;
};
goog.exportProperty(jspb.Message, "getBooleanFieldWithDefault", jspb.Message.getBooleanFieldWithDefault);
jspb.Message.getFloatingPointFieldWithDefault = function(a, b, c) {
    a = jspb.Message.getOptionalFloatingPointField(a, b);
    return null == a ? c : a;
};
goog.exportProperty(jspb.Message, "getFloatingPointFieldWithDefault", jspb.Message.getFloatingPointFieldWithDefault);
jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault;
goog.exportProperty(jspb.Message, "getFieldProto3", jspb.Message.getFieldProto3);
jspb.Message.getMapField = function(a, b, c, d) {
    a.wrappers_ || (a.wrappers_ = {});
    if (b in a.wrappers_) return a.wrappers_[b];
    var e = jspb.Message.getField(a, b);
    if (!e) {
        if (c) return;
        e = [];
        jspb.Message.setField(a, b, e);
    }
    return a.wrappers_[b] = new jspb.Map(e, d);
};
goog.exportProperty(jspb.Message, "getMapField", jspb.Message.getMapField);
jspb.Message.setField = function(a, b, c) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    b < a.pivot_ ? a.array[jspb.Message.getIndex_(a, b)] = c : (jspb.Message.maybeInitEmptyExtensionObject_(a), a.extensionObject_[b] = c);
    return a;
};
goog.exportProperty(jspb.Message, "setField", jspb.Message.setField);
jspb.Message.setProto3IntField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
};
goog.exportProperty(jspb.Message, "setProto3IntField", jspb.Message.setProto3IntField);
jspb.Message.setProto3FloatField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
};
goog.exportProperty(jspb.Message, "setProto3FloatField", jspb.Message.setProto3FloatField);
jspb.Message.setProto3BooleanField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, !1);
};
goog.exportProperty(jspb.Message, "setProto3BooleanField", jspb.Message.setProto3BooleanField);
jspb.Message.setProto3StringField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
};
goog.exportProperty(jspb.Message, "setProto3StringField", jspb.Message.setProto3StringField);
jspb.Message.setProto3BytesField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
};
goog.exportProperty(jspb.Message, "setProto3BytesField", jspb.Message.setProto3BytesField);
jspb.Message.setProto3EnumField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
};
goog.exportProperty(jspb.Message, "setProto3EnumField", jspb.Message.setProto3EnumField);
jspb.Message.setProto3StringIntField = function(a, b, c) {
    return jspb.Message.setFieldIgnoringDefault_(a, b, c, "0");
};
goog.exportProperty(jspb.Message, "setProto3StringIntField", jspb.Message.setProto3StringIntField);
jspb.Message.setFieldIgnoringDefault_ = function(a, b, c, d) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    c !== d ? jspb.Message.setField(a, b, c) : b < a.pivot_ ? a.array[jspb.Message.getIndex_(a, b)] = null : (jspb.Message.maybeInitEmptyExtensionObject_(a), delete a.extensionObject_[b]);
    return a;
};
jspb.Message.addToRepeatedField = function(a, b, c, d) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    b = jspb.Message.getRepeatedField(a, b);
    void 0 != d ? b.splice(d, 0, c) : b.push(c);
    return a;
};
goog.exportProperty(jspb.Message, "addToRepeatedField", jspb.Message.addToRepeatedField);
jspb.Message.setOneofField = function(a, b, c, d) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    (c = jspb.Message.computeOneofCase(a, c)) && c !== b && void 0 !== d && (a.wrappers_ && c in a.wrappers_ && (a.wrappers_[c] = void 0), jspb.Message.setField(a, c, void 0));
    return jspb.Message.setField(a, b, d);
};
goog.exportProperty(jspb.Message, "setOneofField", jspb.Message.setOneofField);
jspb.Message.computeOneofCase = function(a, b) {
    for(var c, d, e = 0; e < b.length; e++){
        var f = b[e], g = jspb.Message.getField(a, f);
        null != g && (c = f, d = g, jspb.Message.setField(a, f, void 0));
    }
    return c ? (jspb.Message.setField(a, c, d), c) : 0;
};
goog.exportProperty(jspb.Message, "computeOneofCase", jspb.Message.computeOneofCase);
jspb.Message.getWrapperField = function(a, b, c, d) {
    a.wrappers_ || (a.wrappers_ = {});
    if (!a.wrappers_[c]) {
        var e = jspb.Message.getField(a, c);
        if (d || e) a.wrappers_[c] = new b(e);
    }
    return a.wrappers_[c];
};
goog.exportProperty(jspb.Message, "getWrapperField", jspb.Message.getWrapperField);
jspb.Message.getRepeatedWrapperField = function(a, b, c) {
    jspb.Message.wrapRepeatedField_(a, b, c);
    b = a.wrappers_[c];
    b == jspb.Message.EMPTY_LIST_SENTINEL_ && (b = a.wrappers_[c] = []);
    return b;
};
goog.exportProperty(jspb.Message, "getRepeatedWrapperField", jspb.Message.getRepeatedWrapperField);
jspb.Message.wrapRepeatedField_ = function(a, b, c) {
    a.wrappers_ || (a.wrappers_ = {});
    if (!a.wrappers_[c]) {
        for(var d = jspb.Message.getRepeatedField(a, c), e = [], f = 0; f < d.length; f++)e[f] = new b(d[f]);
        a.wrappers_[c] = e;
    }
};
jspb.Message.setWrapperField = function(a, b, c) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    a.wrappers_ || (a.wrappers_ = {});
    var d = c ? c.toArray() : c;
    a.wrappers_[b] = c;
    return jspb.Message.setField(a, b, d);
};
goog.exportProperty(jspb.Message, "setWrapperField", jspb.Message.setWrapperField);
jspb.Message.setOneofWrapperField = function(a, b, c, d) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    a.wrappers_ || (a.wrappers_ = {});
    var e = d ? d.toArray() : d;
    a.wrappers_[b] = d;
    return jspb.Message.setOneofField(a, b, c, e);
};
goog.exportProperty(jspb.Message, "setOneofWrapperField", jspb.Message.setOneofWrapperField);
jspb.Message.setRepeatedWrapperField = function(a, b, c) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    a.wrappers_ || (a.wrappers_ = {});
    c = c || [];
    for(var d = [], e = 0; e < c.length; e++)d[e] = c[e].toArray();
    a.wrappers_[b] = c;
    return jspb.Message.setField(a, b, d);
};
goog.exportProperty(jspb.Message, "setRepeatedWrapperField", jspb.Message.setRepeatedWrapperField);
jspb.Message.addToRepeatedWrapperField = function(a, b, c, d, e) {
    jspb.Message.wrapRepeatedField_(a, d, b);
    var f = a.wrappers_[b];
    f || (f = a.wrappers_[b] = []);
    c = c ? c : new d;
    a = jspb.Message.getRepeatedField(a, b);
    void 0 != e ? (f.splice(e, 0, c), a.splice(e, 0, c.toArray())) : (f.push(c), a.push(c.toArray()));
    return c;
};
goog.exportProperty(jspb.Message, "addToRepeatedWrapperField", jspb.Message.addToRepeatedWrapperField);
jspb.Message.toMap = function(a, b, c, d) {
    for(var e = {}, f = 0; f < a.length; f++)e[b.call(a[f])] = c ? c.call(a[f], d, a[f]) : a[f];
    return e;
};
goog.exportProperty(jspb.Message, "toMap", jspb.Message.toMap);
jspb.Message.prototype.syncMapFields_ = function() {
    if (this.wrappers_) for(var a in this.wrappers_){
        var b = this.wrappers_[a];
        if (Array.isArray(b)) for(var c = 0; c < b.length; c++)b[c] && b[c].toArray();
        else b && b.toArray();
    }
};
jspb.Message.prototype.toArray = function() {
    this.syncMapFields_();
    return this.array;
};
goog.exportProperty(jspb.Message.prototype, "toArray", jspb.Message.prototype.toArray);
jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function() {
    this.syncMapFields_();
    return this.array.toString();
});
jspb.Message.prototype.getExtension = function(a) {
    if (this.extensionObject_) {
        this.wrappers_ || (this.wrappers_ = {});
        var b = a.fieldIndex;
        if (a.isRepeated) {
            if (a.isMessageType()) return this.wrappers_[b] || (this.wrappers_[b] = goog.array.map(this.extensionObject_[b] || [], function(b) {
                return new a.ctor(b);
            })), this.wrappers_[b];
        } else if (a.isMessageType()) return !this.wrappers_[b] && this.extensionObject_[b] && (this.wrappers_[b] = new a.ctor(this.extensionObject_[b])), this.wrappers_[b];
        return this.extensionObject_[b];
    }
};
goog.exportProperty(jspb.Message.prototype, "getExtension", jspb.Message.prototype.getExtension);
jspb.Message.prototype.setExtension = function(a, b) {
    this.wrappers_ || (this.wrappers_ = {});
    jspb.Message.maybeInitEmptyExtensionObject_(this);
    var c = a.fieldIndex;
    a.isRepeated ? (b = b || [], a.isMessageType() ? (this.wrappers_[c] = b, this.extensionObject_[c] = goog.array.map(b, function(a) {
        return a.toArray();
    })) : this.extensionObject_[c] = b) : a.isMessageType() ? (this.wrappers_[c] = b, this.extensionObject_[c] = b ? b.toArray() : b) : this.extensionObject_[c] = b;
    return this;
};
goog.exportProperty(jspb.Message.prototype, "setExtension", jspb.Message.prototype.setExtension);
jspb.Message.difference = function(a, b) {
    if (!(a instanceof b.constructor)) throw Error("Messages have different types.");
    var c = a.toArray();
    b = b.toArray();
    var d = [], e = 0, f = c.length > b.length ? c.length : b.length;
    a.getJsPbMessageId() && (d[0] = a.getJsPbMessageId(), e = 1);
    for(; e < f; e++)jspb.Message.compareFields(c[e], b[e]) || (d[e] = b[e]);
    return new a.constructor(d);
};
goog.exportProperty(jspb.Message, "difference", jspb.Message.difference);
jspb.Message.equals = function(a, b) {
    return a == b || !(!a || !b) && a instanceof b.constructor && jspb.Message.compareFields(a.toArray(), b.toArray());
};
goog.exportProperty(jspb.Message, "equals", jspb.Message.equals);
jspb.Message.compareExtensions = function(a, b) {
    a = a || {};
    b = b || {};
    var c = {}, d;
    for(d in a)c[d] = 0;
    for(d in b)c[d] = 0;
    for(d in c)if (!jspb.Message.compareFields(a[d], b[d])) return !1;
    return !0;
};
goog.exportProperty(jspb.Message, "compareExtensions", jspb.Message.compareExtensions);
jspb.Message.compareFields = function(a, b) {
    if (a == b) return !0;
    if (!goog.isObject(a) || !goog.isObject(b)) return "number" === typeof a && isNaN(a) || "number" === typeof b && isNaN(b) ? String(a) == String(b) : !1;
    if (a.constructor != b.constructor) return !1;
    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a.constructor === Uint8Array) {
        if (a.length != b.length) return !1;
        for(var c = 0; c < a.length; c++)if (a[c] != b[c]) return !1;
        return !0;
    }
    if (a.constructor === Array) {
        var d = void 0, e = void 0, f = Math.max(a.length, b.length);
        for(c = 0; c < f; c++){
            var g = a[c], h = b[c];
            g && g.constructor == Object && (jspb.asserts.assert(void 0 === d), jspb.asserts.assert(c === a.length - 1), d = g, g = void 0);
            h && h.constructor == Object && (jspb.asserts.assert(void 0 === e), jspb.asserts.assert(c === b.length - 1), e = h, h = void 0);
            if (!jspb.Message.compareFields(g, h)) return !1;
        }
        return d || e ? (d = d || {}, e = e || {}, jspb.Message.compareExtensions(d, e)) : !0;
    }
    if (a.constructor === Object) return jspb.Message.compareExtensions(a, b);
    throw Error("Invalid type in JSPB array");
};
goog.exportProperty(jspb.Message, "compareFields", jspb.Message.compareFields);
jspb.Message.prototype.cloneMessage = function() {
    return jspb.Message.cloneMessage(this);
};
goog.exportProperty(jspb.Message.prototype, "cloneMessage", jspb.Message.prototype.cloneMessage);
jspb.Message.prototype.clone = function() {
    return jspb.Message.cloneMessage(this);
};
goog.exportProperty(jspb.Message.prototype, "clone", jspb.Message.prototype.clone);
jspb.Message.clone = function(a) {
    return jspb.Message.cloneMessage(a);
};
goog.exportProperty(jspb.Message, "clone", jspb.Message.clone);
jspb.Message.cloneMessage = function(a) {
    return new a.constructor(jspb.Message.clone_(a.toArray()));
};
jspb.Message.copyInto = function(a, b) {
    jspb.asserts.assertInstanceof(a, jspb.Message);
    jspb.asserts.assertInstanceof(b, jspb.Message);
    jspb.asserts.assert(a.constructor == b.constructor, "Copy source and target message should have the same type.");
    a = jspb.Message.clone(a);
    for(var c = b.toArray(), d = a.toArray(), e = c.length = 0; e < d.length; e++)c[e] = d[e];
    b.wrappers_ = a.wrappers_;
    b.extensionObject_ = a.extensionObject_;
};
goog.exportProperty(jspb.Message, "copyInto", jspb.Message.copyInto);
jspb.Message.clone_ = function(a) {
    if (Array.isArray(a)) {
        for(var b = Array(a.length), c = 0; c < a.length; c++){
            var d = a[c];
            null != d && (b[c] = "object" == typeof d ? jspb.Message.clone_(jspb.asserts.assert(d)) : d);
        }
        return b;
    }
    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return new Uint8Array(a);
    b = {};
    for(c in a)d = a[c], null != d && (b[c] = "object" == typeof d ? jspb.Message.clone_(jspb.asserts.assert(d)) : d);
    return b;
};
jspb.Message.registerMessageType = function(a, b) {
    b.messageId = a;
};
goog.exportProperty(jspb.Message, "registerMessageType", jspb.Message.registerMessageType);
jspb.Message.messageSetExtensions = {};
jspb.Message.messageSetExtensionsBinary = {};
jspb.Export = {};
exports.Map = jspb.Map, exports.Message = jspb.Message, exports.BinaryReader = jspb.BinaryReader, exports.BinaryWriter = jspb.BinaryWriter, exports.ExtensionFieldInfo = jspb.ExtensionFieldInfo, exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo, exports.exportSymbol = goog.exportSymbol, exports.inherits = goog.inherits, exports.object = {
    extend: goog.object.extend
}, exports.typeOf = goog.typeOf;

},{}],"awrpb":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.acosConfig = void 0;
var tfjs_1 = require("aabc61bd4b1ec9a1");
exports.acosConfig = {
    kernelName: tfjs_1.Acos,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Acos, x);
    }
};

},{"aabc61bd4b1ec9a1":"hadS1"}],"bFsMB":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.acoshConfig = void 0;
var tfjs_1 = require("4872223ece42c4f7");
exports.acoshConfig = {
    kernelName: tfjs_1.Acosh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Acosh, x);
    }
};

},{"4872223ece42c4f7":"hadS1"}],"5wDQc":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addConfig = void 0;
var tfjs_1 = require("3709a0e91b217615");
var nodejs_kernel_backend_1 = require("982e2a04c2793c54");
exports.addConfig = {
    kernelName: tfjs_1.Add,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Add, opAttrs, [
            a,
            b
        ]);
    }
};

},{"3709a0e91b217615":"hadS1","982e2a04c2793c54":"4Q85s"}],"6pTwM":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addNConfig = void 0;
var tfjs_1 = require("988ff368271d88ce");
var nodejs_kernel_backend_1 = require("8fbbbbdbc35687ab");
exports.addNConfig = {
    kernelName: tfjs_1.AddN,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var tensors = args.inputs;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tensors[0].dtype),
            {
                name: "N",
                type: backend.binding.TF_ATTR_INT,
                value: tensors.length
            }
        ];
        return backend.executeSingleOutput(tfjs_1.AddN, opAttrs, tensors);
    }
};

},{"988ff368271d88ce":"hadS1","8fbbbbdbc35687ab":"4Q85s"}],"i07Kb":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.allConfig = void 0;
var tfjs_1 = require("67ff542871889e14");
var nodejs_kernel_backend_1 = require("8cb6d6ee125574ee");
exports.allConfig = {
    kernelName: tfjs_1.All,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var origAxes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var opAttrs = [
            {
                name: "keep_dims",
                type: backend.binding.TF_ATTR_BOOL,
                value: keepDims
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        var axesTensor = (0, tfjs_1.tensor1d)(origAxes, "int32");
        var res = backend.executeSingleOutput(tfjs_1.All, opAttrs, [
            x,
            axesTensor
        ]);
        axesTensor.dispose();
        return res;
    }
};

},{"67ff542871889e14":"hadS1","8cb6d6ee125574ee":"4Q85s"}],"cgUhO":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.anyConfig = void 0;
var tfjs_1 = require("e18faf0131ea6da2");
var nodejs_kernel_backend_1 = require("8a314ba2ff298bb4");
exports.anyConfig = {
    kernelName: tfjs_1.Any,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var origAxes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var opAttrs = [
            {
                name: "keep_dims",
                type: backend.binding.TF_ATTR_BOOL,
                value: keepDims
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        var axesTensor = (0, tfjs_1.tensor1d)(origAxes, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Any, opAttrs, [
            x,
            axesTensor
        ]);
        axesTensor.dispose();
        return res;
    }
};

},{"e18faf0131ea6da2":"hadS1","8a314ba2ff298bb4":"4Q85s"}],"1M6qH":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.argMaxConfig = void 0;
var tfjs_1 = require("54e200e86414b2b0");
var nodejs_kernel_backend_1 = require("b4c3d102dbfd449f");
exports.argMaxConfig = {
    kernelName: tfjs_1.ArgMax,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var axis = args.attrs.axis;
        var toDispose = [];
        var xInput = x;
        if (x.dtype === "bool") {
            xInput = x.toInt();
            toDispose.push(xInput);
        }
        var axisScalar = (0, tfjs_1.scalar)(axis, "int32");
        toDispose.push(axisScalar);
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", xInput.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("output_type", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.ArgMax, opAttrs, [
            xInput,
            axisScalar
        ]);
        toDispose.forEach(function(t) {
            return t.dispose();
        });
        return res;
    }
};

},{"54e200e86414b2b0":"hadS1","b4c3d102dbfd449f":"4Q85s"}],"7oDs6":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.argMinConfig = void 0;
var tfjs_1 = require("a9a0e9392857438b");
var nodejs_kernel_backend_1 = require("58da3660b9caf4db");
exports.argMinConfig = {
    kernelName: tfjs_1.ArgMin,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var axis = args.attrs.axis;
        var toDispose = [];
        var xInput = x;
        if (x.dtype === "bool") {
            xInput = x.toInt();
            toDispose.push(xInput);
        }
        var axisScalar = (0, tfjs_1.scalar)(axis, "int32");
        toDispose.push(axisScalar);
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", xInput.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("output_type", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.ArgMin, opAttrs, [
            xInput,
            axisScalar
        ]);
        toDispose.forEach(function(t) {
            return t.dispose();
        });
        return res;
    }
};

},{"a9a0e9392857438b":"hadS1","58da3660b9caf4db":"4Q85s"}],"zVFmB":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.asinConfig = void 0;
var tfjs_1 = require("97de59ebe866a7ba");
exports.asinConfig = {
    kernelName: tfjs_1.Asin,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Asin, x);
    }
};

},{"97de59ebe866a7ba":"hadS1"}],"hcD3M":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.asinhConfig = void 0;
var tfjs_1 = require("db1cef023c112ca1");
exports.asinhConfig = {
    kernelName: tfjs_1.Asinh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Asinh, x);
    }
};

},{"db1cef023c112ca1":"hadS1"}],"jjqdo":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atanConfig = void 0;
var tfjs_1 = require("308e850a58a5d552");
exports.atanConfig = {
    kernelName: tfjs_1.Atan,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Atan, x);
    }
};

},{"308e850a58a5d552":"hadS1"}],"7ADzL":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atan2Config = void 0;
var tfjs_1 = require("7f21ca65de2ee5a");
var nodejs_kernel_backend_1 = require("a55a265aa9429027");
exports.atan2Config = {
    kernelName: tfjs_1.Atan2,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", a.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.Atan2, opAttrs, [
            a,
            b
        ]);
    }
};

},{"7f21ca65de2ee5a":"hadS1","a55a265aa9429027":"4Q85s"}],"2JjPw":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atanhConfig = void 0;
var tfjs_1 = require("7d1569ebf285e8c");
exports.atanhConfig = {
    kernelName: tfjs_1.Atanh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Atanh, x);
    }
};

},{"7d1569ebf285e8c":"hadS1"}],"g9G5B":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.avgPoolConfig = void 0;
var tfjs_1 = require("b07a715ae851ec60");
var nodejs_kernel_backend_1 = require("f6a310d762ad5867");
exports.avgPoolConfig = {
    kernelName: tfjs_1.AvgPool,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.AvgPool, opAttrs, [
            x
        ]);
    }
};

},{"b07a715ae851ec60":"hadS1","f6a310d762ad5867":"4Q85s"}],"iBmDF":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.avgPool3DConfig = void 0;
var tfjs_1 = require("bef7112c79feb5b2");
var nodejs_kernel_backend_1 = require("dc176649f2a42b5e");
exports.avgPool3DConfig = {
    kernelName: tfjs_1.AvgPool3D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode, dataFormat = _a.dataFormat;
        var convInfo = tfjs_1.backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode, dataFormat);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterDepth,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var $dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: $dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.AvgPool3D, opAttrs, [
            x
        ]);
    }
};

},{"bef7112c79feb5b2":"hadS1","dc176649f2a42b5e":"4Q85s"}],"f1GDX":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.avgPool3DGradConfig = void 0;
var tfjs_1 = require("6e51c558f20b6727");
var nodejs_kernel_backend_1 = require("d94a172e8451c51");
exports.avgPool3DGradConfig = {
    kernelName: tfjs_1.AvgPool3DGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, input = _a.input;
        var backend = args.backend;
        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding type was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterDepth,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        var origInputShape = (0, tfjs_1.tensor1d)(input.shape, "int32");
        var res = backend.executeSingleOutput(tfjs_1.AvgPool3DGrad, opAttrs, [
            origInputShape,
            dy
        ]);
        origInputShape.dispose();
        return res;
    }
};

},{"6e51c558f20b6727":"hadS1","d94a172e8451c51":"4Q85s"}],"iPsFf":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.avgPoolGradConfig = void 0;
var tfjs_1 = require("b2855dde5f0185d6");
var nodejs_kernel_backend_1 = require("a95220bb9369ee48");
exports.avgPoolGradConfig = {
    kernelName: tfjs_1.AvgPoolGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, input = _a.input;
        var backend = args.backend;
        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad;
        var convInfo = tfjs_1.backend_util.computePool2DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding type was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        var origInputShape = (0, tfjs_1.tensor1d)(input.shape, "int32");
        var ret = backend.executeSingleOutput(tfjs_1.AvgPoolGrad, opAttrs, [
            origInputShape,
            dy
        ]);
        origInputShape.dispose();
        return ret;
    }
};

},{"b2855dde5f0185d6":"hadS1","a95220bb9369ee48":"4Q85s"}],"lerop":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchMatMulConfig = void 0;
var tfjs_1 = require("86a811c7968c342a");
var nodejs_kernel_backend_1 = require("e4ec3f1c3cdbb5cc");
exports.batchMatMulConfig = {
    kernelName: tfjs_1.BatchMatMul,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var _b = args.attrs, transposeA = _b.transposeA, transposeB = _b.transposeB;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", a.dtype),
            {
                name: "adj_x",
                type: backend.binding.TF_ATTR_BOOL,
                value: transposeA
            },
            {
                name: "adj_y",
                type: backend.binding.TF_ATTR_BOOL,
                value: transposeB
            }
        ];
        // libtensorflow's BatchMatMulV2 op performs the same behavior as other tfjs
        // backends' BatchMatMul (supports broadcasting), so a string literal is
        // used here to point to libtensorflow's BatchMatMulV2 op, instead of using
        // const `BatchMatMul` ('BatchMatMul') to resolve node-backend's special
        // mapping.
        return backend.executeSingleOutput("BatchMatMulV2", opAttrs, [
            a,
            b
        ]);
    }
};

},{"86a811c7968c342a":"hadS1","e4ec3f1c3cdbb5cc":"4Q85s"}],"6tmQW":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchToSpaceNDConfig = void 0;
var tfjs_1 = require("12da3cd2e36705b1");
var nodejs_kernel_backend_1 = require("17cc65c2e2442b7a");
exports.batchToSpaceNDConfig = {
    kernelName: tfjs_1.BatchToSpaceND,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, blockShape = _a.blockShape, crops = _a.crops;
        var blockShapeTensor = (0, tfjs_1.tensor1d)(blockShape, "int32");
        var cropsTensor = (0, tfjs_1.tensor2d)(crops, [
            crops.length,
            crops[0].length
        ], "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tblock_shape", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tcrops", cropsTensor.dtype)
        ];
        var res = backend.executeSingleOutput(tfjs_1.BatchToSpaceND, opAttrs, [
            x,
            blockShapeTensor,
            cropsTensor
        ]);
        cropsTensor.dispose();
        blockShapeTensor.dispose();
        return res;
    }
};

},{"12da3cd2e36705b1":"hadS1","17cc65c2e2442b7a":"4Q85s"}],"iR3H3":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.bincountConfig = void 0;
var tfjs_1 = require("6d747d922d628d4c");
var nodejs_kernel_backend_1 = require("12d2fe61e667d5c5");
exports.bincountConfig = {
    kernelName: tfjs_1.Bincount,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, x = _b.x, weights = _b.weights;
        var size = attrs.size;
        var nodeBackend = backend;
        var $size = (0, tfjs_1.scalar)(size, "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", weights.dtype)
        ];
        var result = nodeBackend.executeSingleOutput(tfjs_1.Bincount, opAttrs, [
            x,
            $size,
            weights
        ]);
        $size.dispose();
        return result;
    }
};

},{"6d747d922d628d4c":"hadS1","12d2fe61e667d5c5":"4Q85s"}],"hzNwZ":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.broadcastArgsConfig = void 0;
var tfjs_1 = require("f81b1654d93f5cf");
var nodejs_kernel_backend_1 = require("ba7a4e530319ecdd");
exports.broadcastArgsConfig = {
    kernelName: tfjs_1.BroadcastArgs,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, s0 = _a.s0, s1 = _a.s1;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(s0.dtype, s1.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.BroadcastArgs, opAttrs, [
            s0,
            s1
        ]);
    }
};

},{"f81b1654d93f5cf":"hadS1","ba7a4e530319ecdd":"4Q85s"}],"aITqz":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.castConfig = void 0;
var tfjs_1 = require("a31277d3b8f75c5f");
var nodejs_kernel_backend_1 = require("e4f35bdc07f4bdc3");
exports.castConfig = {
    kernelName: tfjs_1.Cast,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var dtype = args.attrs.dtype;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("SrcT", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("DstT", dtype),
            {
                name: "Truncate",
                type: backend.binding.TF_ATTR_BOOL,
                value: false
            }
        ];
        return backend.executeSingleOutput(tfjs_1.Cast, opAttrs, [
            x
        ]);
    }
};

},{"a31277d3b8f75c5f":"hadS1","e4f35bdc07f4bdc3":"4Q85s"}],"jVBFM":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ceilConfig = void 0;
var tfjs_1 = require("68ebea5bce92e9ab");
exports.ceilConfig = {
    kernelName: tfjs_1.Ceil,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Ceil, x);
    }
};

},{"68ebea5bce92e9ab":"hadS1"}],"2Y76z":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clipByValueConfig = void 0;
var tfjs_1 = require("18c1cdf8b5d03d99");
exports.clipByValueConfig = {
    kernelName: tfjs_1.ClipByValue,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var _a = args.attrs, clipValueMin = _a.clipValueMin, clipValueMax = _a.clipValueMax;
        return (0, tfjs_1.tidy)(function() {
            var xMin = (0, tfjs_1.minimum)(x, (0, tfjs_1.scalar)(clipValueMax, x.dtype));
            return (0, tfjs_1.maximum)(xMin, (0, tfjs_1.scalar)(clipValueMin, x.dtype));
        });
    }
};

},{"18c1cdf8b5d03d99":"hadS1"}],"biLlR":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.complexConfig = void 0;
var tfjs_1 = require("b6b334121f1f49ac");
var nodejs_kernel_backend_1 = require("888191b83a5b713a");
exports.complexConfig = {
    kernelName: tfjs_1.Complex,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, real = _a.real, imag = _a.imag;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", real),
            {
                name: "Tout",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_COMPLEX64
            }
        ];
        var inputs = [
            real,
            imag
        ];
        return backend.executeSingleOutput(tfjs_1.Complex, opAttrs, inputs);
    }
};

},{"b6b334121f1f49ac":"hadS1","888191b83a5b713a":"4Q85s"}],"aZM7P":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.complexAbsConfig = void 0;
var tfjs_1 = require("deeca347614fdef2");
var nodejs_kernel_backend_1 = require("9930285cc763983e");
exports.complexAbsConfig = {
    kernelName: tfjs_1.ComplexAbs,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tout", "float32")
        ];
        return backend.executeSingleOutput(tfjs_1.ComplexAbs, opAttrs, [
            x
        ]);
    }
};

},{"deeca347614fdef2":"hadS1","9930285cc763983e":"4Q85s"}],"fTUTW":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.concatConfig = void 0;
var tfjs_1 = require("5238ba03cf660b");
var nodejs_kernel_backend_1 = require("5cbba8552eb73978");
exports.concatConfig = {
    kernelName: tfjs_1.Concat,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var tensors = args.inputs;
        var backend = args.backend;
        var axis = args.attrs.axis;
        var opAttrs = [
            {
                name: "N",
                type: backend.binding.TF_ATTR_INT,
                value: tensors.length
            },
            {
                name: "Tidx",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_INT32
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tensors)
        ];
        var inputs = Array.from(tensors);
        var axisTensor = (0, tfjs_1.scalar)(axis, "int32");
        inputs.push(axisTensor);
        var res = backend.executeSingleOutput("ConcatV2", opAttrs, inputs);
        axisTensor.dispose();
        return res;
    }
};

},{"5238ba03cf660b":"hadS1","5cbba8552eb73978":"4Q85s"}],"jetZD":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv2dImpl = exports.conv2DConfig = void 0;
var tfjs_1 = require("260a5507b00b0f61");
var nodejs_kernel_backend_1 = require("3edd473659c99cd7");
exports.conv2DConfig = {
    kernelName: tfjs_1.Conv2D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode;
        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        return conv2dImpl(x, filter, convInfo, backend);
    }
};
function conv2dImpl(x, filter, convInfo, backend) {
    if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME" && convInfo.padInfo.type !== "EXPLICIT") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "use_cudnn_on_gpu",
            type: backend.binding.TF_ATTR_BOOL,
            value: true
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    if (padding === "EXPLICIT") {
        var padValue = [
            convInfo.padInfo.top,
            convInfo.padInfo.bottom,
            convInfo.padInfo.left,
            convInfo.padInfo.right
        ];
        opAttrs.push({
            name: "explicit_paddings",
            type: backend.binding.TF_ATTR_INT,
            value: dataFormat === "NHWC" ? __spreadArray(__spreadArray([
                0,
                0
            ], padValue, true), [
                0,
                0
            ], false) : __spreadArray([
                0,
                0,
                0,
                0
            ], padValue, true)
        });
    }
    return backend.executeSingleOutput(tfjs_1.Conv2D, opAttrs, [
        x,
        filter
    ]);
}
exports.conv2dImpl = conv2dImpl;

},{"260a5507b00b0f61":"hadS1","3edd473659c99cd7":"4Q85s"}],"7iOij":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv2DBackpropFilterConfig = void 0;
var tfjs_1 = require("b621f1b086cd9137");
var nodejs_kernel_backend_1 = require("69c9c1fb6e647525");
exports.conv2DBackpropFilterConfig = {
    kernelName: tfjs_1.Conv2DBackpropFilter,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, dy = _a.dy;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dimRoundingMode = _b.dimRoundingMode, filterShape = _b.filterShape;
        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */ , pad, dimRoundingMode, false, $dataFormat);
        return conv2DBackpropFilterImpl(dy, x, convInfo, backend);
    }
};
function conv2DBackpropFilterImpl(dy, filter, convInfo, backend) {
    if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", "float32"),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "use_cudnn_on_gpu",
            type: backend.binding.TF_ATTR_BOOL,
            value: true
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    var filterSizes = (0, tfjs_1.tensor1d)(convInfo.filterShape, "int32");
    var res = backend.executeSingleOutput(tfjs_1.Conv2DBackpropFilter, opAttrs, [
        filter,
        filterSizes,
        dy
    ]);
    filterSizes.dispose();
    return res;
}

},{"b621f1b086cd9137":"hadS1","69c9c1fb6e647525":"4Q85s"}],"fUEPn":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv2DBackpropInputConfig = void 0;
var tfjs_1 = require("fff7f48d0d0dac21");
var nodejs_kernel_backend_1 = require("ee30b0f40a1bb5bf");
exports.conv2DBackpropInputConfig = {
    kernelName: tfjs_1.Conv2DBackpropInput,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dimRoundingMode = _b.dimRoundingMode, inputShape = _b.inputShape;
        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */ , pad, dimRoundingMode, false, $dataFormat);
        return conv2DBackpropInputImpl(dy, filter, convInfo, backend);
    }
};
function conv2DBackpropInputImpl(dy, filter, convInfo, backend) {
    if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", "float32"),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "use_cudnn_on_gpu",
            type: backend.binding.TF_ATTR_BOOL,
            value: true
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    var inputSizes = (0, tfjs_1.tensor1d)(convInfo.inShape, "int32");
    var res = backend.executeSingleOutput(tfjs_1.Conv2DBackpropInput, opAttrs, [
        inputSizes,
        filter,
        dy
    ]);
    inputSizes.dispose();
    return res;
}

},{"fff7f48d0d0dac21":"hadS1","ee30b0f40a1bb5bf":"4Q85s"}],"3MmS9":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv3DConfig = void 0;
var tfjs_1 = require("4ce7b55b0574b875");
var nodejs_kernel_backend_1 = require("e1682fff4bbf0e5b");
exports.conv3DConfig = {
    kernelName: tfjs_1.Conv3D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dilations = _b.dilations;
        var convInfo = tfjs_1.backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var $dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        if (!backend.isGPUPackage && convInfo.dilationDepth > 1) throw new Error("CPU Dilation depth must be 1");
        var $dilations = [
            1,
            convInfo.dilationDepth,
            convInfo.dilationHeight,
            convInfo.dilationWidth,
            1
        ];
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: $dataFormat
            },
            {
                name: "dilations",
                type: backend.binding.TF_ATTR_INT,
                value: $dilations
            }
        ];
        return backend.executeSingleOutput(tfjs_1.Conv3D, opAttrs, [
            x,
            filter
        ]);
    }
};

},{"4ce7b55b0574b875":"hadS1","e1682fff4bbf0e5b":"4Q85s"}],"bjck6":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv3DBackpropFilterV2Config = void 0;
var tfjs_1 = require("7a7fbb5a5282ff05");
var nodejs_kernel_backend_1 = require("3c45b4d75c1f4a80");
exports.conv3DBackpropFilterV2Config = {
    kernelName: tfjs_1.Conv3DBackpropFilterV2,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, dy = _a.dy;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, filterShape = _b.filterShape;
        var dilations = 1;
        var convInfo = tfjs_1.backend_util.computeConv3DInfo(x.shape, filterShape, strides, dilations, pad);
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        if (!backend.isGPUPackage && convInfo.dilationDepth > 1) throw new Error("CPU Dilation depth must be 1");
        var $dilations = [
            1,
            convInfo.dilationDepth,
            convInfo.dilationHeight,
            convInfo.dilationWidth,
            1
        ];
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            },
            {
                name: "dilations",
                type: backend.binding.TF_ATTR_INT,
                value: $dilations
            }
        ];
        var filterSizes = (0, tfjs_1.tensor1d)(filterShape, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Conv3DBackpropFilterV2, opAttrs, [
            x,
            filterSizes,
            dy
        ]);
        filterSizes.dispose();
        return res;
    }
};

},{"7a7fbb5a5282ff05":"hadS1","3c45b4d75c1f4a80":"4Q85s"}],"7J8En":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conv3DBackpropInputV2Config = void 0;
var tfjs_1 = require("6fd69d22d8255193");
var nodejs_kernel_backend_1 = require("87379464ad56c47b");
exports.conv3DBackpropInputV2Config = {
    kernelName: tfjs_1.Conv3DBackpropInputV2,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, inputShape = _b.inputShape;
        var dilations = 1;
        var convInfo = tfjs_1.backend_util.computeConv3DInfo(inputShape, filter.shape, strides, dilations, pad);
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        if (!backend.isGPUPackage && convInfo.dilationDepth > 1) throw new Error("CPU Dilation depth must be 1");
        var $dilations = [
            1,
            convInfo.dilationDepth,
            convInfo.dilationHeight,
            convInfo.dilationWidth,
            1
        ];
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", dy.dtype),
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            },
            {
                name: "dilations",
                type: backend.binding.TF_ATTR_INT,
                value: $dilations
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tshape", "int32")
        ];
        var inputSizes = (0, tfjs_1.tensor1d)(inputShape, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Conv3DBackpropInputV2, opAttrs, [
            inputSizes,
            filter,
            dy
        ]);
        inputSizes.dispose();
        return res;
    }
};

},{"6fd69d22d8255193":"hadS1","87379464ad56c47b":"4Q85s"}],"cLKwg":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cosConfig = void 0;
var tfjs_1 = require("6c330c0f427022b4");
exports.cosConfig = {
    kernelName: tfjs_1.Cos,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Cos, x);
    }
};

},{"6c330c0f427022b4":"hadS1"}],"dx82A":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.coshConfig = void 0;
var tfjs_1 = require("95d3d1ee8695c9e5");
exports.coshConfig = {
    kernelName: tfjs_1.Cosh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Cosh, x);
    }
};

},{"95d3d1ee8695c9e5":"hadS1"}],"e44lb":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cropAndResizeConfig = void 0;
var tfjs_1 = require("a2c29fb8056940e3");
var nodejs_kernel_backend_1 = require("c5657cdcabbb2bf8");
exports.cropAndResizeConfig = {
    kernelName: tfjs_1.CropAndResize,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, image = _a.image, boxes = _a.boxes, boxInd = _a.boxInd;
        var backend = args.backend;
        var _b = args.attrs, cropSize = _b.cropSize, method = _b.method, extrapolationValue = _b.extrapolationValue;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", image.dtype),
            {
                name: "method",
                type: backend.binding.TF_ATTR_STRING,
                value: method
            },
            {
                name: "extrapolation_value",
                type: backend.binding.TF_ATTR_FLOAT,
                value: extrapolationValue
            }
        ];
        var cropSizeTensor = (0, tfjs_1.tensor1d)(cropSize, "int32");
        var res = backend.executeSingleOutput(tfjs_1.CropAndResize, opAttrs, [
            image,
            boxes,
            boxInd,
            cropSizeTensor
        ]);
        cropSizeTensor.dispose();
        return res;
    }
};

},{"a2c29fb8056940e3":"hadS1","c5657cdcabbb2bf8":"4Q85s"}],"b2Q7S":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cumprodConfig = void 0;
var tfjs_1 = require("d7c91baa6ea5e3b");
var nodejs_kernel_backend_1 = require("673e44770a4636a6");
exports.cumprodConfig = {
    kernelName: tfjs_1.Cumprod,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, exclusive = _a.exclusive, reverse = _a.reverse;
        var axisTensor = (0, tfjs_1.scalar)(axis, "int32");
        var opAttrs = [
            {
                name: "exclusive",
                type: backend.binding.TF_ATTR_BOOL,
                value: exclusive
            },
            {
                name: "reverse",
                type: backend.binding.TF_ATTR_BOOL,
                value: reverse
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.Cumprod, opAttrs, [
            x,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"d7c91baa6ea5e3b":"hadS1","673e44770a4636a6":"4Q85s"}],"lIC0e":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cumsumConfig = void 0;
var tfjs_1 = require("8b12515d79d857a");
var nodejs_kernel_backend_1 = require("502da69af9c25a7c");
exports.cumsumConfig = {
    kernelName: tfjs_1.Cumsum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, exclusive = _a.exclusive, reverse = _a.reverse;
        var axisTensor = (0, tfjs_1.scalar)(axis, "int32");
        var opAttrs = [
            {
                name: "exclusive",
                type: backend.binding.TF_ATTR_BOOL,
                value: exclusive
            },
            {
                name: "reverse",
                type: backend.binding.TF_ATTR_BOOL,
                value: reverse
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.Cumsum, opAttrs, [
            x,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"8b12515d79d857a":"hadS1","502da69af9c25a7c":"4Q85s"}],"au0dN":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.depthToSpaceConfig = void 0;
var tfjs_1 = require("a787cd2b87d4605b");
var nodejs_kernel_backend_1 = require("bde43057b780dfdd");
exports.depthToSpaceConfig = {
    kernelName: tfjs_1.DepthToSpace,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, blockSize = _a.blockSize, dataFormat = _a.dataFormat;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x),
            {
                name: "block_size",
                type: backend.binding.TF_ATTR_INT,
                value: blockSize < 2 ? 2 : blockSize
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        var inputs = [
            x
        ];
        return backend.executeSingleOutput(tfjs_1.DepthToSpace, opAttrs, inputs);
    }
};

},{"a787cd2b87d4605b":"hadS1","bde43057b780dfdd":"4Q85s"}],"bnj5u":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.depthwiseConv2dNativeImpl = exports.depthwiseConv2dNativeConfig = void 0;
var tfjs_1 = require("d6ca7bf3b5fc9223");
var nodejs_kernel_backend_1 = require("e0ca1db0b449a1be");
exports.depthwiseConv2dNativeConfig = {
    kernelName: tfjs_1.DepthwiseConv2dNative,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode;
        var $dilations = dilations;
        if ($dilations == null) $dilations = [
            1,
            1
        ];
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);
        return depthwiseConv2dNativeImpl(x, filter, convInfo, backend);
    }
};
function depthwiseConv2dNativeImpl(input, filter, convInfo, backend) {
    if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME" && convInfo.padInfo.type !== "EXPLICIT") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input.dtype),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    if (padding === "EXPLICIT") {
        var padValue = [
            convInfo.padInfo.top,
            convInfo.padInfo.bottom,
            convInfo.padInfo.left,
            convInfo.padInfo.right
        ];
        opAttrs.push({
            name: "explicit_paddings",
            type: backend.binding.TF_ATTR_INT,
            value: dataFormat === "NHWC" ? __spreadArray(__spreadArray([
                0,
                0
            ], padValue, true), [
                0,
                0
            ], false) : __spreadArray([
                0,
                0,
                0,
                0
            ], padValue, true)
        });
    }
    return backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNative, opAttrs, [
        input,
        filter
    ]);
}
exports.depthwiseConv2dNativeImpl = depthwiseConv2dNativeImpl;

},{"d6ca7bf3b5fc9223":"hadS1","e0ca1db0b449a1be":"4Q85s"}],"geGL4":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.depthwiseConv2dNativeBackpropFilterConfig = void 0;
var tfjs_1 = require("1c15048472b2400");
var nodejs_kernel_backend_1 = require("84a7144ff3100e83");
exports.depthwiseConv2dNativeBackpropFilterConfig = {
    kernelName: tfjs_1.DepthwiseConv2dNativeBackpropFilter,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, dy = _a.dy;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, dilations = _b.dilations, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode, filterShape = _b.filterShape;
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true);
        return depthwiseConv2dNativeBackpropFilterImpl(x, dy, convInfo, backend);
    }
};
function depthwiseConv2dNativeBackpropFilterImpl(x, dy, convInfo, backend) {
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", "float32"),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    var filterSizes = (0, tfjs_1.tensor1d)(convInfo.filterShape, "int32");
    var res = backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNativeBackpropFilter, opAttrs, [
        x,
        filterSizes,
        dy
    ]);
    filterSizes.dispose();
    return res;
}

},{"1c15048472b2400":"hadS1","84a7144ff3100e83":"4Q85s"}],"6gQT8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.depthwiseConv2dNativeBackpropInputConfig = void 0;
var tfjs_1 = require("4919aca6f3bee810");
var nodejs_kernel_backend_1 = require("81cdcec37bad3d00");
exports.depthwiseConv2dNativeBackpropInputConfig = {
    kernelName: tfjs_1.DepthwiseConv2dNativeBackpropInput,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, filter = _a.filter;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, dilations = _b.dilations, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode, inputShape = _b.inputShape;
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true);
        return depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend);
    }
};
function depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend) {
    var strides = [
        1,
        convInfo.strideHeight,
        convInfo.strideWidth,
        1
    ];
    var padding = convInfo.padInfo.type;
    var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
    var dilations = [
        1,
        convInfo.dilationHeight,
        convInfo.dilationWidth,
        1
    ];
    var opAttrs = [
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", "float32"),
        {
            name: "strides",
            type: backend.binding.TF_ATTR_INT,
            value: strides
        },
        {
            name: "padding",
            type: backend.binding.TF_ATTR_STRING,
            value: padding
        },
        {
            name: "data_format",
            type: backend.binding.TF_ATTR_STRING,
            value: dataFormat
        },
        {
            name: "dilations",
            type: backend.binding.TF_ATTR_INT,
            value: dilations
        }
    ];
    var inputSizes = (0, tfjs_1.tensor1d)(convInfo.inShape, "int32");
    var res = backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNativeBackpropInput, opAttrs, [
        inputSizes,
        filter,
        dy
    ]);
    inputSizes.dispose();
    return res;
}

},{"4919aca6f3bee810":"hadS1","81cdcec37bad3d00":"4Q85s"}],"eGc5I":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.diagConfig = void 0;
var tfjs_1 = require("a79fed61a0c838c4");
exports.diagConfig = {
    kernelName: tfjs_1.Diag,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Diag, x);
    }
};

},{"a79fed61a0c838c4":"hadS1"}],"9MXi6":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dilation2dConfig = void 0;
var tfjs_1 = require("3cba74ded0b0c739");
var nodejs_kernel_backend_1 = require("88d442f1daaf043c");
exports.dilation2dConfig = {
    kernelName: tfjs_1.Dilation2D,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, x = _b.x, filter = _b.filter;
        var _c = attrs, strides = _c.strides, pad = _c.pad, dilations = _c.dilations;
        var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations), dilationHeight = _d.dilationHeight, dilationWidth = _d.dilationWidth, padInfo = _d.padInfo, strideHeight = _d.strideHeight, strideWidth = _d.strideWidth;
        var $strides = [
            1,
            strideHeight,
            strideWidth,
            1
        ];
        var $dilations = [
            1,
            dilationHeight,
            dilationWidth,
            1
        ];
        var nodeBackend = backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "strides",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "rates",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $dilations
            },
            {
                name: "padding",
                type: nodeBackend.binding.TF_ATTR_STRING,
                value: padInfo.type
            }
        ];
        return nodeBackend.executeSingleOutput(tfjs_1.Dilation2D, opAttrs, [
            x,
            filter
        ]);
    }
};

},{"3cba74ded0b0c739":"hadS1","88d442f1daaf043c":"4Q85s"}],"kj7jB":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dilation2dBackpropFilterConfig = void 0;
var tfjs_1 = require("154107dae7ebda31");
var nodejs_kernel_backend_1 = require("7c479bb1f0cf88ba");
exports.dilation2dBackpropFilterConfig = {
    kernelName: tfjs_1.Dilation2DBackpropFilter,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, x = _b.x, filter = _b.filter, dy = _b.dy;
        var _c = attrs, strides = _c.strides, pad = _c.pad, dilations = _c.dilations;
        var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations), dilationHeight = _d.dilationHeight, dilationWidth = _d.dilationWidth, padInfo = _d.padInfo, strideHeight = _d.strideHeight, strideWidth = _d.strideWidth;
        var $strides = [
            1,
            strideHeight,
            strideWidth,
            1
        ];
        var $dilations = [
            1,
            dilationHeight,
            dilationWidth,
            1
        ];
        var nodeBackend = backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "strides",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "rates",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $dilations
            },
            {
                name: "padding",
                type: nodeBackend.binding.TF_ATTR_STRING,
                value: padInfo.type
            }
        ];
        return nodeBackend.executeSingleOutput(tfjs_1.Dilation2DBackpropFilter, opAttrs, [
            x,
            filter,
            dy
        ]);
    }
};

},{"154107dae7ebda31":"hadS1","7c479bb1f0cf88ba":"4Q85s"}],"ixHqt":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dilation2dBackpropInputConfig = void 0;
var tfjs_1 = require("a54811b68e3b7610");
var nodejs_kernel_backend_1 = require("295cf87a73de917e");
exports.dilation2dBackpropInputConfig = {
    kernelName: tfjs_1.Dilation2DBackpropInput,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, x = _b.x, filter = _b.filter, dy = _b.dy;
        var _c = attrs, strides = _c.strides, pad = _c.pad, dilations = _c.dilations;
        var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, "NHWC" /* dataFormat */ , dilations), dilationHeight = _d.dilationHeight, dilationWidth = _d.dilationWidth, padInfo = _d.padInfo, strideHeight = _d.strideHeight, strideWidth = _d.strideWidth;
        var $strides = [
            1,
            strideHeight,
            strideWidth,
            1
        ];
        var $dilations = [
            1,
            dilationHeight,
            dilationWidth,
            1
        ];
        var nodeBackend = backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "strides",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "rates",
                type: nodeBackend.binding.TF_ATTR_INT,
                value: $dilations
            },
            {
                name: "padding",
                type: nodeBackend.binding.TF_ATTR_STRING,
                value: padInfo.type
            }
        ];
        return nodeBackend.executeSingleOutput(tfjs_1.Dilation2DBackpropInput, opAttrs, [
            x,
            filter,
            dy
        ]);
    }
};

},{"a54811b68e3b7610":"hadS1","295cf87a73de917e":"4Q85s"}],"iGhVY":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.einsumConfig = void 0;
var tfjs_1 = require("b8a97c0e4894f42d");
var nodejs_kernel_backend_1 = require("e7aa19a8a00945e6");
exports.einsumConfig = {
    kernelName: tfjs_1.Einsum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var inputs = args.inputs, attrs = args.attrs;
        var tensors = inputs;
        var backend = args.backend;
        var equation = attrs.equation;
        var opAttrs = [
            {
                name: "N",
                type: backend.binding.TF_ATTR_INT,
                value: tensors.length
            },
            {
                name: "equation",
                type: backend.binding.TF_ATTR_STRING,
                value: equation
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tensors)
        ];
        var tensorArray = Array.from(tensors);
        return backend.executeSingleOutput(tfjs_1.Einsum, opAttrs, tensorArray);
    }
};

},{"b8a97c0e4894f42d":"hadS1","e7aa19a8a00945e6":"4Q85s"}],"gW7LK":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.eluConfig = void 0;
var tfjs_1 = require("5f32381d322a0ad9");
exports.eluConfig = {
    kernelName: tfjs_1.Elu,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Elu, x);
    }
};

},{"5f32381d322a0ad9":"hadS1"}],"57NZ6":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.eluGradConfig = void 0;
var tfjs_1 = require("a1b2ef53c187b8a5");
var nodejs_kernel_backend_1 = require("1ff0f885146adc68");
exports.eluGradConfig = {
    kernelName: tfjs_1.EluGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, y = _a.y;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", y.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.EluGrad, opAttrs, [
            dy,
            y
        ]);
    }
};

},{"a1b2ef53c187b8a5":"hadS1","1ff0f885146adc68":"4Q85s"}],"cb1r4":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.equalConfig = void 0;
var tfjs_1 = require("d76f512187f3a319");
var nodejs_kernel_backend_1 = require("4a275a5e4e8f3713");
exports.equalConfig = {
    kernelName: tfjs_1.Equal,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Equal, opAttrs, [
            a,
            b
        ]);
    }
};

},{"d76f512187f3a319":"hadS1","4a275a5e4e8f3713":"4Q85s"}],"koqSD":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.erfConfig = void 0;
var tfjs_1 = require("fc7f8c35606eb9f3");
exports.erfConfig = {
    kernelName: tfjs_1.Erf,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Erf, x);
    }
};

},{"fc7f8c35606eb9f3":"hadS1"}],"l3fb5":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.expConfig = void 0;
var tfjs_1 = require("13c195527334d153");
exports.expConfig = {
    kernelName: tfjs_1.Exp,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var xTensor = x;
        if (x.dtype === "int32") {
            xTensor = x.toFloat();
            x.dispose();
        }
        return backend.executeSingleInput(tfjs_1.Exp, xTensor);
    }
};

},{"13c195527334d153":"hadS1"}],"lQoGN":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.expandDimsConfig = void 0;
var tfjs_1 = require("e8857261da182f6c");
exports.expandDimsConfig = {
    kernelName: tfjs_1.ExpandDims,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var input = args.inputs.input;
        var backend = args.backend;
        var dim = args.attrs.dim;
        var dimTensor = (0, tfjs_1.scalar)(dim, "int32");
        var res = backend.executeSingleOutput(tfjs_1.ExpandDims, [], [
            input,
            dimTensor
        ]);
        dimTensor.dispose();
        return res;
    }
};

},{"e8857261da182f6c":"hadS1"}],"bnyd2":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.expm1Config = void 0;
var tfjs_1 = require("f0dbd681ec68b25c");
exports.expm1Config = {
    kernelName: tfjs_1.Expm1,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Expm1, x);
    }
};

},{"f0dbd681ec68b25c":"hadS1"}],"3LbYz":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FFTConfig = void 0;
var tfjs_1 = require("2a38aebcbebe7704");
var nodejs_kernel_backend_1 = require("399ba090e3d6b315");
// tslint:disable-next-line: variable-name
exports.FFTConfig = {
    kernelName: tfjs_1.FFT,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var input = args.inputs.input;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tcomplex", input.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.FFT, opAttrs, [
            input
        ]);
    }
};

},{"2a38aebcbebe7704":"hadS1","399ba090e3d6b315":"4Q85s"}],"gka0h":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fillConfig = void 0;
var tfjs_1 = require("a71cdf3f3a75d2f");
exports.fillConfig = {
    kernelName: tfjs_1.Fill,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var backend = args.backend;
        var _a = args.attrs, shape = _a.shape, value = _a.value;
        var dtype = args.attrs.dtype;
        // TODO(cais, nkreeger): Investigate whether backend can be made into
        // a dtype helper method. The underlying op kernel doesn't accept undefined
        // or null dtype.
        if (dtype == null) {
            if (typeof value === "number") dtype = "float32";
            else dtype = "string";
        }
        var shapeTensor = (0, tfjs_1.tensor1d)(shape, "int32");
        var valueTensor = (0, tfjs_1.scalar)(value, dtype);
        var opAttrs = [
            {
                name: "T",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.getDTypeInteger(dtype)
            },
            {
                name: "index_type",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_INT32
            }
        ];
        var res = backend.executeSingleOutput(tfjs_1.Fill, opAttrs, [
            shapeTensor,
            valueTensor
        ]);
        shapeTensor.dispose();
        valueTensor.dispose();
        return res;
    }
};

},{"a71cdf3f3a75d2f":"hadS1"}],"4quxP":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.flipLeftRightConfig = void 0;
var tfjs_core_1 = require("dd5b6badc0d86317");
var nodejs_kernel_backend_1 = require("7903066132ddb85b");
exports.flipLeftRightConfig = {
    kernelName: tfjs_core_1.FlipLeftRight,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend;
        var nodeBackend = backend;
        var image = inputs.image;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", image.dtype)
        ];
        var axes = tfjs_core_1.util.parseAxisParam([
            2
        ], image.shape);
        var axisTensor = (0, tfjs_core_1.tensor1d)(axes, "int32");
        var res = nodeBackend.executeSingleOutput("ReverseV2", opAttrs, [
            image,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"dd5b6badc0d86317":"c1lsw","7903066132ddb85b":"4Q85s"}],"ezxvs":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.floorConfig = void 0;
var tfjs_1 = require("d4aa6b51fa941f5b");
exports.floorConfig = {
    kernelName: tfjs_1.Floor,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Floor, x);
    }
};

},{"d4aa6b51fa941f5b":"hadS1"}],"hQEvD":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.floorDivConfig = void 0;
var tfjs_1 = require("34a52e7311af3353");
var nodejs_kernel_backend_1 = require("9c2f88d07c36f31c");
exports.floorDivConfig = {
    kernelName: tfjs_1.FloorDiv,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.FloorDiv, opAttrs, [
            a,
            b
        ]);
    }
};

},{"34a52e7311af3353":"hadS1","9c2f88d07c36f31c":"4Q85s"}],"eEEpj":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fusedBatchNormConfig = void 0;
var tfjs_1 = require("766b75e91693825a");
var nodejs_kernel_backend_1 = require("9081d4812ead5130");
exports.fusedBatchNormConfig = {
    kernelName: tfjs_1.FusedBatchNorm,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, mean = _a.mean, variance = _a.variance;
        var _b = args.inputs, scale = _b.scale, offset = _b.offset;
        var backend = args.backend;
        var varianceEpsilon = args.attrs.varianceEpsilon;
        return (0, tfjs_1.tidy)(function() {
            if (mean.rank > 1) {
                // Fused batch norm doesn't work with high-dim mean/var/scale/offset.
                var inv = (0, tfjs_1.rsqrt)((0, tfjs_1.add)(variance, (0, tfjs_1.scalar)(varianceEpsilon)));
                if (scale != null) inv = (0, tfjs_1.mul)(inv, scale);
                var xNorm = (0, tfjs_1.mul)((0, tfjs_1.sub)(x, mean), inv);
                return offset != null ? (0, tfjs_1.add)(xNorm, offset) : xNorm;
            }
            var dataFormat = "NHWC";
            var depth = x.shape[3];
            var opAttrs = [
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
                {
                    name: "epsilon",
                    type: backend.binding.TF_ATTR_FLOAT,
                    value: varianceEpsilon
                },
                {
                    name: "data_format",
                    type: backend.binding.TF_ATTR_STRING,
                    value: dataFormat
                },
                {
                    name: "is_training",
                    type: backend.binding.TF_ATTR_BOOL,
                    value: false
                }
            ];
            var numOutputs = 5;
            if (scale == null) scale = (0, tfjs_1.fill)([
                depth
            ], 1);
            if (offset == null) offset = (0, tfjs_1.fill)([
                depth
            ], 0);
            return backend.executeMultipleOutputs(tfjs_1.FusedBatchNorm, opAttrs, [
                x,
                scale,
                offset,
                mean,
                variance
            ], numOutputs)[0];
        });
    }
};

},{"766b75e91693825a":"hadS1","9081d4812ead5130":"4Q85s"}],"hC9rP":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fusedConv2DConfig = void 0;
var tfjs_1 = require("393fdff731b6257b");
var Conv2D_1 = require("428aee25091e4136");
exports.fusedConv2DConfig = {
    kernelName: tfjs_1.FusedConv2D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, filter = _a.filter, bias = _a.bias, preluActivationWeights = _a.preluActivationWeights;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode, activation = _b.activation, leakyreluAlpha = _b.leakyreluAlpha;
        if (dataFormat !== "NHWC") throw new Error("Node backend FusedConv2D does not support dataFormat:'" + "".concat(dataFormat, "'. Please use 'NHWC'."));
        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        var result = (0, Conv2D_1.conv2dImpl)(x, filter, convInfo, backend);
        var toDispose = [];
        if (bias != null) {
            toDispose.push(result);
            result = (0, tfjs_1.add)(result, bias);
        }
        var temp = result;
        result = backend.applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);
        if (temp !== result) toDispose.push(temp);
        toDispose.forEach(function(t) {
            return t.dispose();
        });
        return result;
    }
};

},{"393fdff731b6257b":"hadS1","428aee25091e4136":"jetZD"}],"5E6wv":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fusedDepthwiseConv2DConfig = void 0;
var tfjs_1 = require("748fcb65b9537c84");
var DepthwiseConv2dNative_1 = require("1ee6cb28f66dbb02");
exports.fusedDepthwiseConv2DConfig = {
    kernelName: tfjs_1.FusedDepthwiseConv2D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, filter = _a.filter, bias = _a.bias, preluActivationWeights = _a.preluActivationWeights;
        var backend = args.backend;
        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode, activation = _b.activation, leakyreluAlpha = _b.leakyreluAlpha;
        var $dilations = dilations;
        if ($dilations == null) $dilations = [
            1,
            1
        ];
        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);
        var result = (0, DepthwiseConv2dNative_1.depthwiseConv2dNativeImpl)(x, filter, convInfo, backend);
        var toDispose = [];
        if (bias != null) {
            toDispose.push(result);
            result = (0, tfjs_1.add)(result, bias);
        }
        var temp = result;
        result = backend.applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);
        if (temp !== result) toDispose.push(temp);
        toDispose.forEach(function(t) {
            return t.dispose();
        });
        return result;
    }
};

},{"748fcb65b9537c84":"hadS1","1ee6cb28f66dbb02":"bnj5u"}],"7eK7s":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.gatherNdConfig = void 0;
var tfjs_1 = require("27ca94917ddcf487");
var nodejs_kernel_backend_1 = require("1b69af654f80a4a2");
exports.gatherNdConfig = {
    kernelName: tfjs_1.GatherNd,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, params = _a.params, indices = _a.indices;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tparams", params.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", "int32")
        ];
        return backend.executeSingleOutput(tfjs_1.GatherNd, opAttrs, [
            params,
            indices
        ]);
    }
};

},{"27ca94917ddcf487":"hadS1","1b69af654f80a4a2":"4Q85s"}],"b794N":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.gatherV2Config = void 0;
var tfjs_1 = require("6f38cfc129daafff");
var nodejs_kernel_backend_1 = require("dcd1f29abc1df8");
exports.gatherV2Config = {
    kernelName: tfjs_1.GatherV2,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, indices = _a.indices;
        var backend = args.backend;
        var _b = args.attrs, axis = _b.axis, batchDims = _b.batchDims;
        // Throw error when any index is out of bound.
        var indicesVals = backend.readSync(indices.dataId);
        var axisDim = x.shape[axis];
        var _loop_1 = function(i) {
            var index = indicesVals[i];
            tfjs_1.util.assert(index <= axisDim - 1 && index >= 0, function() {
                return "GatherV2: the index value ".concat(index, " is not in [0, ").concat(axisDim - 1, "]");
            });
        };
        for(var i = 0; i < indicesVals.length; ++i)_loop_1(i);
        // validate the inputs
        tfjs_1.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, axis, batchDims);
        var axisTensor = (0, tfjs_1.scalar)(axis, "int32");
        var opAttrs = [
            {
                name: "batch_dims",
                type: backend.binding.TF_ATTR_INT,
                value: batchDims
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tparams", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", indices.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Taxis", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.GatherV2, opAttrs, [
            x,
            indices,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"6f38cfc129daafff":"hadS1","dcd1f29abc1df8":"4Q85s"}],"6EZVF":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.greaterConfig = void 0;
var tfjs_1 = require("12f502a79411480");
var nodejs_kernel_backend_1 = require("5f1b720e6d07e102");
exports.greaterConfig = {
    kernelName: tfjs_1.Greater,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Greater, opAttrs, [
            a,
            b
        ]);
    }
};

},{"12f502a79411480":"hadS1","5f1b720e6d07e102":"4Q85s"}],"9Akbh":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.greaterEqualConfig = void 0;
var tfjs_1 = require("64f6583cbc822793");
var nodejs_kernel_backend_1 = require("922abb724a80cd59");
exports.greaterEqualConfig = {
    kernelName: tfjs_1.GreaterEqual,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.GreaterEqual, opAttrs, [
            a,
            b
        ]);
    }
};

},{"64f6583cbc822793":"hadS1","922abb724a80cd59":"4Q85s"}],"atIkl":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.identityConfig = void 0;
var tfjs_1 = require("2e83689fa0de57da");
exports.identityConfig = {
    kernelName: tfjs_1.Identity,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        // Backend needs to track refCount for the dataId for identity op
        args.backend.incRef(x.dataId);
        return {
            dataId: x.dataId,
            shape: x.shape,
            dtype: x.dtype
        };
    }
};

},{"2e83689fa0de57da":"hadS1"}],"6o99g":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFFTConfig = void 0;
var tfjs_1 = require("4cd24858c7befe39");
var nodejs_kernel_backend_1 = require("b2ced2890d1afafd");
// tslint:disable-next-line: variable-name
exports.IFFTConfig = {
    kernelName: tfjs_1.IFFT,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var input = args.inputs.input;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tcomplex", input.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.IFFT, opAttrs, [
            input
        ]);
    }
};

},{"4cd24858c7befe39":"hadS1","b2ced2890d1afafd":"4Q85s"}],"5H52Y":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.imagConfig = void 0;
var tfjs_1 = require("61029a0a81ef78e3");
exports.imagConfig = {
    kernelName: tfjs_1.Imag,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var input = args.inputs.input;
        var backend = args.backend;
        var opAttrs = [
            {
                name: "T",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_COMPLEX64
            },
            {
                name: "Tout",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_FLOAT
            }
        ];
        var inputs = [
            input
        ];
        return backend.executeSingleOutput(tfjs_1.Imag, opAttrs, inputs);
    }
};

},{"61029a0a81ef78e3":"hadS1"}],"4Qv6W":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isFiniteConfig = void 0;
var tfjs_1 = require("fee8971014bf8eb2");
exports.isFiniteConfig = {
    kernelName: tfjs_1.IsFinite,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.IsFinite, x);
    }
};

},{"fee8971014bf8eb2":"hadS1"}],"dsWD8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isInfConfig = void 0;
var tfjs_1 = require("3a1655b14553329c");
exports.isInfConfig = {
    kernelName: tfjs_1.IsInf,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.IsInf, x);
    }
};

},{"3a1655b14553329c":"hadS1"}],"4UgH6":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isNanConfig = void 0;
var tfjs_1 = require("b6a6bf133ba01455");
exports.isNanConfig = {
    kernelName: tfjs_1.IsNan,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.IsNan, x);
    }
};

},{"b6a6bf133ba01455":"hadS1"}],"jxm7C":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.leakyReluConfig = void 0;
var tfjs_1 = require("90336fab62139c63");
var nodejs_kernel_backend_1 = require("5d06299869bb408c");
exports.leakyReluConfig = {
    kernelName: tfjs_1.LeakyRelu,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var inputs = args.inputs;
        var attrs = args.attrs;
        var backend = args.backend;
        var x = inputs.x;
        var alpha = attrs.alpha;
        var opAttrs = [
            {
                name: "alpha",
                type: backend.binding.TF_ATTR_FLOAT,
                value: alpha
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.LeakyRelu, opAttrs, [
            x
        ]);
    }
};

},{"90336fab62139c63":"hadS1","5d06299869bb408c":"4Q85s"}],"cq8s4":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.lessConfig = void 0;
var tfjs_1 = require("95548501b8c24329");
var nodejs_kernel_backend_1 = require("c119f36a395880c0");
exports.lessConfig = {
    kernelName: tfjs_1.Less,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Less, opAttrs, [
            a,
            b
        ]);
    }
};

},{"95548501b8c24329":"hadS1","c119f36a395880c0":"4Q85s"}],"eDaOa":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.lessEqualConfig = void 0;
var tfjs_1 = require("6eaa286c8827dba5");
var nodejs_kernel_backend_1 = require("8001f14ffeadc332");
exports.lessEqualConfig = {
    kernelName: tfjs_1.LessEqual,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.LessEqual, opAttrs, [
            a,
            b
        ]);
    }
};

},{"6eaa286c8827dba5":"hadS1","8001f14ffeadc332":"4Q85s"}],"1FJam":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.linSpaceConfig = void 0;
var tfjs_1 = require("52351ff95a9f9a6d");
var nodejs_kernel_backend_1 = require("6a791a9b5152e486");
exports.linSpaceConfig = {
    kernelName: tfjs_1.LinSpace,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var backend = args.backend;
        var _a = args.attrs, start = _a.start, stop = _a.stop, num = _a.num;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", "float32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        return (0, tfjs_1.tidy)(function() {
            var inputs = [
                (0, tfjs_1.scalar)(start, "float32"),
                (0, tfjs_1.scalar)(stop, "float32"),
                (0, tfjs_1.scalar)(num, "int32")
            ];
            return backend.executeSingleOutput(tfjs_1.LinSpace, opAttrs, inputs);
        });
    }
};

},{"52351ff95a9f9a6d":"hadS1","6a791a9b5152e486":"4Q85s"}],"1F1dd":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logConfig = void 0;
var tfjs_1 = require("137847660e723e8b");
exports.logConfig = {
    kernelName: tfjs_1.Log,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Log, x);
    }
};

},{"137847660e723e8b":"hadS1"}],"5JqFE":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.log1pConfig = void 0;
var tfjs_1 = require("eb3db2aa0473242c");
exports.log1pConfig = {
    kernelName: tfjs_1.Log1p,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Log1p, x);
    }
};

},{"eb3db2aa0473242c":"hadS1"}],"9YdRJ":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logicalAndConfig = void 0;
var tfjs_1 = require("c1181e3d3f1e415c");
exports.logicalAndConfig = {
    kernelName: tfjs_1.LogicalAnd,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        return backend.executeSingleOutput(tfjs_1.LogicalAnd, [], [
            a,
            b
        ]);
    }
};

},{"c1181e3d3f1e415c":"hadS1"}],"eaYT5":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logicalNotConfig = void 0;
var tfjs_1 = require("972ce16d93aed1bc");
exports.logicalNotConfig = {
    kernelName: tfjs_1.LogicalNot,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleOutput(tfjs_1.LogicalNot, [], [
            x
        ]);
    }
};

},{"972ce16d93aed1bc":"hadS1"}],"7gRlF":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logicalOrConfig = void 0;
var tfjs_1 = require("cc939093d31ad46d");
exports.logicalOrConfig = {
    kernelName: tfjs_1.LogicalOr,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        return backend.executeSingleOutput(tfjs_1.LogicalOr, [], [
            a,
            b
        ]);
    }
};

},{"cc939093d31ad46d":"hadS1"}],"detYc":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LRNConfig = void 0;
var tfjs_1 = require("f6889a52b1e1b14");
var nodejs_kernel_backend_1 = require("1462b532dde0ceaa");
// tslint:disable-next-line: variable-name
exports.LRNConfig = {
    kernelName: tfjs_1.LRN,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, depthRadius = _a.depthRadius, bias = _a.bias, alpha = _a.alpha, beta = _a.beta;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "depth_radius",
                type: backend.binding.TF_ATTR_INT,
                value: depthRadius
            },
            {
                name: "bias",
                type: backend.binding.TF_ATTR_FLOAT,
                value: bias
            },
            {
                name: "alpha",
                type: backend.binding.TF_ATTR_FLOAT,
                value: alpha
            },
            {
                name: "beta",
                type: backend.binding.TF_ATTR_FLOAT,
                value: beta
            }
        ];
        return backend.executeSingleOutput(tfjs_1.LRN, opAttrs, [
            x
        ]);
    }
};

},{"f6889a52b1e1b14":"hadS1","1462b532dde0ceaa":"4Q85s"}],"1myAw":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LRNGradConfig = void 0;
var tfjs_1 = require("bbbef89809ad60b0");
var nodejs_kernel_backend_1 = require("c759d626c16794ca");
// tslint:disable-next-line: variable-name
exports.LRNGradConfig = {
    kernelName: tfjs_1.LRNGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, y = _a.y, dy = _a.dy;
        var backend = args.backend;
        var _b = args.attrs, depthRadius = _b.depthRadius, bias = _b.bias, alpha = _b.alpha, beta = _b.beta;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", dy.dtype),
            {
                name: "depth_radius",
                type: backend.binding.TF_ATTR_INT,
                value: depthRadius
            },
            {
                name: "bias",
                type: backend.binding.TF_ATTR_FLOAT,
                value: bias
            },
            {
                name: "alpha",
                type: backend.binding.TF_ATTR_FLOAT,
                value: alpha
            },
            {
                name: "beta",
                type: backend.binding.TF_ATTR_FLOAT,
                value: beta
            }
        ];
        return backend.executeSingleOutput(tfjs_1.LRNGrad, opAttrs, [
            dy,
            x,
            y
        ]);
    }
};

},{"bbbef89809ad60b0":"hadS1","c759d626c16794ca":"4Q85s"}],"7Kv6O":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maxConfig = void 0;
var tfjs_1 = require("a5748a053ca25422");
exports.maxConfig = {
    kernelName: tfjs_1.Max,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, reductionIndices = _a.reductionIndices, keepDims = _a.keepDims;
        var axes = tfjs_1.util.parseAxisParam(reductionIndices, x.shape);
        var axesTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Max, backend.createReductionOpAttrs(x, keepDims), [
            x,
            axesTensor
        ]);
        axesTensor.dispose();
        return res;
    }
};

},{"a5748a053ca25422":"hadS1"}],"1ILpv":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maximumConfig = void 0;
var tfjs_1 = require("cb68cc2df85c5b75");
var nodejs_kernel_backend_1 = require("57e035d0f10a609e");
exports.maximumConfig = {
    kernelName: tfjs_1.Maximum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Maximum, opAttrs, [
            a,
            b
        ]);
    }
};

},{"cb68cc2df85c5b75":"hadS1","57e035d0f10a609e":"4Q85s"}],"kx5tj":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maxPoolConfig = void 0;
var tfjs_1 = require("17ac03547a365ccd");
var nodejs_kernel_backend_1 = require("aeaaf26ab89df50f");
exports.maxPoolConfig = {
    kernelName: tfjs_1.MaxPool,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.MaxPool, opAttrs, [
            x
        ]);
    }
};

},{"17ac03547a365ccd":"hadS1","aeaaf26ab89df50f":"4Q85s"}],"8jri0":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maxPool3DConfig = void 0;
var tfjs_1 = require("d0432d294c5b8a4d");
var nodejs_kernel_backend_1 = require("8e19ad061683089");
exports.maxPool3DConfig = {
    kernelName: tfjs_1.MaxPool3D,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad, dataFormat = _a.dataFormat, dimRoundingMode = _a.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode, dataFormat);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterDepth,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var $dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: $dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.MaxPool3D, opAttrs, [
            x
        ]);
    }
};

},{"d0432d294c5b8a4d":"hadS1","8e19ad061683089":"4Q85s"}],"49kc9":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maxPool3DGradConfig = void 0;
var tfjs_1 = require("1f7fa025a5e9796a");
var nodejs_kernel_backend_1 = require("d42aaf9308c5295f");
exports.maxPool3DGradConfig = {
    kernelName: tfjs_1.MaxPool3DGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, input = _a.input, output = _a.output;
        var backend = args.backend;
        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding type was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterDepth,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideDepth,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NDHWC" : "NCDHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.MaxPool3DGrad, opAttrs, [
            input,
            output,
            dy
        ]);
    }
};

},{"1f7fa025a5e9796a":"hadS1","d42aaf9308c5295f":"4Q85s"}],"j7eMz":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.maxPoolGradConfig = void 0;
var tfjs_1 = require("fe6a3d1541530e20");
var nodejs_kernel_backend_1 = require("6c9ed4df44947afd");
exports.maxPoolGradConfig = {
    kernelName: tfjs_1.MaxPoolGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, dy = _a.dy, input = _a.input, output = _a.output;
        var backend = args.backend;
        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;
        var convInfo = tfjs_1.backend_util.computePool2DInfo(input.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
        if (convInfo.padInfo.type !== "VALID" && convInfo.padInfo.type !== "SAME") throw new Error("TF Backend supports only 'valid' and 'same' padding " + "while padding type was ".concat(convInfo.padInfo.type));
        var ksize = [
            1,
            convInfo.filterHeight,
            convInfo.filterWidth,
            1
        ];
        var $strides = [
            1,
            convInfo.strideHeight,
            convInfo.strideWidth,
            1
        ];
        var padding = convInfo.padInfo.type;
        var dataFormat = convInfo.dataFormat === "channelsLast" ? "NHWC" : "NCHW";
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input.dtype),
            {
                name: "ksize",
                type: backend.binding.TF_ATTR_INT,
                value: ksize
            },
            {
                name: "strides",
                type: backend.binding.TF_ATTR_INT,
                value: $strides
            },
            {
                name: "padding",
                type: backend.binding.TF_ATTR_STRING,
                value: padding
            },
            {
                name: "data_format",
                type: backend.binding.TF_ATTR_STRING,
                value: dataFormat
            }
        ];
        return backend.executeSingleOutput(tfjs_1.MaxPoolGrad, opAttrs, [
            input,
            output,
            dy
        ]);
    }
};

},{"fe6a3d1541530e20":"hadS1","6c9ed4df44947afd":"4Q85s"}],"fmVFT":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.meanConfig = void 0;
var tfjs_1 = require("ee618fe6ba6d2ca7");
exports.meanConfig = {
    kernelName: tfjs_1.Mean,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var axes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var axesTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        // Cast to float32 to match existing tfjs implementation/tests.
        var asFloat32 = (0, tfjs_1.cast)(x, "float32");
        var res = backend.executeSingleOutput(tfjs_1.Mean, backend.createReductionOpAttrs(x, keepDims), [
            asFloat32,
            axesTensor
        ]);
        asFloat32.dispose();
        axesTensor.dispose();
        return res;
    }
};

},{"ee618fe6ba6d2ca7":"hadS1"}],"8X7Vj":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.minConfig = void 0;
var tfjs_1 = require("9383226d36698e7c");
exports.minConfig = {
    kernelName: tfjs_1.Min,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var axes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var axesTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Min, backend.createReductionOpAttrs(x, keepDims), [
            x,
            axesTensor
        ]);
        axesTensor.dispose();
        return res;
    }
};

},{"9383226d36698e7c":"hadS1"}],"4kQ6w":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.minimumConfig = void 0;
var tfjs_1 = require("ffb6817cdcbcf9f4");
var nodejs_kernel_backend_1 = require("7cceb01d1d8608ad");
exports.minimumConfig = {
    kernelName: tfjs_1.Minimum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Minimum, opAttrs, [
            a,
            b
        ]);
    }
};

},{"ffb6817cdcbcf9f4":"hadS1","7cceb01d1d8608ad":"4Q85s"}],"6ZIm8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mirrorPadConfig = void 0;
var tfjs_1 = require("3770c4f94e8f8b12");
var nodejs_kernel_backend_1 = require("c49cf5fdc7e12eb6");
exports.mirrorPadConfig = {
    kernelName: tfjs_1.MirrorPad,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var x = inputs.x;
        var _b = attrs, paddings = _b.paddings, mode = _b.mode;
        var nodeBackend = backend;
        var paddingsTensor = (0, tfjs_1.tensor2d)(paddings, [
            paddings.length,
            2
        ], "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tpaddings", paddingsTensor.dtype),
            {
                name: "mode",
                type: nodeBackend.binding.TF_ATTR_STRING,
                value: mode.toUpperCase()
            }
        ];
        var output = nodeBackend.executeSingleOutput("MirrorPad", opAttrs, [
            x,
            paddingsTensor
        ]);
        paddingsTensor.dispose();
        return output;
    }
};

},{"3770c4f94e8f8b12":"hadS1","c49cf5fdc7e12eb6":"4Q85s"}],"2KqsU":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modConfig = void 0;
var tfjs_1 = require("599ae9c43c30d35f");
var nodejs_kernel_backend_1 = require("edd0a1b5a2de3ad4");
exports.modConfig = {
    kernelName: tfjs_1.Mod,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", a.dtype)
        ];
        return backend.executeSingleOutput("FloorMod", opAttrs, [
            a,
            b
        ]);
    }
};

},{"599ae9c43c30d35f":"hadS1","edd0a1b5a2de3ad4":"4Q85s"}],"gTfx5":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.multinomialConfig = void 0;
var tfjs_1 = require("cc2f7d5efa0630fb");
var nodejs_kernel_backend_1 = require("d7a135d4df54b11");
exports.multinomialConfig = {
    kernelName: tfjs_1.Multinomial,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var logits = args.inputs.logits;
        var backend = args.backend;
        var _a = args.attrs, numSamples = _a.numSamples, seed = _a.seed, normalized = _a.normalized;
        if (normalized) throw new Error("TF Node backend does not support normalized logits passed to multinomial");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", logits.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("output_dtype", "int32"),
            {
                name: "seed",
                type: backend.binding.TF_ATTR_INT,
                value: seed
            },
            {
                name: "seed2",
                type: backend.binding.TF_ATTR_INT,
                value: seed * seed
            }
        ];
        var numSamplesTensor = (0, tfjs_1.scalar)(numSamples, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Multinomial, opAttrs, [
            logits,
            numSamplesTensor
        ]);
        numSamplesTensor.dispose();
        return res;
    }
};

},{"cc2f7d5efa0630fb":"hadS1","d7a135d4df54b11":"4Q85s"}],"8ou37":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.multiplyConfig = void 0;
var tfjs_1 = require("96ddeb8241295268");
var nodejs_kernel_backend_1 = require("2406ec243163a298");
exports.multiplyConfig = {
    kernelName: tfjs_1.Multiply,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput("Mul", opAttrs, [
            a,
            b
        ]);
    }
};

},{"96ddeb8241295268":"hadS1","2406ec243163a298":"4Q85s"}],"lmtV4":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.negConfig = void 0;
var tfjs_1 = require("d317874a69b34f3d");
exports.negConfig = {
    kernelName: tfjs_1.Neg,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Neg, x);
    }
};

},{"d317874a69b34f3d":"hadS1"}],"hZ3A9":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nonMaxSuppressionV3Config = void 0;
var tfjs_1 = require("4a9311d1af382288");
var nodejs_kernel_backend_1 = require("7976cb7596d06208");
exports.nonMaxSuppressionV3Config = {
    kernelName: tfjs_1.NonMaxSuppressionV3,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, boxes = _a.boxes, scores = _a.scores;
        var backend = args.backend;
        var _b = args.attrs, maxOutputSize = _b.maxOutputSize, iouThreshold = _b.iouThreshold, scoreThreshold = _b.scoreThreshold;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", boxes.dtype)
        ];
        var maxOutputSizeTensor = (0, tfjs_1.scalar)(maxOutputSize, "int32");
        var iouThresholdTensor = (0, tfjs_1.scalar)(iouThreshold);
        var scoreThresholdTensor = (0, tfjs_1.scalar)(scoreThreshold);
        var res = backend.executeSingleOutput(tfjs_1.NonMaxSuppressionV3, opAttrs, [
            boxes,
            scores,
            maxOutputSizeTensor,
            iouThresholdTensor,
            scoreThresholdTensor
        ]);
        maxOutputSizeTensor.dispose();
        iouThresholdTensor.dispose();
        scoreThresholdTensor.dispose();
        return res;
    }
};

},{"4a9311d1af382288":"hadS1","7976cb7596d06208":"4Q85s"}],"eGm9t":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nonMaxSuppressionV4Config = void 0;
var tfjs_1 = require("ba040ad08ec67298");
var nodejs_kernel_backend_1 = require("b38e0d566a2a8044");
// TODO(nsthorat, dsmilkov): Remove dependency on tensors, use dataId.
exports.nonMaxSuppressionV4Config = {
    kernelName: tfjs_1.NonMaxSuppressionV4,
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, boxes = _b.boxes, scores = _b.scores;
        var _c = attrs, maxOutputSize = _c.maxOutputSize, iouThreshold = _c.iouThreshold, scoreThreshold = _c.scoreThreshold, padToMaxOutputSize = _c.padToMaxOutputSize;
        var maxOutputSizeTensor = (0, tfjs_1.scalar)(maxOutputSize, "int32");
        var iouThresholdTensor = (0, tfjs_1.scalar)(iouThreshold, "float32");
        var scoreThresholdTensor = (0, tfjs_1.scalar)(scoreThreshold, "float32");
        var nodeBackend = backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", boxes.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T_threshold", "float32"),
            {
                name: "pad_to_max_output_size",
                type: nodeBackend.binding.TF_ATTR_BOOL,
                value: padToMaxOutputSize
            }
        ];
        var _d = nodeBackend.executeMultipleOutputs("NonMaxSuppressionV4", opAttrs, [
            boxes,
            scores,
            maxOutputSizeTensor,
            iouThresholdTensor,
            scoreThresholdTensor
        ], 2), selectedIndices = _d[0], validOutputs = _d[1];
        maxOutputSizeTensor.dispose();
        iouThresholdTensor.dispose();
        scoreThresholdTensor.dispose();
        return [
            selectedIndices,
            validOutputs
        ];
    }
};

},{"ba040ad08ec67298":"hadS1","b38e0d566a2a8044":"4Q85s"}],"3uHWN":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nonMaxSuppressionV5Config = void 0;
var tfjs_1 = require("ae2afa3598301efb");
var nodejs_kernel_backend_1 = require("f51aea4f879ab997");
// TODO(nsthorat, dsmilkov): Remove dependency on tensors, use dataId.
exports.nonMaxSuppressionV5Config = {
    kernelName: "NonMaxSuppressionV5",
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
        var _b = inputs, boxes = _b.boxes, scores = _b.scores;
        var _c = attrs, maxOutputSize = _c.maxOutputSize, iouThreshold = _c.iouThreshold, scoreThreshold = _c.scoreThreshold, softNmsSigma = _c.softNmsSigma;
        var maxOutputSizeTensor = (0, tfjs_1.scalar)(maxOutputSize, "int32");
        var iouThresholdTensor = (0, tfjs_1.scalar)(iouThreshold);
        var scoreThresholdTensor = (0, tfjs_1.scalar)(scoreThreshold);
        var softNmsSigmaTensor = (0, tfjs_1.scalar)(softNmsSigma);
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", boxes.dtype)
        ];
        var nodeBackend = backend;
        var _d = nodeBackend.executeMultipleOutputs("NonMaxSuppressionV5", opAttrs, [
            boxes,
            scores,
            maxOutputSizeTensor,
            iouThresholdTensor,
            scoreThresholdTensor,
            softNmsSigmaTensor
        ], 3), selectedIndices = _d[0], selectedScores = _d[1], validOutputs = _d[2];
        maxOutputSizeTensor.dispose();
        iouThresholdTensor.dispose();
        scoreThresholdTensor.dispose();
        softNmsSigmaTensor.dispose();
        validOutputs.dispose();
        return [
            selectedIndices,
            selectedScores
        ];
    }
};

},{"ae2afa3598301efb":"hadS1","f51aea4f879ab997":"4Q85s"}],"76Lsj":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.notEqualConfig = void 0;
var tfjs_1 = require("62a20666af21df1d");
var nodejs_kernel_backend_1 = require("859d6c36a4fd27a3");
exports.notEqualConfig = {
    kernelName: tfjs_1.NotEqual,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.NotEqual, opAttrs, [
            a,
            b
        ]);
    }
};

},{"62a20666af21df1d":"hadS1","859d6c36a4fd27a3":"4Q85s"}],"3FQhy":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oneHotConfig = void 0;
var tfjs_1 = require("c8c07e2976849dd8");
var nodejs_kernel_backend_1 = require("a83dd49fc9bbcf18");
exports.oneHotConfig = {
    kernelName: tfjs_1.OneHot,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var indices = args.inputs.indices;
        var backend = args.backend;
        var _a = args.attrs, dtype = _a.dtype, depth = _a.depth, onValue = _a.onValue, offValue = _a.offValue;
        var depthTensor = (0, tfjs_1.scalar)(depth, "int32");
        var onValueTensor = (0, tfjs_1.scalar)(onValue, dtype);
        var offValueTensor = (0, tfjs_1.scalar)(offValue, dtype);
        var opAttrs = [
            {
                name: "axis",
                type: backend.binding.TF_ATTR_INT,
                value: -1
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("TI", indices.dtype)
        ];
        var res = backend.executeSingleOutput(tfjs_1.OneHot, opAttrs, [
            indices,
            depthTensor,
            onValueTensor,
            offValueTensor
        ]);
        depthTensor.dispose();
        onValueTensor.dispose();
        offValueTensor.dispose();
        return res;
    }
};

},{"c8c07e2976849dd8":"hadS1","a83dd49fc9bbcf18":"4Q85s"}],"7y8Bt":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.onesLikeConfig = void 0;
var tfjs_1 = require("804638ed7d8d8fc3");
exports.onesLikeConfig = {
    kernelName: tfjs_1.OnesLike,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var opAttrs = [
            {
                name: "T",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.getDTypeInteger(x.dtype)
            }
        ];
        return backend.executeSingleOutput(tfjs_1.OnesLike, opAttrs, [
            x
        ]);
    }
};

},{"804638ed7d8d8fc3":"hadS1"}],"jOgRY":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packConfig = exports.pack = void 0;
var tfjs_1 = require("163add6e81952f3c");
var nodejs_kernel_backend_1 = require("4bdd11aebbcec93c");
function pack(args) {
    var inputs = args.inputs, backend = args.backend, attrs = args.attrs;
    var axis = attrs.axis;
    var opAttrs = [
        {
            name: "N",
            type: backend.binding.TF_ATTR_INT,
            value: inputs.length
        },
        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", inputs),
        {
            name: "axis",
            type: backend.binding.TF_ATTR_INT,
            value: axis
        }
    ];
    var res = backend.executeSingleOutput(tfjs_1.Pack, opAttrs, inputs);
    return res;
}
exports.pack = pack;
exports.packConfig = {
    kernelName: tfjs_1.Pack,
    backendName: "tensorflow",
    kernelFunc: pack
};

},{"163add6e81952f3c":"hadS1","4bdd11aebbcec93c":"4Q85s"}],"lDZbD":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.padV2Config = void 0;
var tfjs_1 = require("9665961e62f093ce");
var nodejs_kernel_backend_1 = require("3f557721ecc5fd8d");
exports.padV2Config = {
    kernelName: tfjs_1.PadV2,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, paddings = _a.paddings, constantValue = _a.constantValue;
        // Bind tensor values
        var paddingsTensor = (0, tfjs_1.tensor2d)(paddings, [
            paddings.length,
            2
        ], "int32");
        var constantTensor = (0, tfjs_1.scalar)(constantValue, x.dtype);
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tpaddings", paddingsTensor.dtype)
        ];
        var res = backend.executeSingleOutput(tfjs_1.PadV2, opAttrs, [
            x,
            paddingsTensor,
            constantTensor
        ]);
        paddingsTensor.dispose();
        constantTensor.dispose();
        return res;
    }
};

},{"9665961e62f093ce":"hadS1","3f557721ecc5fd8d":"4Q85s"}],"9cn8A":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.powConfig = void 0;
var tfjs_1 = require("bb53a0ea7fedad49");
var nodejs_kernel_backend_1 = require("67e0739294b66f48");
exports.powConfig = {
    kernelName: tfjs_1.Pow,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", dtype)
        ];
        return (0, tfjs_1.tidy)(function() {
            return backend.executeSingleOutput(tfjs_1.Pow, opAttrs, [
                (0, tfjs_1.cast)(a, dtype),
                (0, tfjs_1.cast)(b, dtype)
            ]);
        });
    }
};

},{"bb53a0ea7fedad49":"hadS1","67e0739294b66f48":"4Q85s"}],"9wAEu":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.preluConfig = void 0;
var tfjs_1 = require("e4eeb809db503c4e");
exports.preluConfig = {
    kernelName: tfjs_1.Prelu,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var inputs = args.inputs;
        var x = inputs.x;
        var alpha = inputs.alpha;
        return (0, tfjs_1.tidy)(function() {
            var pos = (0, tfjs_1.relu)(x);
            var neg = alpha.mul(x.sub((0, tfjs_1.abs)(x))).mul(0.5);
            return pos.add(neg);
        });
    }
};

},{"e4eeb809db503c4e":"hadS1"}],"izwMZ":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.prodConfig = void 0;
var tfjs_1 = require("ed204b53827ced3e");
var nodejs_kernel_backend_1 = require("dbd2deebb9c6ce7b");
exports.prodConfig = {
    kernelName: tfjs_1.Prod,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var axes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var axesTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        var opAttrs = [
            {
                name: "keep_dims",
                type: backend.binding.TF_ATTR_BOOL,
                value: keepDims
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.Prod, opAttrs, [
            x,
            axesTensor
        ]);
        axesTensor.dispose();
        return res;
    }
};

},{"ed204b53827ced3e":"hadS1","dbd2deebb9c6ce7b":"4Q85s"}],"j4Fpn":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rangeConfig = void 0;
var tfjs_1 = require("fda6268e5b50cdcf");
var nodejs_kernel_backend_1 = require("b4ed25f2ae03588c");
exports.rangeConfig = {
    kernelName: tfjs_1.Range,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var backend = args.backend;
        var _a = args.attrs, start = _a.start, stop = _a.stop, dtype = _a.dtype;
        var step = args.attrs.step;
        // TensorFlow.js specific allowances
        var sameStartStop = start === stop;
        var increasingRangeNegativeStep = start < stop && step < 0;
        var decreasingRangePositiveStep = stop < start && step > 1;
        if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) return (0, tfjs_1.zeros)([
            0
        ], dtype);
        if (stop < start && step === 1) // Auto adjust the step's sign if it hasn't been set
        // (or was set to 1)
        step = -1;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", dtype)
        ];
        var startTensor = (0, tfjs_1.scalar)(start, dtype);
        var stopTensor = (0, tfjs_1.scalar)(stop, dtype);
        var stepTensor = (0, tfjs_1.scalar)(step, dtype);
        var res = backend.executeSingleOutput(tfjs_1.Range, opAttrs, [
            startTensor,
            stopTensor,
            stepTensor
        ]);
        startTensor.dispose();
        stopTensor.dispose();
        stepTensor.dispose();
        return res;
    }
};

},{"fda6268e5b50cdcf":"hadS1","b4ed25f2ae03588c":"4Q85s"}],"3zBCx":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.realConfig = void 0;
var tfjs_1 = require("81796fd1b52dace6");
var nodejs_kernel_backend_1 = require("ab64ea60c46cf347");
exports.realConfig = {
    kernelName: tfjs_1.Real,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var input = args.inputs.input;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", input),
            {
                name: "Tout",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_FLOAT
            }
        ];
        var inputs = [
            input
        ];
        return backend.executeSingleOutput(tfjs_1.Real, opAttrs, inputs);
    }
};

},{"81796fd1b52dace6":"hadS1","ab64ea60c46cf347":"4Q85s"}],"2aZi2":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.realDivConfig = void 0;
var tfjs_1 = require("8aded5939137e75");
var nodejs_kernel_backend_1 = require("1ab07543dbc5b122");
exports.realDivConfig = {
    kernelName: tfjs_1.RealDiv,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.RealDiv, opAttrs, [
            a,
            b
        ]);
    }
};

},{"8aded5939137e75":"hadS1","1ab07543dbc5b122":"4Q85s"}],"hxSrE":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reciprocalConfig = void 0;
var tfjs_1 = require("4a9ed5a651da0581");
exports.reciprocalConfig = {
    kernelName: tfjs_1.Reciprocal,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Reciprocal, x);
    }
};

},{"4a9ed5a651da0581":"hadS1"}],"hU4F9":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reluConfig = void 0;
var tfjs_1 = require("b8b1e6af1a2346b4");
exports.reluConfig = {
    kernelName: tfjs_1.Relu,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Relu, x);
    }
};

},{"b8b1e6af1a2346b4":"hadS1"}],"eZzhs":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.relu6Config = void 0;
var tfjs_1 = require("bf280cd028512e70");
exports.relu6Config = {
    kernelName: tfjs_1.Relu6,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Relu6, x);
    }
};

},{"bf280cd028512e70":"hadS1"}],"iw3MS":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reshapeConfig = void 0;
var tfjs_1 = require("bc92f30979590013");
var nodejs_kernel_backend_1 = require("79ed5fea4204633");
exports.reshapeConfig = {
    kernelName: tfjs_1.Reshape,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var shape = args.attrs.shape;
        var shapeTensor = (0, tfjs_1.tensor1d)(shape, "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tshape", shapeTensor.dtype)
        ];
        var res = backend.executeSingleOutput(tfjs_1.Reshape, opAttrs, [
            x,
            shapeTensor
        ]);
        shapeTensor.dispose();
        return res;
    }
};

},{"bc92f30979590013":"hadS1","79ed5fea4204633":"4Q85s"}],"khUA9":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resizeBilinearConfig = void 0;
var tfjs_1 = require("f56db22e2bd9cca8");
var nodejs_kernel_backend_1 = require("eeda23d0d408eb58");
exports.resizeBilinearConfig = {
    kernelName: tfjs_1.ResizeBilinear,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var images = args.inputs.images;
        var backend = args.backend;
        var _a = args.attrs, alignCorners = _a.alignCorners, halfPixelCenters = _a.halfPixelCenters, size = _a.size;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", images.dtype),
            {
                name: "align_corners",
                type: backend.binding.TF_ATTR_BOOL,
                value: alignCorners
            },
            {
                name: "half_pixel_centers",
                type: backend.binding.TF_ATTR_BOOL,
                value: halfPixelCenters
            }
        ];
        var newHeight = size[0], newWidth = size[1];
        var sizeTensor = (0, tfjs_1.tensor1d)([
            newHeight,
            newWidth
        ], "int32");
        var ret = backend.executeSingleOutput(tfjs_1.ResizeBilinear, opAttrs, [
            images,
            sizeTensor
        ]);
        sizeTensor.dispose();
        return ret;
    }
};

},{"f56db22e2bd9cca8":"hadS1","eeda23d0d408eb58":"4Q85s"}],"cY5hV":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resizeBilinearGradConfig = void 0;
var tfjs_1 = require("2b466b2a97125c02");
var nodejs_kernel_backend_1 = require("77ea5be5e553c0fd");
exports.resizeBilinearGradConfig = {
    kernelName: tfjs_1.ResizeBilinearGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, images = _a.images, dy = _a.dy;
        var backend = args.backend;
        var alignCorners = args.attrs.alignCorners;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", images.dtype),
            {
                name: "align_corners",
                type: backend.binding.TF_ATTR_BOOL,
                value: alignCorners
            }
        ];
        return backend.executeSingleOutput(tfjs_1.ResizeBilinearGrad, opAttrs, [
            dy,
            images
        ]);
    }
};

},{"2b466b2a97125c02":"hadS1","77ea5be5e553c0fd":"4Q85s"}],"8oGjj":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resizeNearestNeighborConfig = void 0;
var tfjs_1 = require("a9e2bcfcf77200a3");
var nodejs_kernel_backend_1 = require("e1d88815378d847d");
exports.resizeNearestNeighborConfig = {
    kernelName: tfjs_1.ResizeNearestNeighbor,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var images = args.inputs.images;
        var backend = args.backend;
        var _a = args.attrs, alignCorners = _a.alignCorners, halfPixelCenters = _a.halfPixelCenters, size = _a.size;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", images.dtype),
            {
                name: "align_corners",
                type: backend.binding.TF_ATTR_BOOL,
                value: alignCorners
            },
            {
                name: "half_pixel_centers",
                type: backend.binding.TF_ATTR_BOOL,
                value: halfPixelCenters
            }
        ];
        var newHeight = size[0], newWidth = size[1];
        var sizeTensor = (0, tfjs_1.tensor1d)([
            newHeight,
            newWidth
        ], "int32");
        var res = backend.executeSingleOutput(tfjs_1.ResizeNearestNeighbor, opAttrs, [
            images,
            sizeTensor
        ]);
        sizeTensor.dispose();
        return res;
    }
};

},{"a9e2bcfcf77200a3":"hadS1","e1d88815378d847d":"4Q85s"}],"47vM8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resizeNearestNeighborGradConfig = void 0;
var tfjs_1 = require("190a1ea8af5c0a1f");
var nodejs_kernel_backend_1 = require("46c698b4bccdecba");
exports.resizeNearestNeighborGradConfig = {
    kernelName: tfjs_1.ResizeNearestNeighborGrad,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, images = _a.images, dy = _a.dy;
        var backend = args.backend;
        var alignCorners = args.attrs.alignCorners;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", images.dtype),
            {
                name: "align_corners",
                type: backend.binding.TF_ATTR_BOOL,
                value: alignCorners
            }
        ];
        var _b = images.shape, origHeight = _b[1], origWidth = _b[2];
        var sizeTensor = (0, tfjs_1.tensor1d)([
            origHeight,
            origWidth
        ], "int32");
        var res = backend.executeSingleOutput(tfjs_1.ResizeNearestNeighborGrad, opAttrs, [
            dy,
            sizeTensor
        ]);
        sizeTensor.dispose();
        return res;
    }
};

},{"190a1ea8af5c0a1f":"hadS1","46c698b4bccdecba":"4Q85s"}],"3JRig":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reverseConfig = void 0;
var tfjs_1 = require("bee0b9ffa1d33f4");
var nodejs_kernel_backend_1 = require("aa3c3a6a207e21ad");
exports.reverseConfig = {
    kernelName: tfjs_1.Reverse,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var dims = args.attrs.dims;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tidx", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype)
        ];
        var axes = tfjs_1.util.parseAxisParam(dims, x.shape);
        var axisTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        var res = backend.executeSingleOutput("ReverseV2", opAttrs, [
            x,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"bee0b9ffa1d33f4":"hadS1","aa3c3a6a207e21ad":"4Q85s"}],"fc2RO":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.roundConfig = void 0;
var tfjs_1 = require("7d6e4d88f19ce172");
exports.roundConfig = {
    kernelName: tfjs_1.Round,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Round, x);
    }
};

},{"7d6e4d88f19ce172":"hadS1"}],"73GqI":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rsqrtConfig = void 0;
var tfjs_1 = require("8a80873b8394b2d1");
exports.rsqrtConfig = {
    kernelName: tfjs_1.Rsqrt,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Rsqrt, x);
    }
};

},{"8a80873b8394b2d1":"hadS1"}],"4NF0R":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scatterNdConfig = void 0;
var tfjs_1 = require("ce39455d082f06f2");
var nodejs_kernel_backend_1 = require("31b82d2992c65434");
exports.scatterNdConfig = {
    kernelName: tfjs_1.ScatterNd,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, indices = _a.indices, updates = _a.updates;
        var backend = args.backend;
        var shape = args.attrs.shape;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", updates.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", "int32")
        ];
        var shapeTensor = (0, tfjs_1.tensor1d)(shape, "int32");
        var ret = backend.executeSingleOutput(tfjs_1.ScatterNd, opAttrs, [
            indices,
            updates,
            shapeTensor
        ]);
        shapeTensor.dispose();
        return ret;
    }
};

},{"ce39455d082f06f2":"hadS1","31b82d2992c65434":"4Q85s"}],"cGWPa":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.selectConfig = void 0;
var tfjs_1 = require("97a628d602d7f2f");
var nodejs_kernel_backend_1 = require("320b003db2b96a78");
exports.selectConfig = {
    kernelName: tfjs_1.Select,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, condition = _a.condition, t = _a.t, e = _a.e;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(t.dtype, e.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Select, opAttrs, [
            condition,
            t,
            e
        ]);
    }
};

},{"97a628d602d7f2f":"hadS1","320b003db2b96a78":"4Q85s"}],"gYEP4":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.seluConfig = void 0;
var tfjs_1 = require("70550484a784d4fa");
exports.seluConfig = {
    kernelName: tfjs_1.Selu,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Selu, x);
    }
};

},{"70550484a784d4fa":"hadS1"}],"dYjZi":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sigmoidConfig = void 0;
var tfjs_1 = require("60d6207e58046dbd");
exports.sigmoidConfig = {
    kernelName: tfjs_1.Sigmoid,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Sigmoid, x);
    }
};

},{"60d6207e58046dbd":"hadS1"}],"b3U6H":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.signConfig = void 0;
var tfjs_1 = require("e06115bd5ea378d0");
exports.signConfig = {
    kernelName: tfjs_1.Sign,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Sign, x);
    }
};

},{"e06115bd5ea378d0":"hadS1"}],"21RSs":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sinConfig = void 0;
var tfjs_1 = require("992181edb4071f10");
exports.sinConfig = {
    kernelName: tfjs_1.Sin,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Sin, x);
    }
};

},{"992181edb4071f10":"hadS1"}],"9uXtE":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sinhConfig = void 0;
var tfjs_1 = require("560a93429a8820fd");
exports.sinhConfig = {
    kernelName: tfjs_1.Sinh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Sinh, x);
    }
};

},{"560a93429a8820fd":"hadS1"}],"3w1Al":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sliceConfig = void 0;
var tfjs_1 = require("b75226cdf89cdf13");
var nodejs_kernel_backend_1 = require("9a1e6e611e2bcd5d");
exports.sliceConfig = {
    kernelName: tfjs_1.Slice,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, begin = _a.begin, size = _a.size;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Index", "int32")
        ];
        // Bind tensor values
        var _b = tfjs_1.backend_util.slice_util.parseSliceParams(x, begin, size), begin_ = _b[0], size_ = _b[1];
        var beginTensor = (0, tfjs_1.tensor1d)(begin_, "int32");
        var sizeTensor = (0, tfjs_1.tensor1d)(size_, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Slice, opAttrs, [
            x,
            beginTensor,
            sizeTensor
        ]);
        beginTensor.dispose();
        sizeTensor.dispose();
        return res;
    }
};

},{"b75226cdf89cdf13":"hadS1","9a1e6e611e2bcd5d":"4Q85s"}],"j7rjx":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.softmaxConfig = void 0;
var nodejs_kernel_backend_1 = require("f64eb9871baa04ce");
exports.softmaxConfig = {
    kernelName: "Softmax",
    backendName: "tensorflow",
    kernelFunc: function(_a) {
        var inputs = _a.inputs, backend = _a.backend;
        var logits = inputs.logits;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", logits.dtype)
        ];
        var nodeBackend = backend;
        return nodeBackend.executeSingleOutput("Softmax", opAttrs, [
            logits
        ]);
    }
};

},{"f64eb9871baa04ce":"4Q85s"}],"iPTk8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.softplusConfig = void 0;
var tfjs_1 = require("dc27d66fd585644a");
exports.softplusConfig = {
    kernelName: tfjs_1.Softplus,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Softplus, x);
    }
};

},{"dc27d66fd585644a":"hadS1"}],"Ivgvw":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.spaceToBatchNDConfig = void 0;
var tfjs_1 = require("9d4ed55f492b3e3f");
var nodejs_kernel_backend_1 = require("3508e84477a63324");
exports.spaceToBatchNDConfig = {
    kernelName: tfjs_1.SpaceToBatchND,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, blockShape = _a.blockShape, paddings = _a.paddings;
        var blockShapeTensor = (0, tfjs_1.tensor1d)(blockShape, "int32");
        var paddingsTensor = (0, tfjs_1.tensor2d)(paddings, [
            paddings.length,
            paddings[0].length
        ], "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tblock_shape", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tpaddings", paddingsTensor.dtype)
        ];
        var res = backend.executeSingleOutput(tfjs_1.SpaceToBatchND, opAttrs, [
            x,
            blockShapeTensor,
            paddingsTensor
        ]);
        blockShapeTensor.dispose();
        paddingsTensor.dispose();
        return res;
    }
};

},{"9d4ed55f492b3e3f":"hadS1","3508e84477a63324":"4Q85s"}],"g66ny":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sparseToDenseConfig = void 0;
var tfjs_1 = require("8a43eb50ac6bbb4f");
var nodejs_kernel_backend_1 = require("1c4c66d00ef93236");
exports.sparseToDenseConfig = {
    kernelName: tfjs_1.SparseToDense,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, sparseIndices = _a.sparseIndices, sparseValues = _a.sparseValues, defaultValue = _a.defaultValue;
        var backend = args.backend;
        var outputShape = args.attrs.outputShape;
        var opAttrs = [
            {
                name: "validate_indices",
                type: backend.binding.TF_ATTR_BOOL,
                value: true
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", sparseValues.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", sparseIndices.dtype)
        ];
        var outputShapeTensor = (0, tfjs_1.tensor1d)(outputShape, "int32");
        var res = backend.executeSingleOutput(tfjs_1.SparseToDense, opAttrs, [
            sparseIndices,
            outputShapeTensor,
            sparseValues,
            defaultValue
        ]);
        outputShapeTensor.dispose();
        return res;
    }
};

},{"8a43eb50ac6bbb4f":"hadS1","1c4c66d00ef93236":"4Q85s"}],"bZXXJ":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.splitVConfig = void 0;
var tfjs_1 = require("30c9c4604cd5f5eb");
var nodejs_kernel_backend_1 = require("7291753f22b4aa81");
exports.splitVConfig = {
    kernelName: tfjs_1.SplitV,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, numOrSizeSplits = _a.numOrSizeSplits, axis = _a.axis;
        var $axis = tfjs_1.util.parseAxisParam(axis, x.shape)[0];
        var splitSizes = tfjs_1.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);
        var opAttrs = [
            {
                name: "num_split",
                type: backend.binding.TF_ATTR_INT,
                value: splitSizes.length
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x),
            {
                name: "Tlen",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.binding.TF_INT32
            }
        ];
        var inputs = [
            x
        ];
        return (0, tfjs_1.tidy)(function() {
            inputs.push((0, tfjs_1.tensor1d)(splitSizes, "int32"));
            inputs.push((0, tfjs_1.scalar)($axis, "int32"));
            return backend.executeMultipleOutputs(tfjs_1.SplitV, opAttrs, inputs, splitSizes.length);
        });
    }
};

},{"30c9c4604cd5f5eb":"hadS1","7291753f22b4aa81":"4Q85s"}],"4vw28":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sqrtConfig = void 0;
var tfjs_1 = require("b79c154859d31288");
exports.sqrtConfig = {
    kernelName: tfjs_1.Sqrt,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Sqrt, x);
    }
};

},{"b79c154859d31288":"hadS1"}],"YIRk8":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.squareConfig = void 0;
var tfjs_1 = require("d78f186f7476a980");
exports.squareConfig = {
    kernelName: tfjs_1.Square,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Square, x);
    }
};

},{"d78f186f7476a980":"hadS1"}],"ht8H5":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.squaredDifferenceConfig = void 0;
var tfjs_1 = require("7b96e399c8cee15");
var nodejs_kernel_backend_1 = require("e1d5f26fa662a312");
exports.squaredDifferenceConfig = {
    kernelName: tfjs_1.SquaredDifference,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", a.dtype)
        ];
        return backend.executeSingleOutput(tfjs_1.SquaredDifference, opAttrs, [
            a,
            b
        ]);
    }
};

},{"7b96e399c8cee15":"hadS1","e1d5f26fa662a312":"4Q85s"}],"40dkc":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.staticRegexReplaceConfig = void 0;
var tfjs_1 = require("4c95466ad6023765");
exports.staticRegexReplaceConfig = {
    kernelName: tfjs_1.StaticRegexReplace,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var tensors = args.inputs;
        var backend = args.backend;
        var _a = args.attrs, pattern = _a.pattern, rewrite = _a.rewrite, replaceGlobal = _a.replaceGlobal;
        var opAttrs = [
            {
                name: "pattern",
                type: backend.binding.TF_ATTR_STRING,
                value: pattern
            },
            {
                name: "rewrite",
                type: backend.binding.TF_ATTR_STRING,
                value: rewrite
            },
            {
                name: "replace_global",
                type: backend.binding.TF_ATTR_BOOL,
                value: replaceGlobal
            }
        ];
        var inputs = [
            tensors.x
        ];
        return backend.executeSingleOutput("StaticRegexReplace", opAttrs, inputs);
    }
};

},{"4c95466ad6023765":"hadS1"}],"9ngih":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.stepConfig = void 0;
var tfjs_1 = require("c1af83693d5e92d");
var nodejs_kernel_backend_1 = require("ddc44a52a6f6a406");
exports.stepConfig = {
    kernelName: tfjs_1.Step,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var alpha = args.attrs.alpha;
        var dtype = x.dtype;
        return (0, tfjs_1.tidy)(function() {
            var nans = (0, tfjs_1.isNaN)(x);
            var stepNoNans = (0, tfjs_1.where)((0, tfjs_1.greater)(x, (0, tfjs_1.scalar)(0, dtype)), (0, tfjs_1.ones)(x.shape), (0, tfjs_1.fill)(x.shape, alpha, dtype));
            var opAttrs = [
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(x.dtype, stepNoNans.dtype))
            ];
            return backend.executeSingleOutput("Select", opAttrs, [
                nans,
                x,
                stepNoNans
            ]);
        });
    }
};

},{"c1af83693d5e92d":"hadS1","ddc44a52a6f6a406":"4Q85s"}],"gvgaL":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.stridedSliceConfig = void 0;
var tfjs_1 = require("87276bedd7bdeb84");
var nodejs_kernel_backend_1 = require("1961848e75e70840");
exports.stridedSliceConfig = {
    kernelName: tfjs_1.StridedSlice,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, beginMask = _a.beginMask, endMask = _a.endMask, ellipsisMask = _a.ellipsisMask, newAxisMask = _a.newAxisMask, shrinkAxisMask = _a.shrinkAxisMask;
        var attrs = args.attrs;
        // make a copy because it may be modified in-place further down.
        var begin = attrs.begin.slice();
        var end = attrs.end.slice();
        var strides = attrs.strides;
        return (0, tfjs_1.tidy)(function() {
            var beginTensor = (0, tfjs_1.tensor1d)(begin, "int32");
            var endTensor = (0, tfjs_1.tensor1d)(end, "int32");
            var stridesTensor = (0, tfjs_1.tensor1d)(strides, "int32");
            var opAttrs = [
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Index", "int32"),
                {
                    name: "begin_mask",
                    type: backend.binding.TF_ATTR_INT,
                    value: beginMask
                },
                {
                    name: "end_mask",
                    type: backend.binding.TF_ATTR_INT,
                    value: endMask
                },
                {
                    name: "ellipsis_mask",
                    type: backend.binding.TF_ATTR_INT,
                    value: ellipsisMask
                },
                {
                    name: "new_axis_mask",
                    type: backend.binding.TF_ATTR_INT,
                    value: newAxisMask
                },
                {
                    name: "shrink_axis_mask",
                    type: backend.binding.TF_ATTR_INT,
                    value: shrinkAxisMask
                }
            ];
            return backend.executeSingleOutput(tfjs_1.StridedSlice, opAttrs, [
                x,
                beginTensor,
                endTensor,
                stridesTensor
            ]);
        });
    }
};

},{"87276bedd7bdeb84":"hadS1","1961848e75e70840":"4Q85s"}],"aMWXs":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.subConfig = void 0;
var tfjs_1 = require("8ae4aad28cef5a25");
var nodejs_kernel_backend_1 = require("c84d9c01ab0f1ab2");
exports.subConfig = {
    kernelName: tfjs_1.Sub,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, a = _a.a, b = _a.b;
        var backend = args.backend;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", tfjs_1.backend_util.upcastType(a.dtype, b.dtype))
        ];
        return backend.executeSingleOutput(tfjs_1.Sub, opAttrs, [
            a,
            b
        ]);
    }
};

},{"8ae4aad28cef5a25":"hadS1","c84d9c01ab0f1ab2":"4Q85s"}],"ds089":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sumConfig = void 0;
var tfjs_1 = require("f20cc88da12de934");
exports.sumConfig = {
    kernelName: tfjs_1.Sum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, axis = _a.axis, keepDims = _a.keepDims;
        var axes = tfjs_1.util.parseAxisParam(axis, x.shape);
        var axisTensor = (0, tfjs_1.tensor1d)(axes, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Sum, backend.createReductionOpAttrs(x, keepDims), [
            x,
            axisTensor
        ]);
        axisTensor.dispose();
        return res;
    }
};

},{"f20cc88da12de934":"hadS1"}],"jw98q":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tanConfig = void 0;
var tfjs_1 = require("91d953e4de5e352e");
exports.tanConfig = {
    kernelName: tfjs_1.Tan,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Tan, x);
    }
};

},{"91d953e4de5e352e":"hadS1"}],"a61gY":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tanhConfig = void 0;
var tfjs_1 = require("9f170546c7b1ecb1");
exports.tanhConfig = {
    kernelName: tfjs_1.Tanh,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        return backend.executeSingleInput(tfjs_1.Tanh, x);
    }
};

},{"9f170546c7b1ecb1":"hadS1"}],"l1okl":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tensorScatterUpdateConfig = void 0;
var tfjs_1 = require("6864b28936faa410");
var nodejs_kernel_backend_1 = require("ad7d851ec567bbf2");
exports.tensorScatterUpdateConfig = {
    kernelName: tfjs_1.TensorScatterUpdate,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, tensor = _a.tensor, indices = _a.indices, updates = _a.updates;
        var backend = args.backend;
        var _b = args.attrs;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", updates.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", "int32")
        ];
        var ret = backend.executeSingleOutput(tfjs_1.TensorScatterUpdate, opAttrs, [
            tensor,
            indices,
            updates
        ]);
        return ret;
    }
};

},{"6864b28936faa410":"hadS1","ad7d851ec567bbf2":"4Q85s"}],"4OpxP":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tileConfig = void 0;
var tfjs_1 = require("ba192ab4f0d3a3bf");
var nodejs_kernel_backend_1 = require("3706b5d1d647c625");
exports.tileConfig = {
    kernelName: tfjs_1.Tile,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var reps = args.attrs.reps;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tmultiples", "int32")
        ];
        var multiples = (0, tfjs_1.tensor1d)(reps, "int32");
        var res = backend.executeSingleOutput(tfjs_1.Tile, opAttrs, [
            x,
            multiples
        ]);
        multiples.dispose();
        return res;
    }
};

},{"ba192ab4f0d3a3bf":"hadS1","3706b5d1d647c625":"4Q85s"}],"22JJD":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.topKConfig = void 0;
var tfjs_1 = require("18a0a025c31de57d");
var util_1 = require("c8dc89b5d5afc09");
var nodejs_kernel_backend_1 = require("8b3efacbe8605ca3");
exports.topKConfig = {
    kernelName: tfjs_1.TopK,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs, k = _a.k, sorted = _a.sorted;
        var kCount = (0, util_1.isNullOrUndefined)(k) ? 1 : k;
        var isSorted = (0, util_1.isNullOrUndefined)(sorted) ? true : sorted;
        var opAttrs = [
            {
                name: "sorted",
                type: backend.binding.TF_ATTR_BOOL,
                value: isSorted
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype)
        ];
        var kTensor = (0, tfjs_1.scalar)(kCount, "int32");
        // 'TopKV2' has two-hard coded output attributes:
        // TODO(yassogba) consider renamine constant in kernel names;
        var res = backend.executeMultipleOutputs("TopKV2", opAttrs, [
            x,
            kTensor
        ], 2);
        kTensor.dispose();
        return res;
    }
};

},{"18a0a025c31de57d":"hadS1","c8dc89b5d5afc09":"h4AnS","8b3efacbe8605ca3":"4Q85s"}],"eYyPd":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.transposeConfig = void 0;
var tfjs_1 = require("ef807d28f4cc72db");
var nodejs_kernel_backend_1 = require("45e9c73b9648d083");
exports.transposeConfig = {
    kernelName: tfjs_1.Transpose,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var perm = args.attrs.perm;
        var permTensor = (0, tfjs_1.tensor1d)(perm, "int32");
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tperm", "int32")
        ];
        var res = backend.executeSingleOutput(tfjs_1.Transpose, opAttrs, [
            x,
            permTensor
        ]);
        permTensor.dispose();
        return res;
    }
};

},{"ef807d28f4cc72db":"hadS1","45e9c73b9648d083":"4Q85s"}],"bAS50":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uniqueConfig = void 0;
var tfjs_1 = require("e83f704e982438c0");
var nodejs_kernel_backend_1 = require("babf7533125e0a3f");
exports.uniqueConfig = {
    kernelName: tfjs_1.Unique,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var _a = args.attrs.axis, axis = _a === void 0 ? 0 : _a;
        var axisTensor = (0, tfjs_1.tensor1d)([
            axis
        ], "int32");
        try {
            var opAttrs = [
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Taxis", "int32"),
                (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("out_idx", "int32")
            ];
            var inputs = [
                x,
                axisTensor
            ];
            return backend.executeMultipleOutputs("UniqueV2", opAttrs, inputs, 2);
        } finally{
            axisTensor.dispose();
        }
    }
};

},{"e83f704e982438c0":"hadS1","babf7533125e0a3f":"4Q85s"}],"2IFuc":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unpackConfig = void 0;
var tfjs_1 = require("2a4a00f5ba41d48d");
var nodejs_kernel_backend_1 = require("8908e6d1a0aeae86");
exports.unpackConfig = {
    kernelName: tfjs_1.Unpack,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var value = args.inputs.value;
        var backend = args.backend;
        var axis = args.attrs.axis;
        if (axis < 0) axis += value.shape.length;
        if (axis >= value.shape.length) throw new Error("Invalid axis supplied: ".concat(axis, " shape length: ").concat(value.shape.length));
        var num = value.shape[axis];
        var opAttrs = [
            {
                name: "num",
                type: backend.binding.TF_ATTR_INT,
                value: num
            },
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", value.dtype),
            {
                name: "axis",
                type: backend.binding.TF_ATTR_INT,
                value: axis
            }
        ];
        return backend.executeMultipleOutputs(tfjs_1.Unpack, opAttrs, [
            value
        ], num);
    }
};

},{"2a4a00f5ba41d48d":"hadS1","8908e6d1a0aeae86":"4Q85s"}],"f1RQZ":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unsortedSegmentSumConfig = void 0;
var tfjs_1 = require("981af127c5e76b43");
var nodejs_kernel_backend_1 = require("1968b9aeefccf96a");
exports.unsortedSegmentSumConfig = {
    kernelName: tfjs_1.UnsortedSegmentSum,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var _a = args.inputs, x = _a.x, segmentIds = _a.segmentIds;
        var backend = args.backend;
        var numSegments = args.attrs.numSegments;
        var opAttrs = [
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("T", x.dtype),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tindices", "int32"),
            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)("Tnumsegments", "int32")
        ];
        var numSegmentsT = (0, tfjs_1.scalar)(numSegments, "int32");
        var res = backend.executeSingleOutput(tfjs_1.UnsortedSegmentSum, opAttrs, [
            x,
            segmentIds,
            numSegmentsT
        ]);
        numSegmentsT.dispose();
        return res;
    }
};

},{"981af127c5e76b43":"hadS1","1968b9aeefccf96a":"4Q85s"}],"71LAu":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.zerosLikeConfig = void 0;
var tfjs_1 = require("c6165917b9958e7e");
exports.zerosLikeConfig = {
    kernelName: tfjs_1.ZerosLike,
    backendName: "tensorflow",
    kernelFunc: function(args) {
        var x = args.inputs.x;
        var backend = args.backend;
        var opAttrs = [
            {
                name: "T",
                type: backend.binding.TF_ATTR_TYPE,
                value: backend.getDTypeInteger(x.dtype)
            }
        ];
        return backend.executeSingleOutput(tfjs_1.ZerosLike, opAttrs, [
            x
        ]);
    }
};

},{"c6165917b9958e7e":"hadS1"}],"i1BLo":[function(require,module,exports) {
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("c0743715070b1b8a");
"use strict";
function assertPath(path) {
    if (typeof path !== "string") throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = "";
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += "/..";
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += "/" + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = process.cwd();
                path = cwd;
            }
            assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return "/" + resolvedPath;
            else return "/";
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return ".";
    },
    normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = ".";
        if (path.length > 0 && trailingSeparator) path += "/";
        if (isAbsolute) return "/" + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return ".";
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += "/" + arg;
            }
        }
        if (joined === undefined) return ".";
        return posix.normalize(joined);
    },
    relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to) return "";
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) return "";
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = "";
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? "/" : ".";
        if (hasRoot && end === 1) return "//";
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return "";
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return "";
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return "";
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        return _format("/", pathObject);
    },
    parse: function parse(path) {
        assertPath(path);
        var ret = {
            root: "",
            dir: "",
            base: "",
            ext: "",
            name: ""
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47 /*/*/ ;
        var start;
        if (isAbsolute) {
            ret.root = "/";
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = "/";
        return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
};
posix.posix = posix;
module.exports = posix;

},{"c0743715070b1b8a":"kKEHw"}],"8AvI3":[function(require,module,exports) {
var process = require("7766ea39a64e7d5d");
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tensorBoard = exports.TensorBoardCallback = exports.getDisplayDecimalPlaces = exports.getSuccinctNumberDisplay = exports.ProgbarLogger = exports.progressBarHelper = void 0;
var tfjs_1 = require("b91e5667960c21af");
var path = require("822788532853c543");
var ProgressBar = require("7756b47f8bc3a69");
var tensorboard_1 = require("fc1bbd2f9136e311");
// A helper class created for testing with the jasmine `spyOn` method, which
// operates only on member methods of objects.
// tslint:disable-next-line:no-any
exports.progressBarHelper = {
    ProgressBar: ProgressBar,
    log: console.log
};
/**
 * Terminal-based progress bar callback for tf.Model.fit().
 */ var ProgbarLogger = /** @class */ function(_super) {
    __extends(ProgbarLogger, _super);
    /**
     * Construtor of LoggingCallback.
     */ function ProgbarLogger() {
        var _this = _super.call(this, {
            onTrainBegin: function(logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    var samples, batchSize, steps;
                    return __generator(this, function(_a) {
                        samples = this.params.samples;
                        batchSize = this.params.batchSize;
                        steps = this.params.steps;
                        if (samples != null || steps != null) this.numTrainBatchesPerEpoch = samples != null ? Math.ceil(samples / batchSize) : steps;
                        else // Undetermined number of batches per epoch, e.g., due to
                        // `fitDataset()` without `batchesPerEpoch`.
                        this.numTrainBatchesPerEpoch = 0;
                        return [
                            2 /*return*/ 
                        ];
                    });
                });
            },
            onEpochBegin: function(epoch, logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    return __generator(this, function(_a) {
                        exports.progressBarHelper.log("Epoch ".concat(epoch + 1, " / ").concat(this.params.epochs));
                        this.currentEpochBegin = tfjs_1.util.now();
                        this.epochDurationMillis = null;
                        this.usPerStep = null;
                        this.batchesInLatestEpoch = 0;
                        this.terminalWidth = process.stderr.columns;
                        return [
                            2 /*return*/ 
                        ];
                    });
                });
            },
            onBatchEnd: function(batch, logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    var maxMetricsStringLength, tickTokens;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                this.batchesInLatestEpoch++;
                                if (batch === 0) this.progressBar = new exports.progressBarHelper.ProgressBar("eta=:eta :bar :placeholderForLossesAndMetrics", {
                                    width: Math.floor(0.5 * this.terminalWidth),
                                    total: this.numTrainBatchesPerEpoch + 1,
                                    head: ">",
                                    renderThrottle: this.RENDER_THROTTLE_MS
                                });
                                maxMetricsStringLength = Math.floor(this.terminalWidth * 0.5 - 12);
                                tickTokens = {
                                    placeholderForLossesAndMetrics: this.formatLogsAsMetricsContent(logs, maxMetricsStringLength)
                                };
                                if (this.numTrainBatchesPerEpoch === 0) // Undetermined number of batches per epoch.
                                this.progressBar.tick(0, tickTokens);
                                else this.progressBar.tick(tickTokens);
                                return [
                                    4 /*yield*/ ,
                                    (0, tfjs_1.nextFrame)()
                                ];
                            case 1:
                                _a.sent();
                                if (batch === this.numTrainBatchesPerEpoch - 1) {
                                    this.epochDurationMillis = tfjs_1.util.now() - this.currentEpochBegin;
                                    this.usPerStep = this.params.samples != null ? this.epochDurationMillis / this.params.samples * 1e3 : this.epochDurationMillis / this.batchesInLatestEpoch * 1e3;
                                }
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            },
            onEpochEnd: function(epoch, logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    var lossesAndMetricsString;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                if (this.epochDurationMillis == null) {
                                    // In cases where the number of batches per epoch is not determined,
                                    // the calculation of the per-step duration is done at the end of the
                                    // epoch. N.B., this includes the time spent on validation.
                                    this.epochDurationMillis = tfjs_1.util.now() - this.currentEpochBegin;
                                    this.usPerStep = this.epochDurationMillis / this.batchesInLatestEpoch * 1e3;
                                }
                                this.progressBar.tick({
                                    placeholderForLossesAndMetrics: ""
                                });
                                lossesAndMetricsString = this.formatLogsAsMetricsContent(logs);
                                exports.progressBarHelper.log("".concat(this.epochDurationMillis.toFixed(0), "ms ") + "".concat(this.usPerStep.toFixed(0), "us/step - ") + "".concat(lossesAndMetricsString));
                                return [
                                    4 /*yield*/ ,
                                    (0, tfjs_1.nextFrame)()
                                ];
                            case 1:
                                _a.sent();
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }
        }) || this;
        _this.RENDER_THROTTLE_MS = 50;
        return _this;
    }
    ProgbarLogger.prototype.formatLogsAsMetricsContent = function(logs, maxMetricsLength) {
        var metricsContent = "";
        var keys = Object.keys(logs).sort();
        for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){
            var key = keys_1[_i];
            if (this.isFieldRelevant(key)) {
                var value = logs[key];
                metricsContent += "".concat(key, "=").concat(getSuccinctNumberDisplay(value), " ");
            }
        }
        if (maxMetricsLength != null && metricsContent.length > maxMetricsLength) // Cut off metrics strings that are too long to avoid new lines being
        // constantly created.
        metricsContent = metricsContent.slice(0, maxMetricsLength - 3) + "...";
        return metricsContent;
    };
    ProgbarLogger.prototype.isFieldRelevant = function(key) {
        return key !== "batch" && key !== "size";
    };
    return ProgbarLogger;
}(tfjs_1.CustomCallback);
exports.ProgbarLogger = ProgbarLogger;
var BASE_NUM_DIGITS = 2;
var MAX_NUM_DECIMAL_PLACES = 4;
/**
 * Get a succint string representation of a number.
 *
 * Uses decimal notation if the number isn't too small.
 * Otherwise, use engineering notation.
 *
 * @param x Input number.
 * @return Succinct string representing `x`.
 */ function getSuccinctNumberDisplay(x) {
    var decimalPlaces = getDisplayDecimalPlaces(x);
    return decimalPlaces > MAX_NUM_DECIMAL_PLACES ? x.toExponential(BASE_NUM_DIGITS) : x.toFixed(decimalPlaces);
}
exports.getSuccinctNumberDisplay = getSuccinctNumberDisplay;
/**
 * Determine the number of decimal places to display.
 *
 * @param x Number to display.
 * @return Number of decimal places to display for `x`.
 */ function getDisplayDecimalPlaces(x) {
    if (!Number.isFinite(x) || x === 0 || x > 1 || x < -1) return BASE_NUM_DIGITS;
    else return BASE_NUM_DIGITS - Math.floor(Math.log10(Math.abs(x)));
}
exports.getDisplayDecimalPlaces = getDisplayDecimalPlaces;
/**
 * Callback for logging to TensorBoard during training.
 *
 * Users are expected to access this class through the `tensorBoardCallback()`
 * factory method instead.
 */ var TensorBoardCallback = /** @class */ function(_super) {
    __extends(TensorBoardCallback, _super);
    function TensorBoardCallback(logdir, args) {
        if (logdir === void 0) logdir = "./logs";
        var _this = _super.call(this, {
            onBatchEnd: function(batch, logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    return __generator(this, function(_a) {
                        this.batchesSeen++;
                        if (this.args.updateFreq !== "epoch") this.logMetrics(logs, "batch_", this.batchesSeen);
                        return [
                            2 /*return*/ 
                        ];
                    });
                });
            },
            onEpochEnd: function(epoch, logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    return __generator(this, function(_a) {
                        this.logMetrics(logs, "epoch_", epoch + 1);
                        if (this.args.histogramFreq > 0 && epoch % this.args.histogramFreq === 0) this.logWeights(epoch);
                        return [
                            2 /*return*/ 
                        ];
                    });
                });
            },
            onTrainEnd: function(logs) {
                return __awaiter(_this, void 0, void 0, function() {
                    return __generator(this, function(_a) {
                        if (this.trainWriter != null) this.trainWriter.flush();
                        if (this.valWriter != null) this.valWriter.flush();
                        return [
                            2 /*return*/ 
                        ];
                    });
                });
            }
        }) || this;
        _this.logdir = logdir;
        _this.model = null;
        _this.args = args == null ? {} : args;
        if (_this.args.updateFreq == null) _this.args.updateFreq = "epoch";
        tfjs_1.util.assert([
            "batch",
            "epoch"
        ].indexOf(_this.args.updateFreq) !== -1, function() {
            return "Expected updateFreq to be 'batch' or 'epoch', but got " + "".concat(_this.args.updateFreq);
        });
        if (_this.args.histogramFreq == null) _this.args.histogramFreq = 0;
        tfjs_1.util.assert(Number.isInteger(_this.args.histogramFreq) && _this.args.histogramFreq >= 0, function() {
            return "Expected histogramFreq to be a positive integer, but got " + "".concat(_this.args.histogramFreq);
        });
        _this.batchesSeen = 0;
        return _this;
    }
    TensorBoardCallback.prototype.setModel = function(model) {
        // This method is inherited from BaseCallback. To avoid cyclical imports,
        // that class uses Container instead of LayersModel, and uses a run-time
        // check to make sure the model is a LayersModel.
        // Since this subclass isn't imported by tfjs-layers, we can safely use type
        // the parameter as a LayersModel.
        this.model = model;
    };
    TensorBoardCallback.prototype.logMetrics = function(logs, prefix, step) {
        for(var key in logs){
            if (key === "batch" || key === "size" || key === "num_steps") continue;
            var VAL_PREFIX = "val_";
            if (key.startsWith(VAL_PREFIX)) {
                this.ensureValWriterCreated();
                var scalarName = prefix + key.slice(VAL_PREFIX.length);
                this.valWriter.scalar(scalarName, logs[key], step);
            } else {
                this.ensureTrainWriterCreated();
                this.trainWriter.scalar("".concat(prefix).concat(key), logs[key], step);
            }
        }
    };
    TensorBoardCallback.prototype.logWeights = function(step) {
        for(var _i = 0, _a = this.model.weights; _i < _a.length; _i++){
            var weights = _a[_i];
            this.trainWriter.histogram(weights.name, weights.read(), step);
        }
    };
    TensorBoardCallback.prototype.ensureTrainWriterCreated = function() {
        this.trainWriter = (0, tensorboard_1.summaryFileWriter)(path.join(this.logdir, "train"));
    };
    TensorBoardCallback.prototype.ensureValWriterCreated = function() {
        this.valWriter = (0, tensorboard_1.summaryFileWriter)(path.join(this.logdir, "val"));
    };
    return TensorBoardCallback;
}(tfjs_1.CustomCallback);
exports.TensorBoardCallback = TensorBoardCallback;
/**
 * Callback for logging to TensorBoard during training.
 *
 * Writes the loss and metric values (if any) to the specified log directory
 * (`logdir`) which can be ingested and visualized by TensorBoard.
 * This callback is usually passed as a callback to `tf.Model.fit()` or
 * `tf.Model.fitDataset()` calls during model training. The frequency at which
 * the values are logged can be controlled with the `updateFreq` field of the
 * configuration object (2nd argument).
 *
 * Usage example:
 * ```js
 * // Constructor a toy multilayer-perceptron regressor for demo purpose.
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 100, activation: 'relu', inputShape: [200]}));
 * model.add(tf.layers.dense({units: 1}));
 * model.compile({
 *   loss: 'meanSquaredError',
 *   optimizer: 'sgd',
 *   metrics: ['MAE']
 * });
 *
 * // Generate some random fake data for demo purpose.
 * const xs = tf.randomUniform([10000, 200]);
 * const ys = tf.randomUniform([10000, 1]);
 * const valXs = tf.randomUniform([1000, 200]);
 * const valYs = tf.randomUniform([1000, 1]);
 *
 * // Start model training process.
 * await model.fit(xs, ys, {
 *   epochs: 100,
 *   validationData: [valXs, valYs],
 *    // Add the tensorBoard callback here.
 *   callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')
 * });
 * ```
 *
 * Then you can use the following commands to point tensorboard
 * to the logdir:
 *
 * ```sh
 * pip install tensorboard  # Unless you've already installed it.
 * tensorboard --logdir /tmp/fit_logs_1
 * ```
 *
 * @param logdir Directory to which the logs will be written.
 * @param args Optional configuration arguments.
 * @returns An instance of `TensorBoardCallback`, which is a subclass of
 *   `tf.CustomCallback`.
 *
 * @doc {heading: 'TensorBoard', namespace: 'node'}
 */ function tensorBoard(logdir, args) {
    if (logdir === void 0) logdir = "./logs";
    return new TensorBoardCallback(logdir, args);
}
exports.tensorBoard = tensorBoard;

},{"7766ea39a64e7d5d":"kKEHw","b91e5667960c21af":"hadS1","822788532853c543":"i1BLo","7756b47f8bc3a69":"b42G1","fc1bbd2f9136e311":"jstfF"}],"b42G1":[function(require,module,exports) {
module.exports = require("d1b9e2afa492afb3");

},{"d1b9e2afa492afb3":"8SDya"}],"8SDya":[function(require,module,exports) {
/*!
 * node-progress
 * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */ /**
 * Expose `ProgressBar`.
 */ var process = require("3510d9052c2ad9be");
exports = module.exports = ProgressBar;
/**
 * Initialize a `ProgressBar` with the given `fmt` string and `options` or
 * `total`.
 *
 * Options:
 *
 *   - `curr` current completed index
 *   - `total` total number of ticks to complete
 *   - `width` the displayed width of the progress bar defaulting to total
 *   - `stream` the output stream defaulting to stderr
 *   - `head` head character defaulting to complete character
 *   - `complete` completion character defaulting to "="
 *   - `incomplete` incomplete character defaulting to "-"
 *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16
 *   - `callback` optional function to call when the progress bar completes
 *   - `clear` will clear the progress bar upon termination
 *
 * Tokens:
 *
 *   - `:bar` the progress bar itself
 *   - `:current` current tick number
 *   - `:total` total ticks
 *   - `:elapsed` time elapsed in seconds
 *   - `:percent` completion percentage
 *   - `:eta` eta in seconds
 *   - `:rate` rate of ticks per second
 *
 * @param {string} fmt
 * @param {object|number} options or total
 * @api public
 */ function ProgressBar(fmt, options) {
    this.stream = options.stream || process.stderr;
    if (typeof options == "number") {
        var total = options;
        options = {};
        options.total = total;
    } else {
        options = options || {};
        if ("string" != typeof fmt) throw new Error("format required");
        if ("number" != typeof options.total) throw new Error("total required");
    }
    this.fmt = fmt;
    this.curr = options.curr || 0;
    this.total = options.total;
    this.width = options.width || this.total;
    this.clear = options.clear;
    this.chars = {
        complete: options.complete || "=",
        incomplete: options.incomplete || "-",
        head: options.head || options.complete || "="
    };
    this.renderThrottle = options.renderThrottle !== 0 ? options.renderThrottle || 16 : 0;
    this.lastRender = -Infinity;
    this.callback = options.callback || function() {};
    this.tokens = {};
    this.lastDraw = "";
}
/**
 * "tick" the progress bar with optional `len` and optional `tokens`.
 *
 * @param {number|object} len or tokens
 * @param {object} tokens
 * @api public
 */ ProgressBar.prototype.tick = function(len, tokens) {
    if (len !== 0) len = len || 1;
    // swap tokens
    if ("object" == typeof len) tokens = len, len = 1;
    if (tokens) this.tokens = tokens;
    // start time for eta
    if (0 == this.curr) this.start = new Date;
    this.curr += len;
    // try to render
    this.render();
    // progress complete
    if (this.curr >= this.total) {
        this.render(undefined, true);
        this.complete = true;
        this.terminate();
        this.callback(this);
        return;
    }
};
/**
 * Method to render the progress bar with optional `tokens` to place in the
 * progress bar's `fmt` field.
 *
 * @param {object} tokens
 * @api public
 */ ProgressBar.prototype.render = function(tokens, force) {
    force = force !== undefined ? force : false;
    if (tokens) this.tokens = tokens;
    if (!this.stream.isTTY) return;
    var now = Date.now();
    var delta = now - this.lastRender;
    if (!force && delta < this.renderThrottle) return;
    else this.lastRender = now;
    var ratio = this.curr / this.total;
    ratio = Math.min(Math.max(ratio, 0), 1);
    var percent = Math.floor(ratio * 100);
    var incomplete, complete, completeLength;
    var elapsed = new Date - this.start;
    var eta = percent == 100 ? 0 : elapsed * (this.total / this.curr - 1);
    var rate = this.curr / (elapsed / 1000);
    /* populate the bar template with percentages and timestamps */ var str = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(elapsed) ? "0.0" : (elapsed / 1000).toFixed(1)).replace(":eta", isNaN(eta) || !isFinite(eta) ? "0.0" : (eta / 1000).toFixed(1)).replace(":percent", percent.toFixed(0) + "%").replace(":rate", Math.round(rate));
    /* compute the available space (non-zero) for the bar */ var availableSpace = Math.max(0, this.stream.columns - str.replace(":bar", "").length);
    if (availableSpace && process.platform === "win32") availableSpace = availableSpace - 1;
    var width = Math.min(this.width, availableSpace);
    /* TODO: the following assumes the user has one ':bar' token */ completeLength = Math.round(width * ratio);
    complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);
    incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete);
    /* add head to the complete string */ if (completeLength > 0) complete = complete.slice(0, -1) + this.chars.head;
    /* fill in the actual progress bar */ str = str.replace(":bar", complete + incomplete);
    /* replace the extra tokens */ if (this.tokens) for(var key in this.tokens)str = str.replace(":" + key, this.tokens[key]);
    if (this.lastDraw !== str) {
        this.stream.cursorTo(0);
        this.stream.write(str);
        this.stream.clearLine(1);
        this.lastDraw = str;
    }
};
/**
 * "update" the progress bar to represent an exact percentage.
 * The ratio (between 0 and 1) specified will be multiplied by `total` and
 * floored, representing the closest available "tick." For example, if a
 * progress bar has a length of 3 and `update(0.5)` is called, the progress
 * will be set to 1.
 *
 * A ratio of 0.5 will attempt to set the progress to halfway.
 *
 * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the
 *   overall completion to.
 * @api public
 */ ProgressBar.prototype.update = function(ratio, tokens) {
    var goal = Math.floor(ratio * this.total);
    var delta = goal - this.curr;
    this.tick(delta, tokens);
};
/**
 * "interrupt" the progress bar and write a message above it.
 * @param {string} message The message to write.
 * @api public
 */ ProgressBar.prototype.interrupt = function(message) {
    // clear the current line
    this.stream.clearLine();
    // move the cursor to the start of the line
    this.stream.cursorTo(0);
    // write the message text
    this.stream.write(message);
    // terminate the line after writing the message
    this.stream.write("\n");
    // re-display the progress bar with its lastDraw
    this.stream.write(this.lastDraw);
};
/**
 * Terminates a progress bar.
 *
 * @api public
 */ ProgressBar.prototype.terminate = function() {
    if (this.clear) {
        if (this.stream.clearLine) {
            this.stream.clearLine();
            this.stream.cursorTo(0);
        }
    } else this.stream.write("\n");
};

},{"3510d9052c2ad9be":"kKEHw"}],"jstfF":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.summaryFileWriter = exports.SummaryFileWriter = void 0;
var tfjs_1 = require("12667818eb115032");
var nodejs_kernel_backend_1 = require("56a88ac07e399876");
var SummaryFileWriter = /** @class */ function() {
    function SummaryFileWriter(resourceHandle) {
        this.resourceHandle = resourceHandle;
        (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
        this.backend = (0, nodejs_kernel_backend_1.nodeBackend)();
    }
    /**
     * Write a scalar summary.
     *
     * @param name A name of the summary. The summary tag for TensorBoard will be
     *   this name.
     * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript
     *   `number`.
     * @param step Required `int64`-castable, monotonically-increasing step value.
     * @param description Optional long-form description for this summary, as a
     *   `string`. *Not implemented yet*.
     */ SummaryFileWriter.prototype.scalar = function(name, value, step, description) {
        // N.B.: Unlike the Python TensorFlow API, step is a required parameter,
        // because the construct of global step does not exist in TensorFlow.js.
        if (description != null) throw new Error("scalar() does not support description yet");
        this.backend.writeScalarSummary(this.resourceHandle, step, name, value);
    };
    /**
     * Write a histogram summary, for later analysis in TensorBoard's 'Histograms'
     * and 'Distributions' dashboards (data written using this API will appear in
     * both places). Like `SummaryFileWriter.scalar` points, each histogram is
     * associated with a `step` and a `name`. All the histograms with the same
     * `name` constitute a time series of histograms.
     *
     * The histogram is calculated over all the elements of the given `Tensor`
     * without regard to its shape or rank.
     *
     * @param name  A name for this summary. The summary tag used for TensorBoard
     *     will be this name.
     * @param data  A Tensor of any shape. The histogram is computed over its
     *     elements, which must be castable to `float32`.
     * @param step  Monotonically-increasing step value.
     * @param buckets  Optional positive `number`. The output will have this many
     *     buckets, except in two edge cases. If there is no data, then there are
     *     no buckets. If there is data but all points have the same value, then
     *     there is one bucket whose left and right endpoints are the same.
     * @param description Optional long-form description for this summary, as a
     *    `string`. Markdown is supported. Defaults to empty.
     */ SummaryFileWriter.prototype.histogram = function(name, data, step, buckets, description) {
        this.backend.writeHistogramSummary(this.resourceHandle, step, name, data, buckets, description);
    };
    /**
     * Force summary writer to send all buffered data to storage.
     */ SummaryFileWriter.prototype.flush = function() {
        this.backend.flushSummaryWriter(this.resourceHandle);
    };
    return SummaryFileWriter;
}();
exports.SummaryFileWriter = SummaryFileWriter;
/**
 * Use a cache for `SummaryFileWriter` instance.
 *
 * Using multiple instances of `SummaryFileWriter` pointing to the same
 * logdir has potential problems. Using this cache avoids those problems.
 */ var summaryFileWriterCache = {};
/**
 * Create a summary file writer for TensorBoard.
 *
 * Example:
 * ```js
 * const tf = require('@tensorflow/tfjs-node');
 *
 * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');
 *
 * for (let step = 0; step < 100; ++step) {
 *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);
 * }
 * ```
 *
 * @param logdir Log directory in which the summary data will be written.
 * @param maxQueue Maximum queue length (default: `10`).
 * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,
 *   `120` seconds).
 * @param filenameSuffix Suffix of the protocol buffer file names to be
 *   written in the `logdir` (default: `.v2`).
 * @returns An instance of `SummaryFileWriter`.
 *
 * @doc {heading: 'TensorBoard', namespace: 'node'}
 */ function summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {
    if (maxQueue === void 0) maxQueue = 10;
    if (flushMillis === void 0) flushMillis = 120000;
    if (filenameSuffix === void 0) filenameSuffix = ".v2";
    tfjs_1.util.assert(logdir != null && typeof logdir === "string" && logdir.length > 0, function() {
        return "Invalid logdir: ".concat(logdir, ". Expected a non-empty string for logdir.");
    });
    if (!(logdir in summaryFileWriterCache)) {
        (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
        var backend = (0, nodejs_kernel_backend_1.nodeBackend)();
        var writerResource = backend.summaryWriter(logdir);
        backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);
        summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);
    }
    return summaryFileWriterCache[logdir];
}
exports.summaryFileWriter = summaryFileWriter;

},{"12667818eb115032":"hadS1","56a88ac07e399876":"4Q85s"}],"lVBbf":[function(require,module,exports) {
var Buffer = require("6e74be43d641d423").Buffer;
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fileSystem = exports.nodeFileSystemRouter = exports.NodeFileSystem = void 0;
var tf = require("a0d4e54956ace1f6");
var fs = require("6caf1e70ed4ec2d");
var path_1 = require("6f0c8cbe5f0dd925");
var util_1 = require("2d320bf4f0f083d7");
var io_utils_1 = require("4ed7b0e54a5d9cf9");
var stat = (0, util_1.promisify)(fs.stat);
var writeFile = (0, util_1.promisify)(fs.writeFile);
var readFile = (0, util_1.promisify)(fs.readFile);
var mkdir = (0, util_1.promisify)(fs.mkdir);
function doesNotExistHandler(name) {
    return function(e) {
        switch(e.code){
            case "ENOENT":
                throw new Error("".concat(name, " ").concat(e.path, " does not exist: loading failed"));
            default:
                throw e;
        }
    };
}
var NodeFileSystem = exports.NodeFileSystem = /** @class */ function() {
    /**
     * Constructor of the NodeFileSystem IOHandler.
     * @param path A single path or an Array of paths.
     *   For saving: expects a single path pointing to an existing or nonexistent
     *     directory. If the directory does not exist, it will be
     *     created.
     *   For loading:
     *     - If the model has JSON topology (e.g., `tf.Model`), a single path
     *       pointing to the JSON file (usually named `model.json`) is expected.
     *       The JSON file is expected to contain `modelTopology` and/or
     *       `weightsManifest`. If `weightManifest` exists, the values of the
     *       weights will be loaded from relative paths (relative to the directory
     *       of `model.json`) as contained in `weightManifest`.
     *     - If the model has binary (protocol buffer GraphDef) topology,
     *       an Array of two paths is expected: the first path should point to the
     *       .pb file and the second path should point to the weight manifest
     *       JSON file.
     */ function NodeFileSystem(path) {
        this.MODEL_JSON_FILENAME = "model.json";
        this.WEIGHTS_BINARY_FILENAME = "weights.bin";
        this.MODEL_BINARY_FILENAME = "tensorflowjs.pb";
        if (Array.isArray(path)) {
            tf.util.assert(path.length === 2, function() {
                return "file paths must have a length of 2, " + "(actual length is ".concat(path.length, ").");
            });
            this.path = path.map(function(p) {
                return (0, path_1.resolve)(p);
            });
        } else this.path = (0, path_1.resolve)(path);
    }
    NodeFileSystem.prototype.save = function(modelArtifacts) {
        return __awaiter(this, void 0, void 0, function() {
            var weightsBinPath, weightsManifest, modelJSON, modelJSONPath;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (Array.isArray(this.path)) throw new Error("Cannot perform saving to multiple paths.");
                        return [
                            4 /*yield*/ ,
                            this.createOrVerifyDirectory()
                        ];
                    case 1:
                        _a.sent();
                        if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) return [
                            3 /*break*/ ,
                            2
                        ];
                        throw new Error("NodeFileSystem.save() does not support saving model topology in binary format yet.");
                    case 2:
                        weightsBinPath = (0, path_1.join)(this.path, this.WEIGHTS_BINARY_FILENAME);
                        weightsManifest = [
                            {
                                paths: [
                                    this.WEIGHTS_BINARY_FILENAME
                                ],
                                weights: modelArtifacts.weightSpecs
                            }
                        ];
                        modelJSON = {
                            modelTopology: modelArtifacts.modelTopology,
                            weightsManifest: weightsManifest,
                            format: modelArtifacts.format,
                            generatedBy: modelArtifacts.generatedBy,
                            convertedBy: modelArtifacts.convertedBy
                        };
                        if (modelArtifacts.trainingConfig != null) modelJSON.trainingConfig = modelArtifacts.trainingConfig;
                        if (modelArtifacts.signature != null) modelJSON.signature = modelArtifacts.signature;
                        if (modelArtifacts.userDefinedMetadata != null) modelJSON.userDefinedMetadata = modelArtifacts.userDefinedMetadata;
                        modelJSONPath = (0, path_1.join)(this.path, this.MODEL_JSON_FILENAME);
                        return [
                            4 /*yield*/ ,
                            writeFile(modelJSONPath, JSON.stringify(modelJSON), "utf8")
                        ];
                    case 3:
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            writeFile(weightsBinPath, Buffer.from(modelArtifacts.weightData), "binary")
                        ];
                    case 4:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            {
                                // TODO(cais): Use explicit tf.io.ModelArtifactsInfo type below once it
                                // is available.
                                // tslint:disable-next-line:no-any
                                modelArtifactsInfo: tf.io.getModelArtifactsInfoForJSON(modelArtifacts)
                            }
                        ];
                }
            });
        });
    };
    NodeFileSystem.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    Array.isArray(this.path) ? this.loadBinaryModel() : this.loadJSONModel()
                ];
            });
        });
    };
    NodeFileSystem.prototype.loadBinaryModel = function() {
        return __awaiter(this, void 0, void 0, function() {
            var topologyPath, weightManifestPath, topology, weightManifest, modelTopology, weightsManifest, _a, _b, modelArtifacts, weightSpecs, weightData;
            var _c;
            return __generator(this, function(_d) {
                switch(_d.label){
                    case 0:
                        topologyPath = this.path[0];
                        weightManifestPath = this.path[1];
                        return [
                            4 /*yield*/ ,
                            stat(topologyPath).catch(doesNotExistHandler("Topology Path"))
                        ];
                    case 1:
                        topology = _d.sent();
                        return [
                            4 /*yield*/ ,
                            stat(weightManifestPath).catch(doesNotExistHandler("Weight Manifest Path"))
                        ];
                    case 2:
                        weightManifest = _d.sent();
                        // `this.path` can be either a directory or a file. If it is a file, assume
                        // it is model.json file.
                        if (!topology.isFile()) throw new Error("File specified for topology is not a file!");
                        if (!weightManifest.isFile()) throw new Error("File specified for the weight manifest is not a file!");
                        return [
                            4 /*yield*/ ,
                            readFile(this.path[0])
                        ];
                    case 3:
                        modelTopology = _d.sent();
                        _b = (_a = JSON).parse;
                        return [
                            4 /*yield*/ ,
                            readFile(this.path[1], "utf8")
                        ];
                    case 4:
                        weightsManifest = _b.apply(_a, [
                            _d.sent()
                        ]);
                        modelArtifacts = {
                            modelTopology: modelTopology
                        };
                        return [
                            4 /*yield*/ ,
                            this.loadWeights(weightsManifest, this.path[1])
                        ];
                    case 5:
                        weightSpecs = (_c = _d.sent(), _c[0]), weightData = _c[1];
                        modelArtifacts.weightSpecs = weightSpecs;
                        modelArtifacts.weightData = weightData;
                        return [
                            2 /*return*/ ,
                            modelArtifacts
                        ];
                }
            });
        });
    };
    NodeFileSystem.prototype.loadJSONModel = function() {
        return __awaiter(this, void 0, void 0, function() {
            var path, info, modelJSON, _a, _b;
            var _this = this;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        path = this.path;
                        return [
                            4 /*yield*/ ,
                            stat(path).catch(doesNotExistHandler("Path"))
                        ];
                    case 1:
                        info = _c.sent();
                        if (!info.isFile()) return [
                            3 /*break*/ ,
                            3
                        ];
                        _b = (_a = JSON).parse;
                        return [
                            4 /*yield*/ ,
                            readFile(path, "utf8")
                        ];
                    case 2:
                        modelJSON = _b.apply(_a, [
                            _c.sent()
                        ]);
                        return [
                            2 /*return*/ ,
                            tf.io.getModelArtifactsForJSON(modelJSON, function(weightsManifest) {
                                return _this.loadWeights(weightsManifest, path);
                            })
                        ];
                    case 3:
                        throw new Error("The path to load from must be a file. Loading from a directory is not supported.");
                }
            });
        });
    };
    NodeFileSystem.prototype.loadWeights = function(weightsManifest, path) {
        return __awaiter(this, void 0, void 0, function() {
            var dirName, buffers, weightSpecs, _i, weightsManifest_1, group, _a, _b, path_2, weightFilePath, buffer;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        dirName = (0, path_1.dirname)(path);
                        buffers = [];
                        weightSpecs = [];
                        _i = 0, weightsManifest_1 = weightsManifest;
                        _c.label = 1;
                    case 1:
                        if (!(_i < weightsManifest_1.length)) return [
                            3 /*break*/ ,
                            7
                        ];
                        group = weightsManifest_1[_i];
                        _a = 0, _b = group.paths;
                        _c.label = 2;
                    case 2:
                        if (!(_a < _b.length)) return [
                            3 /*break*/ ,
                            5
                        ];
                        path_2 = _b[_a];
                        weightFilePath = (0, path_1.join)(dirName, path_2);
                        return [
                            4 /*yield*/ ,
                            readFile(weightFilePath).catch(doesNotExistHandler("Weight file"))
                        ];
                    case 3:
                        buffer = _c.sent();
                        buffers.push(buffer);
                        _c.label = 4;
                    case 4:
                        _a++;
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 5:
                        weightSpecs.push.apply(weightSpecs, group.weights);
                        _c.label = 6;
                    case 6:
                        _i++;
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 7:
                        return [
                            2 /*return*/ ,
                            [
                                weightSpecs,
                                (0, io_utils_1.toArrayBuffer)(buffers)
                            ]
                        ];
                }
            });
        });
    };
    /**
     * For each item in `this.path`, creates a directory at the path or verify
     * that the path exists as a directory.
     */ NodeFileSystem.prototype.createOrVerifyDirectory = function() {
        return __awaiter(this, void 0, void 0, function() {
            var paths, _i, paths_1, path, e_1;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        paths = Array.isArray(this.path) ? this.path : [
                            this.path
                        ];
                        _i = 0, paths_1 = paths;
                        _a.label = 1;
                    case 1:
                        if (!(_i < paths_1.length)) return [
                            3 /*break*/ ,
                            9
                        ];
                        path = paths_1[_i];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            mkdir(path)
                        ];
                    case 3:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 4:
                        e_1 = _a.sent();
                        if (!(e_1.code === "EEXIST")) return [
                            3 /*break*/ ,
                            6
                        ];
                        return [
                            4 /*yield*/ ,
                            stat(path)
                        ];
                    case 5:
                        if (_a.sent().isFile()) throw new Error("Path ".concat(path, " exists as a file. The path must be ") + "nonexistent or point to a directory.");
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        throw e_1;
                    case 7:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        _i++;
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    NodeFileSystem.URL_SCHEME = "file://";
    return NodeFileSystem;
}();
var nodeFileSystemRouter = function(url) {
    if (Array.isArray(url)) {
        if (url.every(function(urlElement) {
            return urlElement.startsWith(NodeFileSystem.URL_SCHEME);
        })) return new NodeFileSystem(url.map(function(urlElement) {
            return urlElement.slice(NodeFileSystem.URL_SCHEME.length);
        }));
        else return null;
    } else {
        if (url.startsWith(NodeFileSystem.URL_SCHEME)) return new NodeFileSystem(url.slice(NodeFileSystem.URL_SCHEME.length));
        else return null;
    }
};
exports.nodeFileSystemRouter = nodeFileSystemRouter;
// Registration of `nodeFileSystemRouter` is done in index.ts.
/**
 * Factory function for Node.js native file system IO Handler.
 *
 * @param path A single path or an Array of paths.
 *   For saving: expects a single path pointing to an existing or nonexistent
 *     directory. If the directory does not exist, it will be
 *     created.
 *   For loading:
 *     - If the model has JSON topology (e.g., `tf.Model`), a single path
 *       pointing to the JSON file (usually named `model.json`) is expected.
 *       The JSON file is expected to contain `modelTopology` and/or
 *       `weightsManifest`. If `weightManifest` exists, the values of the
 *       weights will be loaded from relative paths (relative to the directory
 *       of `model.json`) as contained in `weightManifest`.
 *     - If the model has binary (protocol buffer GraphDef) topology,
 *       an Array of two paths is expected: the first path should point to the
 *        .pb file and the second path should point to the weight manifest
 *       JSON file.
 */ function fileSystem(path) {
    return new NodeFileSystem(path);
}
exports.fileSystem = fileSystem;

},{"6e74be43d641d423":"ei9Vu","a0d4e54956ace1f6":"hadS1","6caf1e70ed4ec2d":"4oI9L","6f0c8cbe5f0dd925":"i1BLo","2d320bf4f0f083d7":"h4AnS","4ed7b0e54a5d9cf9":"dS6Jv"}],"dS6Jv":[function(require,module,exports) {
var Buffer = require("e352d9f2d27725a6").Buffer;
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toArrayBuffer = exports.toBuffer = void 0;
/**
 * Convert an ArrayBuffer to a Buffer.
 */ function toBuffer(ab) {
    var view = new Uint8Array(ab);
    return Buffer.from(view); // copies data
}
exports.toBuffer = toBuffer;
/**
 * Convert a Buffer or an Array of Buffers to an ArrayBuffer.
 *
 * If the input is an Array of Buffers, they will be concatenated in the
 * specified order to form the output ArrayBuffer.
 */ function toArrayBuffer(buf) {
    if (Array.isArray(buf)) {
        // An Array of Buffers.
        var totalLength = 0;
        for(var _i = 0, buf_1 = buf; _i < buf_1.length; _i++){
            var buffer = buf_1[_i];
            totalLength += buffer.length;
        }
        var ab = new ArrayBuffer(totalLength);
        var view = new Uint8Array(ab);
        var pos = 0;
        for(var _a = 0, buf_2 = buf; _a < buf_2.length; _a++){
            var buffer = buf_2[_a];
            pos += buffer.copy(view, pos);
        }
        return ab;
    } else // A single Buffer. Return a copy of the underlying ArrayBuffer slice.
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}
exports.toArrayBuffer = toArrayBuffer;

},{"e352d9f2d27725a6":"ei9Vu"}],"2YCVU":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nodeHTTPRequest = exports.fileSystem = void 0;
/**
 * Public exports from the `io` module.
 */ var file_system_1 = require("77de612351cf7a57");
Object.defineProperty(exports, "fileSystem", {
    enumerable: true,
    get: function() {
        return file_system_1.fileSystem;
    }
});
var node_http_1 = require("bcead9405323edce");
Object.defineProperty(exports, "nodeHTTPRequest", {
    enumerable: true,
    get: function() {
        return node_http_1.nodeHTTPRequest;
    }
});

},{"77de612351cf7a57":"lVBbf","bcead9405323edce":"gmY0m"}],"gmY0m":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nodeHTTPRequestRouter = exports.nodeHTTPRequest = void 0;
var tfjs_1 = require("fd2c40871f522e9a");
/**
 * Factory function for HTTP IO Handler in Node.js.
 *
 * @param path URL path or an array of them.
 * @param requestInit Request init for the HTTP IOHandler. May include fields
 *   such as "credentials" and "cache". (Optional)
 * @param weightPathPrefix A path prefix for weight loading . (Optional).
 */ function nodeHTTPRequest(path, requestInit, weightPathPrefix) {
    return tfjs_1.io.browserHTTPRequest(path, {
        requestInit: requestInit,
        weightPathPrefix: weightPathPrefix
    });
}
exports.nodeHTTPRequest = nodeHTTPRequest;
var nodeHTTPRequestRouter = function(url) {
    var isHTTP = true;
    if (Array.isArray(url)) isHTTP = url.every(function(urlItem) {
        return tfjs_1.io.isHTTPScheme(urlItem);
    });
    else isHTTP = tfjs_1.io.isHTTPScheme(url);
    if (isHTTP) return nodeHTTPRequest(url);
    return null;
};
exports.nodeHTTPRequestRouter = nodeHTTPRequestRouter;

},{"fd2c40871f522e9a":"hadS1"}],"1YeyC":[function(require,module,exports) {
"use strict";
/** @license See the LICENSE file. */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.version = void 0;
// This code is auto-generated, do not modify this file!
var version = "4.17.0";
exports.version = version;

},{}],"71swr":[function(require,module,exports) {
var process = require("a14b6afc7dab7baf");
var __dirname = "node_modules/@mapbox/node-pre-gyp/lib";
"use strict";
/**
 * Module exports.
 */ module.exports = exports;
/**
 * Module dependencies.
 */ // load mocking control function for accessing s3 via https. the function is a noop always returning
// false if not mocking.
exports.mockS3Http = require("e15029b8932f06c5").get_mockS3Http();
exports.mockS3Http("on");
const mocking = exports.mockS3Http("get");
const fs = require("c07532f73fcdc4d8");
const path = require("1dff81cd0456742f");
const nopt = require("ed900db6f5f84642");
const log = require("5373aff058b8725b");
log.disableProgress();
const napi = require("d510ea2f5337c797");
const EE = require("86f5e1a68e53dd51").EventEmitter;
const inherits = require("e57566c28ebc0513").inherits;
const cli_commands = [
    "clean",
    "install",
    "reinstall",
    "build",
    "rebuild",
    "package",
    "testpackage",
    "publish",
    "unpublish",
    "info",
    "testbinary",
    "reveal",
    "configure"
];
const aliases = {};
// differentiate node-pre-gyp's logs from npm's
log.heading = "node-pre-gyp";
if (mocking) log.warn(`mocking s3 to ${undefined}`);
// this is a getter to avoid circular reference warnings with node v14.
Object.defineProperty(exports, "find", {
    get: function() {
        return require("c4f3396e6bc0fa82").find;
    },
    enumerable: true
});
// in the following, "my_module" is using node-pre-gyp to
// prebuild and install pre-built binaries. "main_module"
// is using "my_module".
//
// "bin/node-pre-gyp" invokes Run() without a path. the
// expectation is that the working directory is the package
// root "my_module". this is true because in all cases npm is
// executing a script in the context of "my_module".
//
// "pre-binding.find()" is executed by "my_module" but in the
// context of "main_module". this is because "main_module" is
// executing and requires "my_module" which is then executing
// "pre-binding.find()" via "node-pre-gyp.find()", so the working
// directory is that of "main_module".
//
// that's why "find()" must pass the path to package.json.
//
function Run({ package_json_path = "./package.json", argv }) {
    this.package_json_path = package_json_path;
    this.commands = {};
    const self = this;
    cli_commands.forEach((command)=>{
        self.commands[command] = function(argvx, callback) {
            log.verbose("command", command, argvx);
            return require("./" + command)(self, argvx, callback);
        };
    });
    this.parseArgv(argv);
    // this is set to true after the binary.host property was set to
    // either staging_host or production_host.
    this.binaryHostSet = false;
}
inherits(Run, EE);
exports.Run = Run;
const proto = Run.prototype;
/**
 * Export the contents of the package.json.
 */ proto.package = require("da3e35cbf318134b");
/**
 * nopt configuration definitions
 */ proto.configDefs = {
    help: Boolean,
    arch: String,
    debug: Boolean,
    directory: String,
    proxy: String,
    loglevel: String // everywhere
};
/**
 * nopt shorthands
 */ proto.shorthands = {
    release: "--no-debug",
    C: "--directory",
    debug: "--debug",
    j: "--jobs",
    silent: "--loglevel=silent",
    silly: "--loglevel=silly",
    verbose: "--loglevel=verbose"
};
/**
 * expose the command aliases for the bin file to use.
 */ proto.aliases = aliases;
/**
 * Parses the given argv array and sets the 'opts', 'argv',
 * 'command', and 'package_json' properties.
 */ proto.parseArgv = function parseOpts(argv) {
    this.opts = nopt(this.configDefs, this.shorthands, argv);
    this.argv = this.opts.argv.remain.slice();
    const commands = this.todo = [];
    // create a copy of the argv array with aliases mapped
    argv = this.argv.map((arg)=>{
        // is this an alias?
        if (arg in this.aliases) arg = this.aliases[arg];
        return arg;
    });
    // process the mapped args into "command" objects ("name" and "args" props)
    argv.slice().forEach((arg)=>{
        if (arg in this.commands) {
            const args = argv.splice(0, argv.indexOf(arg));
            argv.shift();
            if (commands.length > 0) commands[commands.length - 1].args = args;
            commands.push({
                name: arg,
                args: []
            });
        }
    });
    if (commands.length > 0) commands[commands.length - 1].args = argv.splice(0);
    // if a directory was specified package.json is assumed to be relative
    // to it.
    let package_json_path = this.package_json_path;
    if (this.opts.directory) package_json_path = path.join(this.opts.directory, package_json_path);
    this.package_json = JSON.parse(fs.readFileSync(package_json_path));
    // expand commands entries for multiple napi builds
    this.todo = napi.expand_commands(this.package_json, this.opts, commands);
    // support for inheriting config env variables from npm
    const npm_config_prefix = "npm_config_";
    Object.keys(process.env).forEach((name)=>{
        if (name.indexOf(npm_config_prefix) !== 0) return;
        const val = process.env[name];
        if (name === npm_config_prefix + "loglevel") log.level = val;
        else {
            // add the user-defined options to the config
            name = name.substring(npm_config_prefix.length);
            // avoid npm argv clobber already present args
            // which avoids problem of 'npm test' calling
            // script that runs unique npm install commands
            if (name === "argv") {
                if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) ;
                else this.opts[name] = val;
            } else this.opts[name] = val;
        }
    });
    if (this.opts.loglevel) log.level = this.opts.loglevel;
    log.resume();
};
/**
 * allow the binary.host property to be set at execution time.
 *
 * for this to take effect requires all the following to be true.
 * - binary is a property in package.json
 * - binary.host is falsey
 * - binary.staging_host is not empty
 * - binary.production_host is not empty
 *
 * if any of the previous checks fail then the function returns an empty string
 * and makes no changes to package.json's binary property.
 *
 *
 * if command is "publish" then the default is set to "binary.staging_host"
 * if command is not "publish" the the default is set to "binary.production_host"
 *
 * if the command-line option '--s3_host' is set to "staging" or "production" then
 * "binary.host" is set to the specified "staging_host" or "production_host". if
 * '--s3_host' is any other value an exception is thrown.
 *
 * if '--s3_host' is not present then "binary.host" is set to the default as above.
 *
 * this strategy was chosen so that any command other than "publish" or "unpublish" uses "production"
 * as the default without requiring any command-line options but that "publish" and "unpublish" require
 * '--s3_host production_host' to be specified in order to *really* publish (or unpublish). publishing
 * to staging can be done freely without worrying about disturbing any production releases.
 */ proto.setBinaryHostProperty = function(command) {
    if (this.binaryHostSet) return this.package_json.binary.host;
    const p = this.package_json;
    // don't set anything if host is present. it must be left blank to trigger this.
    if (!p || !p.binary || p.binary.host) return "";
    // and both staging and production must be present. errors will be reported later.
    if (!p.binary.staging_host || !p.binary.production_host) return "";
    let target = "production_host";
    if (command === "publish" || command === "unpublish") target = "staging_host";
    // the environment variable has priority over the default or the command line. if
    // either the env var or the command line option are invalid throw an error.
    const npg_s3_host = undefined;
    if (npg_s3_host === "staging" || npg_s3_host === "production") target = `${npg_s3_host}_host`;
    else if (this.opts["s3_host"] === "staging" || this.opts["s3_host"] === "production") target = `${this.opts["s3_host"]}_host`;
    else if (this.opts["s3_host"] || npg_s3_host) throw new Error(`invalid s3_host ${this.opts["s3_host"] || npg_s3_host}`);
    p.binary.host = p.binary[target];
    this.binaryHostSet = true;
    return p.binary.host;
};
/**
 * Returns the usage instructions for node-pre-gyp.
 */ proto.usage = function usage() {
    const str = [
        "",
        "  Usage: node-pre-gyp <command> [options]",
        "",
        "  where <command> is one of:",
        cli_commands.map((c)=>{
            return "    - " + c + " - " + require("./" + c).usage;
        }).join("\n"),
        "",
        "node-pre-gyp@" + this.version + "  " + path.resolve(__dirname, ".."),
        "node@" + process.versions.node
    ].join("\n");
    return str;
};
/**
 * Version number getter.
 */ Object.defineProperty(proto, "version", {
    get: function() {
        return this.package.version;
    },
    enumerable: true
});

},{"a14b6afc7dab7baf":"kKEHw","e15029b8932f06c5":"mBW2q","c07532f73fcdc4d8":"4oI9L","1dff81cd0456742f":"i1BLo","ed900db6f5f84642":"1GEEx","5373aff058b8725b":"jN8cz","d510ea2f5337c797":"1SHwg","86f5e1a68e53dd51":"gIDbZ","e57566c28ebc0513":"h4AnS","c4f3396e6bc0fa82":"bj54g","da3e35cbf318134b":"1EQtr"}],"mBW2q":[function(require,module,exports) {
"use strict";
module.exports = exports;
const url = require("4fcc490e204d041");
const fs = require("ed26ff431a61223d");
const path = require("ef41b4242f1f7460");
module.exports.detect = function(opts, config) {
    const to = opts.hosted_path;
    const uri = url.parse(to);
    config.prefix = !uri.pathname || uri.pathname === "/" ? "" : uri.pathname.replace("/", "");
    if (opts.bucket && opts.region) {
        config.bucket = opts.bucket;
        config.region = opts.region;
        config.endpoint = opts.host;
        config.s3ForcePathStyle = opts.s3ForcePathStyle;
    } else {
        const parts = uri.hostname.split(".s3");
        const bucket = parts[0];
        if (!bucket) return;
        if (!config.bucket) config.bucket = bucket;
        if (!config.region) {
            const region = parts[1].slice(1).split(".")[0];
            if (region === "amazonaws") config.region = "us-east-1";
            else config.region = region;
        }
    }
};
module.exports.get_s3 = function(config) {
    var params, callback, params1, callback1, params2, callback2, params3, callback3;
    // if not mocking then setup real s3.
    const AWS = require("638d934897152b26");
    AWS.config.update(config);
    const s3 = new AWS.S3();
    // need to change if additional options need to be specified.
    return {
        listObjects (params, callback) {
            return s3.listObjects(params, callback);
        },
        headObject (params, callback) {
            return s3.headObject(params, callback);
        },
        deleteObject (params, callback) {
            return s3.deleteObject(params, callback);
        },
        putObject (params, callback) {
            return s3.putObject(params, callback);
        }
    };
};
//
// function to get the mocking control function. if not mocking it returns a no-op.
//
// if mocking it sets up the mock http interceptors that use the mocked s3 file system
// to fulfill reponses.
module.exports.get_mockS3Http = function() {
    let mock_s3 = false;
    return ()=>mock_s3;
};

},{"4fcc490e204d041":"e4taF","ed26ff431a61223d":"4oI9L","ef41b4242f1f7460":"i1BLo","638d934897152b26":"1xW8i"}],"e4taF":[function(require,module,exports) {
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ "use strict";
var punycode = require("6aa635927f16f681");
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */ var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/, /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */ delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */ nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
}, querystring = require("6724c84b9b69726b");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && typeof url === "object" && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (typeof url !== "string") throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */ var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */ rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = querystring.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */ if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */ /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */ // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */ var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */ atSign = rest.lastIndexOf("@", hostEnd);
        /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */ if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */ this.hostname = this.hostname || "";
        /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */ var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */ newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */ this.hostname = punycode.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */ if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */ if (!unsafeProtocol[lowerProto]) /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */ for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = querystring.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    // to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */ if (typeof obj === "string") obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && typeof this.query === "object" && Object.keys(this.query).length) query = querystring.stringify(this.query, {
        arrayFormat: "repeat",
        addQueryPrefix: false
    });
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */ if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */ result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        // urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.pathname = "/";
            result.path = result.pathname;
        }
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */ if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */ if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */ if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (relative.search != null) {
        /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */ if (psychotic) {
            result.host = srcPath.shift();
            result.hostname = result.host;
            /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.hostname = authInHost.shift();
                result.host = result.hostname;
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        // to support http.request
        if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */ result.pathname = null;
        // to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */ var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */ var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (srcPath.length > 0) result.pathname = srcPath.join("/");
    else {
        result.pathname = null;
        result.path = null;
    }
    // to support request.http
    if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

},{"6aa635927f16f681":"fFM5h","6724c84b9b69726b":"9gMMZ"}],"fFM5h":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

},{}],"9gMMZ":[function(require,module,exports) {
"use strict";
var stringify = require("a472ccaa2f2351e9");
var parse = require("7ffa4249597bf32b");
var formats = require("454df9476704f887");
module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"a472ccaa2f2351e9":"lL1OU","7ffa4249597bf32b":"kz1lt","454df9476704f887":"3gXBg"}],"lL1OU":[function(require,module,exports) {
"use strict";
var getSideChannel = require("6246bbb805756d41");
var utils = require("44263cc7b702ebf");
var formats = require("929f8531a94a537c");
var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};
var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [
        valueOrArray
    ]);
};
var toISO = Date.prototype.toISOString;
var defaultFormat = formats["default"];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};
var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
};
var sentinel = {};
var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag){
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
            if (pos === step) throw new RangeError("Cyclic object value");
            else findFlag = true; // Break while
        }
        if (typeof tmpSc.get(sentinel) === "undefined") step = 0;
    }
    if (typeof filter === "function") obj = filter(prefix, obj);
    else if (obj instanceof Date) obj = serializeDate(obj);
    else if (generateArrayPrefix === "comma" && isArray(obj)) obj = utils.maybeMap(obj, function(value) {
        if (value instanceof Date) return serializeDate(value);
        return value;
    });
    if (obj === null) {
        if (strictNullHandling) return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
            return [
                formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))
            ];
        }
        return [
            formatter(prefix) + "=" + formatter(String(obj))
        ];
    }
    var values = [];
    if (typeof obj === "undefined") return values;
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) obj = utils.maybeMap(obj, encoder);
        objKeys = [
            {
                value: obj.length > 0 ? obj.join(",") || null : void 0
            }
        ];
    } else if (isArray(filter)) objKeys = filter;
    else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }
    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
    for(var j = 0; j < objKeys.length; ++j){
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) continue;
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) return defaults;
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") throw new TypeError("Encoder has to be a function.");
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) throw new TypeError("Unknown format option provided.");
        format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) filter = opts.filter;
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) return "";
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) arrayFormat = opts.arrayFormat;
    else if (opts && "indices" in opts) arrayFormat = opts.indices ? "indices" : "repeat";
    else arrayFormat = "indices";
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
    if (!objKeys) objKeys = Object.keys(obj);
    if (options.sort) objKeys.sort(options.sort);
    var sideChannel = getSideChannel();
    for(var i = 0; i < objKeys.length; ++i){
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) continue;
        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
        prefix += "utf8=%26%2310003%3B&";
        else // encodeURIComponent('✓')
        prefix += "utf8=%E2%9C%93&";
    }
    return joined.length > 0 ? prefix + joined : "";
};

},{"6246bbb805756d41":"kqoRE","44263cc7b702ebf":"4ysFB","929f8531a94a537c":"3gXBg"}],"kqoRE":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("7911ec51a2dc9f3e");
var callBound = require("125062ab9035288f");
var inspect = require("9f4f5a92d8c6543");
var $TypeError = require("1d3f7a3f029b095e");
var $WeakMap = GetIntrinsic("%WeakMap%", true);
var $Map = GetIntrinsic("%Map%", true);
var $weakMapGet = callBound("WeakMap.prototype.get", true);
var $weakMapSet = callBound("WeakMap.prototype.set", true);
var $weakMapHas = callBound("WeakMap.prototype.has", true);
var $mapGet = callBound("Map.prototype.get", true);
var $mapSet = callBound("Map.prototype.set", true);
var $mapHas = callBound("Map.prototype.has", true);
/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/ var listGetNode = function(list, key) {
    for(var prev = list, curr; (curr = prev.next) !== null; prev = curr)if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr; // eslint-disable-line no-param-reassign
        return curr;
    }
};
var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
};
var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) node.value = value;
    else // Prepend the new node to the beginning of the list
    objects.next = {
        key: key,
        next: objects.next,
        value: value
    };
};
var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
};
module.exports = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
        assert: function(key) {
            if (!channel.has(key)) throw new $TypeError("Side channel does not contain " + inspect(key));
        },
        get: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $weakMapGet($wm, key);
            } else if ($Map) {
                if ($m) return $mapGet($m, key);
            } else {
                if ($o) return listGet($o, key);
            }
        },
        has: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $weakMapHas($wm, key);
            } else if ($Map) {
                if ($m) return $mapHas($m, key);
            } else {
                if ($o) return listHas($o, key);
            }
            return false;
        },
        set: function(key, value) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if (!$wm) $wm = new $WeakMap();
                $weakMapSet($wm, key, value);
            } else if ($Map) {
                if (!$m) $m = new $Map();
                $mapSet($m, key, value);
            } else {
                if (!$o) // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
                $o = {
                    key: {},
                    next: null
                };
                listSet($o, key, value);
            }
        }
    };
    return channel;
};

},{"7911ec51a2dc9f3e":"ipdBX","125062ab9035288f":"3u0uq","9f4f5a92d8c6543":"glJMp","1d3f7a3f029b095e":"5ErIS"}],"glJMp":[function(require,module,exports) {
var global = arguments[3];
var hasMap = typeof Map === "function" && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === "function" && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
 ? function(O) {
    return O.__proto__; // eslint-disable-line no-proto
} : null);
function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) return str;
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
    }
    return $replace.call(str, sepRegex, "$&_");
}
var utilInspect = require("faefcb1694f2ad90");
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && opts.quoteStyle !== "single" && opts.quoteStyle !== "double") throw new TypeError('option "quoteStyle" must be "single" or "double"');
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") return "undefined";
    if (obj === null) return "null";
    if (typeof obj === "boolean") return obj ? "true" : "false";
    if (typeof obj === "string") return inspectString(obj, opts);
    if (typeof obj === "number") {
        if (obj === 0) return Infinity / obj > 0 ? "0" : "-0";
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") depth = 0;
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") return isArray(obj) ? "[Array]" : "[Object]";
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") seen = [];
    else if (indexOf(seen, obj) >= 0) return "[Circular]";
    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, "quoteStyle")) newOpts.quoteStyle = opts.quoteStyle;
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for(var i = 0; i < attrs.length; i++)s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        s += ">";
        if (obj.childNodes && obj.childNodes.length) s += "...";
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) return "[]";
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) return "[" + indentedJoin(xs, indent) + "]";
        return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        if (parts.length === 0) return "[" + String(obj) + "]";
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) return utilInspect(obj, {
            depth: maxDepth - depth
        });
        else if (customInspect !== "symbol" && typeof obj.inspect === "function") return obj.inspect();
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) return weakCollectionOf("WeakMap");
    if (isWeakSet(obj)) return weakCollectionOf("WeakSet");
    if (isWeakRef(obj)) return weakCollectionOf("WeakRef");
    if (isNumber(obj)) return markBoxed(inspect(Number(obj)));
    if (isBigInt(obj)) return markBoxed(inspect(bigIntValueOf.call(obj)));
    if (isBoolean(obj)) return markBoxed(booleanValueOf.call(obj));
    if (isString(obj)) return markBoxed(inspect(String(obj)));
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */ if (typeof window !== "undefined" && obj === window) return "{ [object Window] }";
    if (obj === global) return "{ [object globalThis] }";
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) return tag + "{}";
        if (indent) return tag + "{" + indentedJoin(ys, indent) + "}";
        return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
};
function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
}
function quote(s) {
    return $replace.call(String(s), /"/g, "&quot;");
}
function isArray(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isDate(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isRegExp(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isError(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isString(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isNumber(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) return obj && typeof obj === "object" && obj instanceof Symbol;
    if (typeof obj === "symbol") return true;
    if (!obj || typeof obj !== "object" || !symToString) return false;
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}
function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) return false;
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}
var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
};
function has(obj, key) {
    return hasOwn.call(obj, key);
}
function toStr(obj) {
    return objectToString.call(obj);
}
function nameOf(f) {
    if (f.name) return f.name;
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) return m[1];
    return null;
}
function indexOf(xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}
function isMap(x) {
    if (!mapSize || !x || typeof x !== "object") return false;
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== "object") return false;
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== "object") return false;
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}
function isSet(x) {
    if (!setSize || !x || typeof x !== "object") return false;
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== "object") return false;
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isElement(x) {
    if (!x || typeof x !== "object") return false;
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) return true;
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
}
function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
}
function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
    }[n];
    if (x) return "\\" + x;
    return "\\x" + (n < 0x10 ? "0" : "") + $toUpperCase.call(n.toString(16));
}
function markBoxed(str) {
    return "Object(" + str + ")";
}
function weakCollectionOf(type) {
    return type + " { ? }";
}
function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
}
function singleLineValues(xs) {
    for(var i = 0; i < xs.length; i++){
        if (indexOf(xs[i], "\n") >= 0) return false;
    }
    return true;
}
function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") baseIndent = "	";
    else if (typeof opts.indent === "number" && opts.indent > 0) baseIndent = $join.call(Array(opts.indent + 1), " ");
    else return null;
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}
function indentedJoin(xs, indent) {
    if (xs.length === 0) return "";
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
}
function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for(var i = 0; i < obj.length; i++)xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for(var k = 0; k < syms.length; k++)symMap["$" + syms[k]] = syms[k];
    }
    for(var key in obj){
        if (!has(obj, key)) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) continue; // eslint-disable-line no-restricted-syntax, no-continue
        else if ($test.call(/[^\w$]/, key)) xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        else xs.push(key + ": " + inspect(obj[key], obj));
    }
    if (typeof gOPS === "function") {
        for(var j = 0; j < syms.length; j++)if (isEnumerable.call(obj, syms[j])) xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
    }
    return xs;
}

},{"faefcb1694f2ad90":"4oI9L"}],"4ysFB":[function(require,module,exports) {
"use strict";
var formats = require("7adf3674f81a2c87");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var hexTable = function() {
    var array = [];
    for(var i = 0; i < 256; ++i)array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    return array;
}();
var compactQueue = function compactQueue(queue) {
    while(queue.length > 1){
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
            var compacted = [];
            for(var j = 0; j < obj.length; ++j)if (typeof obj[j] !== "undefined") compacted.push(obj[j]);
            item.obj[item.prop] = compacted;
        }
    }
};
var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for(var i = 0; i < source.length; ++i)if (typeof source[i] !== "undefined") obj[i] = source[i];
    return obj;
};
var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */ if (!source) return target;
    if (typeof source !== "object") {
        if (isArray(target)) target.push(source);
        else if (target && typeof target === "object") {
            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) target[source] = true;
        } else return [
            target,
            source
        ];
        return target;
    }
    if (!target || typeof target !== "object") return [
        target
    ].concat(source);
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) mergeTarget = arrayToObject(target, options);
    if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === "object" && item && typeof item === "object") target[i] = merge(targetItem, item, options);
                else target.push(item);
            } else target[i] = item;
        });
        return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) acc[key] = merge(acc[key], value, options);
        else acc[key] = value;
        return acc;
    }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};
var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};
var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) return str;
    var string = str;
    if (typeof str === "symbol") string = Symbol.prototype.toString.call(str);
    else if (typeof str !== "string") string = String(str);
    if (charset === "iso-8859-1") return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
    });
    var out = "";
    for(var i = 0; i < string.length; ++i){
        var c = string.charCodeAt(i);
        if (c === 0x2D // -
         || c === 0x2E // .
         || c === 0x5F // _
         || c === 0x7E // ~
         || c >= 0x30 && c <= 0x39 // 0-9
         || c >= 0x41 && c <= 0x5A // a-z
         || c >= 0x61 && c <= 0x7A // A-Z
         || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )
        ) {
            out += string.charAt(i);
            continue;
        }
        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }
        if (c < 0x800) {
            out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
            continue;
        }
        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
            continue;
        }
        i += 1;
        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
        /* eslint operator-linebreak: [2, "before"] */ out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
    }
    return out;
};
var compact = function compact(value) {
    var queue = [
        {
            obj: {
                o: value
            },
            prop: "o"
        }
    ];
    var refs = [];
    for(var i = 0; i < queue.length; ++i){
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for(var j = 0; j < keys.length; ++j){
            var key = keys[j];
            var val = obj[key];
            if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
                queue.push({
                    obj: obj,
                    prop: key
                });
                refs.push(val);
            }
        }
    }
    compactQueue(queue);
    return value;
};
var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
};
var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") return false;
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine(a, b) {
    return [].concat(a, b);
};
var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for(var i = 0; i < val.length; i += 1)mapped.push(fn(val[i]));
        return mapped;
    }
    return fn(val);
};
module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};

},{"7adf3674f81a2c87":"3gXBg"}],"3gXBg":[function(require,module,exports) {
"use strict";
var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
};
module.exports = {
    "default": Format.RFC3986,
    formatters: {
        RFC1738: function(value) {
            return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};

},{}],"kz1lt":[function(require,module,exports) {
"use strict";
var utils = require("e76649c95dd0e736");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};
var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};
var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) return val.split(",");
    return val;
};
// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = "utf8=%26%2310003%3B"; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = "utf8=%E2%9C%93"; // encodeURIComponent('✓')
var parseValues = function parseQueryStringValues(str, options) {
    var obj = {
        __proto__: null
    };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
        for(i = 0; i < parts.length; ++i)if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) charset = "utf-8";
            else if (parts[i] === isoSentinel) charset = "iso-8859-1";
            skipIndex = i;
            i = parts.length; // The eslint settings do not allow break;
        }
    }
    for(i = 0; i < parts.length; ++i){
        if (i === skipIndex) continue;
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, "key");
            val = options.strictNullHandling ? null : "";
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
            val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
                return options.decoder(encodedVal, defaults.decoder, charset, "value");
            });
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") val = interpretNumericEntities(val);
        if (part.indexOf("[]=") > -1) val = isArray(val) ? [
            val
        ] : val;
        if (has.call(obj, key)) obj[key] = utils.combine(obj[key], val);
        else obj[key] = val;
    }
    return obj;
};
var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for(var i = chain.length - 1; i >= 0; --i){
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) obj = [].concat(leaf);
        else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === "") obj = {
                0: leaf
            };
            else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                obj = [];
                obj[index] = leaf;
            } else if (cleanRoot !== "__proto__") obj[cleanRoot] = leaf;
        }
        leaf = obj;
    }
    return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) return;
    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    // The regex chunks
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    // Get the parent
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    // Stash the parent if it exists
    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) return;
        }
        keys.push(parent);
    }
    // Loop through children appending to the array until we hit depth
    var i = 0;
    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) return;
        }
        keys.push(segment[1]);
    }
    // If there's a remainder, just add whatever is left
    if (segment) keys.push("[" + key.slice(segment.index) + "]");
    return parseObject(keys, val, options, valuesParsed);
};
var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) return defaults;
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== "function") throw new TypeError("Decoder has to be a function.");
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") return options.plainObjects ? Object.create(null) : {};
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    // Iterate over the keys and setup the new object
    var keys = Object.keys(tempObj);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) return obj;
    return utils.compact(obj);
};

},{"e76649c95dd0e736":"4ysFB"}],"1xW8i":[function(require,module,exports) {
module.exports = {};

},{}],"1GEEx":[function(require,module,exports) {
// info about each config option.
var process = require("77f26314557ad495");
var debug = function() {};
var url = require("e8fe120c7eae7f0d"), path = require("ac7cd467759d5e11"), Stream = require("8a0f44dff47ed427").Stream, abbrev = require("2b9a0a9686eb667d"), os = require("b6754c913cca81b8");
module.exports = exports = nopt;
exports.clean = clean;
exports.typeDefs = {
    String: {
        type: String,
        validate: validateString
    },
    Boolean: {
        type: Boolean,
        validate: validateBoolean
    },
    url: {
        type: url,
        validate: validateUrl
    },
    Number: {
        type: Number,
        validate: validateNumber
    },
    path: {
        type: path,
        validate: validatePath
    },
    Stream: {
        type: Stream,
        validate: validateStream
    },
    Date: {
        type: Date,
        validate: validateDate
    }
};
function nopt(types, shorthands, args, slice) {
    args = args || process.argv;
    types = types || {};
    shorthands = shorthands || {};
    if (typeof slice !== "number") slice = 2;
    debug(types, shorthands, args, slice);
    args = args.slice(slice);
    var data = {}, key, argv = {
        remain: [],
        cooked: args,
        original: args.slice(0)
    };
    parse(args, data, argv.remain, types, shorthands);
    // now data is full
    clean(data, types, exports.typeDefs);
    data.argv = argv;
    Object.defineProperty(data.argv, "toString", {
        value: function() {
            return this.original.map(JSON.stringify).join(" ");
        },
        enumerable: false
    });
    return data;
}
function clean(data, types, typeDefs) {
    typeDefs = typeDefs || exports.typeDefs;
    var remove = {}, typeDefault = [
        false,
        true,
        null,
        String,
        Array
    ];
    Object.keys(data).forEach(function(k) {
        if (k === "argv") return;
        var val = data[k], isArray = Array.isArray(val), type = types[k];
        if (!isArray) val = [
            val
        ];
        if (!type) type = typeDefault;
        if (type === Array) type = typeDefault.concat(Array);
        if (!Array.isArray(type)) type = [
            type
        ];
        debug("val=%j", val);
        debug("types=", type);
        val = val.map(function(val) {
            // if it's an unknown value, then parse false/true/null/numbers/dates
            if (typeof val === "string") {
                debug("string %j", val);
                val = val.trim();
                if (val === "null" && ~type.indexOf(null) || val === "true" && (~type.indexOf(true) || ~type.indexOf(Boolean)) || val === "false" && (~type.indexOf(false) || ~type.indexOf(Boolean))) {
                    val = JSON.parse(val);
                    debug("jsonable %j", val);
                } else if (~type.indexOf(Number) && !isNaN(val)) {
                    debug("convert to number", val);
                    val = +val;
                } else if (~type.indexOf(Date) && !isNaN(Date.parse(val))) {
                    debug("convert to date", val);
                    val = new Date(val);
                }
            }
            if (!types.hasOwnProperty(k)) return val;
            // allow `--no-blah` to set 'blah' to null if null is allowed
            if (val === false && ~type.indexOf(null) && !(~type.indexOf(false) || ~type.indexOf(Boolean))) val = null;
            var d = {};
            d[k] = val;
            debug("prevalidated val", d, val, types[k]);
            if (!validate(d, k, val, types[k], typeDefs)) {
                if (exports.invalidHandler) exports.invalidHandler(k, val, types[k], data);
                else if (exports.invalidHandler !== false) debug("invalid: " + k + "=" + val, types[k]);
                return remove;
            }
            debug("validated val", d, val, types[k]);
            return d[k];
        }).filter(function(val) {
            return val !== remove;
        });
        // if we allow Array specifically, then an empty array is how we
        // express 'no value here', not null.  Allow it.
        if (!val.length && type.indexOf(Array) === -1) {
            debug("VAL HAS NO LENGTH, DELETE IT", val, k, type.indexOf(Array));
            delete data[k];
        } else if (isArray) {
            debug(isArray, data[k], val);
            data[k] = val;
        } else data[k] = val[0];
        debug("k=%s val=%j", k, val, data[k]);
    });
}
function validateString(data, k, val) {
    data[k] = String(val);
}
function validatePath(data, k, val) {
    if (val === true) return false;
    if (val === null) return true;
    val = String(val);
    var isWin = process.platform === "win32", homePattern = isWin ? /^~(\/|\\)/ : /^~\//, home = os.homedir();
    if (home && val.match(homePattern)) data[k] = path.resolve(home, val.substr(2));
    else data[k] = path.resolve(val);
    return true;
}
function validateNumber(data, k, val) {
    debug("validate Number %j %j %j", k, val, isNaN(val));
    if (isNaN(val)) return false;
    data[k] = +val;
}
function validateDate(data, k, val) {
    var s = Date.parse(val);
    debug("validate Date %j %j %j", k, val, s);
    if (isNaN(s)) return false;
    data[k] = new Date(val);
}
function validateBoolean(data, k, val) {
    if (val instanceof Boolean) val = val.valueOf();
    else if (typeof val === "string") {
        if (!isNaN(val)) val = !!+val;
        else if (val === "null" || val === "false") val = false;
        else val = true;
    } else val = !!val;
    data[k] = val;
}
function validateUrl(data, k, val) {
    val = url.parse(String(val));
    if (!val.host) return false;
    data[k] = val.href;
}
function validateStream(data, k, val) {
    if (!(val instanceof Stream)) return false;
    data[k] = val;
}
function validate(data, k, val, type, typeDefs) {
    // arrays are lists of types.
    if (Array.isArray(type)) {
        for(var i = 0, l = type.length; i < l; i++){
            if (type[i] === Array) continue;
            if (validate(data, k, val, type[i], typeDefs)) return true;
        }
        delete data[k];
        return false;
    }
    // an array of anything?
    if (type === Array) return true;
    // NaN is poisonous.  Means that something is not allowed.
    if (type !== type) {
        debug("Poison NaN", k, val, type);
        delete data[k];
        return false;
    }
    // explicit list of values
    if (val === type) {
        debug("Explicitly allowed %j", val);
        // if (isArray) (data[k] = data[k] || []).push(val)
        // else data[k] = val
        data[k] = val;
        return true;
    }
    // now go through the list of typeDefs, validate against each one.
    var ok = false, types = Object.keys(typeDefs);
    for(var i = 0, l = types.length; i < l; i++){
        debug("test type %j %j %j", k, val, types[i]);
        var t = typeDefs[types[i]];
        if (t && (type && type.name && t.type && t.type.name ? type.name === t.type.name : type === t.type)) {
            var d = {};
            ok = false !== t.validate(d, k, val);
            val = d[k];
            if (ok) {
                // if (isArray) (data[k] = data[k] || []).push(val)
                // else data[k] = val
                data[k] = val;
                break;
            }
        }
    }
    debug("OK? %j (%j %j %j)", ok, k, val, types[i]);
    if (!ok) delete data[k];
    return ok;
}
function parse(args, data, remain, types, shorthands) {
    debug("parse", args, data, remain);
    var key = null, abbrevs = abbrev(Object.keys(types)), shortAbbr = abbrev(Object.keys(shorthands));
    for(var i = 0; i < args.length; i++){
        var arg = args[i];
        debug("arg", arg);
        if (arg.match(/^-{2,}$/)) {
            // done with keys.
            // the rest are args.
            remain.push.apply(remain, args.slice(i + 1));
            args[i] = "--";
            break;
        }
        var hadEq = false;
        if (arg.charAt(0) === "-" && arg.length > 1) {
            var at = arg.indexOf("=");
            if (at > -1) {
                hadEq = true;
                var v = arg.substr(at + 1);
                arg = arg.substr(0, at);
                args.splice(i, 1, arg, v);
            }
            // see if it's a shorthand
            // if so, splice and back up to re-parse it.
            var shRes = resolveShort(arg, shorthands, shortAbbr, abbrevs);
            debug("arg=%j shRes=%j", arg, shRes);
            if (shRes) {
                debug(arg, shRes);
                args.splice.apply(args, [
                    i,
                    1
                ].concat(shRes));
                if (arg !== shRes[0]) {
                    i--;
                    continue;
                }
            }
            arg = arg.replace(/^-+/, "");
            var no = null;
            while(arg.toLowerCase().indexOf("no-") === 0){
                no = !no;
                arg = arg.substr(3);
            }
            if (abbrevs[arg]) arg = abbrevs[arg];
            var argType = types[arg];
            var isTypeArray = Array.isArray(argType);
            if (isTypeArray && argType.length === 1) {
                isTypeArray = false;
                argType = argType[0];
            }
            var isArray = argType === Array || isTypeArray && argType.indexOf(Array) !== -1;
            // allow unknown things to be arrays if specified multiple times.
            if (!types.hasOwnProperty(arg) && data.hasOwnProperty(arg)) {
                if (!Array.isArray(data[arg])) data[arg] = [
                    data[arg]
                ];
                isArray = true;
            }
            var val, la = args[i + 1];
            var isBool = typeof no === "boolean" || argType === Boolean || isTypeArray && argType.indexOf(Boolean) !== -1 || typeof argType === "undefined" && !hadEq || la === "false" && (argType === null || isTypeArray && ~argType.indexOf(null));
            if (isBool) {
                // just set and move along
                val = !no;
                // however, also support --bool true or --bool false
                if (la === "true" || la === "false") {
                    val = JSON.parse(la);
                    la = null;
                    if (no) val = !val;
                    i++;
                }
                // also support "foo":[Boolean, "bar"] and "--foo bar"
                if (isTypeArray && la) {
                    if (~argType.indexOf(la)) {
                        // an explicit type
                        val = la;
                        i++;
                    } else if (la === "null" && ~argType.indexOf(null)) {
                        // null allowed
                        val = null;
                        i++;
                    } else if (!la.match(/^-{2,}[^-]/) && !isNaN(la) && ~argType.indexOf(Number)) {
                        // number
                        val = +la;
                        i++;
                    } else if (!la.match(/^-[^-]/) && ~argType.indexOf(String)) {
                        // string
                        val = la;
                        i++;
                    }
                }
                if (isArray) (data[arg] = data[arg] || []).push(val);
                else data[arg] = val;
                continue;
            }
            if (argType === String) {
                if (la === undefined) la = "";
                else if (la.match(/^-{1,2}[^-]+/)) {
                    la = "";
                    i--;
                }
            }
            if (la && la.match(/^-{2,}$/)) {
                la = undefined;
                i--;
            }
            val = la === undefined ? true : la;
            if (isArray) (data[arg] = data[arg] || []).push(val);
            else data[arg] = val;
            i++;
            continue;
        }
        remain.push(arg);
    }
}
function resolveShort(arg, shorthands, shortAbbr, abbrevs) {
    // handle single-char shorthands glommed together, like
    // npm ls -glp, but only if there is one dash, and only if
    // all of the chars are single-char shorthands, and it's
    // not a match to some other abbrev.
    arg = arg.replace(/^-+/, "");
    // if it's an exact known option, then don't go any further
    if (abbrevs[arg] === arg) return null;
    // if it's an exact known shortopt, same deal
    if (shorthands[arg]) {
        // make it an array, if it's a list of words
        if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
        return shorthands[arg];
    }
    // first check to see if this arg is a set of single-char shorthands
    var singles = shorthands.___singles;
    if (!singles) {
        singles = Object.keys(shorthands).filter(function(s) {
            return s.length === 1;
        }).reduce(function(l, r) {
            l[r] = true;
            return l;
        }, {});
        shorthands.___singles = singles;
        debug("shorthand singles", singles);
    }
    var chrs = arg.split("").filter(function(c) {
        return singles[c];
    });
    if (chrs.join("") === arg) return chrs.map(function(c) {
        return shorthands[c];
    }).reduce(function(l, r) {
        return l.concat(r);
    }, []);
    // if it's an arg abbrev, and not a literal shorthand, then prefer the arg
    if (abbrevs[arg] && !shorthands[arg]) return null;
    // if it's an abbr for a shorthand, then use that
    if (shortAbbr[arg]) arg = shortAbbr[arg];
    // make it an array, if it's a list of words
    if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
    return shorthands[arg];
}

},{"77f26314557ad495":"kKEHw","e8fe120c7eae7f0d":"e4taF","ac7cd467759d5e11":"i1BLo","8a0f44dff47ed427":"kE3Co","2b9a0a9686eb667d":"8XQPG","b6754c913cca81b8":"fKYkW"}],"kE3Co":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("96b62835346f84f0").EventEmitter;
var inherits = require("4a6ee9586f51c38d");
inherits(Stream, EE);
Stream.Readable = require("e6206e1f4d20abc7");
Stream.Writable = require("a3f1405f37e1dfb1");
Stream.Duplex = require("6691a72c5fc222fd");
Stream.Transform = require("43a905ce7ec6ac9e");
Stream.PassThrough = require("dd715550d7783885");
Stream.finished = require("d90a3520974ec96e");
Stream.pipeline = require("eb2779cfd287c5c9");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"96b62835346f84f0":"gIDbZ","4a6ee9586f51c38d":"8TdOm","e6206e1f4d20abc7":"ft7NW","a3f1405f37e1dfb1":"lDhM4","6691a72c5fc222fd":"2O1mu","43a905ce7ec6ac9e":"bWfxs","dd715550d7783885":"2gBOV","d90a3520974ec96e":"ci7Oj","eb2779cfd287c5c9":"9QZGO"}],"gIDbZ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"ft7NW":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("896ff8d56553f7a");
"use strict";
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("16782d660ac22e0c").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("9a34f23fa53f83f7");
/*</replacement>*/ var Buffer = require("fb95ecaa88342eae").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("a4a723b7297c7152");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("7a14cc1689b8c63e");
var destroyImpl = require("efa8155386cc4283");
var _require = require("994c984d08c7bbf2"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("8de60461b822641b").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("19affa8ce41f090d")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function nReadingNextTick(self1) {
    debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("830c56f840811f05");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("7451b8c4bf72370");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"896ff8d56553f7a":"kKEHw","16782d660ac22e0c":"gIDbZ","9a34f23fa53f83f7":"fuqLG","fb95ecaa88342eae":"ei9Vu","a4a723b7297c7152":"4oI9L","7a14cc1689b8c63e":"6NHHg","efa8155386cc4283":"Wpd9Y","994c984d08c7bbf2":"dPjNM","8de60461b822641b":"9OwDo","19affa8ce41f090d":"8TdOm","f1c95f846e94e4eb":"2O1mu","6392acd10886f115":"diZOT","830c56f840811f05":"lchAN","7451b8c4bf72370":"Qee2w"}],"fuqLG":[function(require,module,exports) {
module.exports = require("ed88fc9aa73f911").EventEmitter;

},{"ed88fc9aa73f911":"gIDbZ"}],"6NHHg":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require("59f5d0111b7fa075"), Buffer = _require.Buffer;
var _require2 = require("eef6a677577349b8"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"59f5d0111b7fa075":"ei9Vu","eef6a677577349b8":"4oI9L"}],"Wpd9Y":[function(require,module,exports) {
var process = require("4284522496af5dfb");
"use strict";
// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"4284522496af5dfb":"kKEHw"}],"dPjNM":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("4e508d569e2117ef").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"4e508d569e2117ef":"9OwDo"}],"9OwDo":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"2O1mu":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
var process = require("2ab1115635c50a9f");
"use strict";
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("68a7582259cd5865");
var Writable = require("93d042f8bb80078e");
require("aa7b11ba5bf4defc")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"2ab1115635c50a9f":"kKEHw","68a7582259cd5865":"ft7NW","93d042f8bb80078e":"lDhM4","aa7b11ba5bf4defc":"8TdOm"}],"lDhM4":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
var process = require("f05a2a5a09d4d8b0");
"use strict";
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("dc51171b07b54af1")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("44a3cc22ec64fcd3");
/*</replacement>*/ var Buffer = require("de8f7fb7ccda8086").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("acf48fb5d9dc6204");
var _require = require("9d146cd974da0f53"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("3c574b8881abcf86").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("10dad555ffe77dde")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"f05a2a5a09d4d8b0":"kKEHw","dc51171b07b54af1":"aLnN7","44a3cc22ec64fcd3":"fuqLG","de8f7fb7ccda8086":"ei9Vu","acf48fb5d9dc6204":"Wpd9Y","9d146cd974da0f53":"dPjNM","3c574b8881abcf86":"9OwDo","10dad555ffe77dde":"8TdOm","c5e7171d6f58d3c0":"2O1mu"}],"aLnN7":[function(require,module,exports) {
/**
 * Module exports.
 */ var global = arguments[3];
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"diZOT":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("2a29807c689a070a").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"2a29807c689a070a":"50M8v"}],"50M8v":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("7e0d6ecd698c3ca6");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"7e0d6ecd698c3ca6":"ei9Vu"}],"lchAN":[function(require,module,exports) {
var process = require("96b869862a96261a");
"use strict";
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require("745a3cd8f6469ed5");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"96b869862a96261a":"kKEHw","745a3cd8f6469ed5":"ci7Oj"}],"ci7Oj":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("d35458f585bdd360").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"d35458f585bdd360":"9OwDo"}],"Qee2w":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"bWfxs":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("baab47252aa06434").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("db11ebf938e536ed");
require("82049677fa603d40")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"baab47252aa06434":"9OwDo","db11ebf938e536ed":"2O1mu","82049677fa603d40":"8TdOm"}],"2gBOV":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("7ab21291895ec3d2");
require("f24ec1883eef5e9b")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"7ab21291895ec3d2":"bWfxs","f24ec1883eef5e9b":"8TdOm"}],"9QZGO":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("6ba21bd580ac7d57").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("dd7fd89dd81b8674");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"6ba21bd580ac7d57":"9OwDo","dd7fd89dd81b8674":"ci7Oj"}],"8XQPG":[function(require,module,exports) {
module.exports = exports = abbrev.abbrev = abbrev;
abbrev.monkeyPatch = monkeyPatch;
function monkeyPatch() {
    Object.defineProperty(Array.prototype, "abbrev", {
        value: function() {
            return abbrev(this);
        },
        enumerable: false,
        configurable: true,
        writable: true
    });
    Object.defineProperty(Object.prototype, "abbrev", {
        value: function() {
            return abbrev(Object.keys(this));
        },
        enumerable: false,
        configurable: true,
        writable: true
    });
}
function abbrev(list) {
    if (arguments.length !== 1 || !Array.isArray(list)) list = Array.prototype.slice.call(arguments, 0);
    for(var i = 0, l = list.length, args = []; i < l; i++)args[i] = typeof list[i] === "string" ? list[i] : String(list[i]);
    // sort them lexicographically, so that they're next to their nearest kin
    args = args.sort(lexSort);
    // walk through each, seeing how much it has in common with the next and previous
    var abbrevs = {}, prev = "";
    for(var i = 0, l = args.length; i < l; i++){
        var current = args[i], next = args[i + 1] || "", nextMatches = true, prevMatches = true;
        if (current === next) continue;
        for(var j = 0, cl = current.length; j < cl; j++){
            var curChar = current.charAt(j);
            nextMatches = nextMatches && curChar === next.charAt(j);
            prevMatches = prevMatches && curChar === prev.charAt(j);
            if (!nextMatches && !prevMatches) {
                j++;
                break;
            }
        }
        prev = current;
        if (j === cl) {
            abbrevs[current] = current;
            continue;
        }
        for(var a = current.substr(0, j); j <= cl; j++){
            abbrevs[a] = current;
            a += current.charAt(j);
        }
    }
    return abbrevs;
}
function lexSort(a, b) {
    return a === b ? 0 : a > b ? 1 : -1;
}

},{}],"jN8cz":[function(require,module,exports) {
var process = require("1b61e9780e237c07");
"use strict";
var Progress = require("bfa876a41d25bb54");
var Gauge = require("ac4afe1b420a5d2b");
var EE = require("ef521b678a537a18").EventEmitter;
var log = exports = module.exports = new EE();
var util = require("49161d6c6b83893e");
var setBlocking = require("a6a3c49320544db");
var consoleControl = require("bb0c774fc4a6e4d3");
setBlocking(true);
var stream = process.stderr;
Object.defineProperty(log, "stream", {
    set: function(newStream) {
        stream = newStream;
        if (this.gauge) this.gauge.setWriteTo(stream, stream);
    },
    get: function() {
        return stream;
    }
});
// by default, decide based on tty-ness.
var colorEnabled;
log.useColor = function() {
    return colorEnabled != null ? colorEnabled : stream.isTTY;
};
log.enableColor = function() {
    colorEnabled = true;
    this.gauge.setTheme({
        hasColor: colorEnabled,
        hasUnicode: unicodeEnabled
    });
};
log.disableColor = function() {
    colorEnabled = false;
    this.gauge.setTheme({
        hasColor: colorEnabled,
        hasUnicode: unicodeEnabled
    });
};
// default level
log.level = "info";
log.gauge = new Gauge(stream, {
    enabled: false,
    theme: {
        hasColor: log.useColor()
    },
    template: [
        {
            type: "progressbar",
            length: 20
        },
        {
            type: "activityIndicator",
            kerning: 1,
            length: 1
        },
        {
            type: "section",
            default: ""
        },
        ":",
        {
            type: "logline",
            kerning: 1,
            default: ""
        }
    ]
});
log.tracker = new Progress.TrackerGroup();
// we track this separately as we may need to temporarily disable the
// display of the status bar for our own loggy purposes.
log.progressEnabled = log.gauge.isEnabled();
var unicodeEnabled;
log.enableUnicode = function() {
    unicodeEnabled = true;
    this.gauge.setTheme({
        hasColor: this.useColor(),
        hasUnicode: unicodeEnabled
    });
};
log.disableUnicode = function() {
    unicodeEnabled = false;
    this.gauge.setTheme({
        hasColor: this.useColor(),
        hasUnicode: unicodeEnabled
    });
};
log.setGaugeThemeset = function(themes) {
    this.gauge.setThemeset(themes);
};
log.setGaugeTemplate = function(template) {
    this.gauge.setTemplate(template);
};
log.enableProgress = function() {
    if (this.progressEnabled) return;
    this.progressEnabled = true;
    this.tracker.on("change", this.showProgress);
    if (this._paused) return;
    this.gauge.enable();
};
log.disableProgress = function() {
    if (!this.progressEnabled) return;
    this.progressEnabled = false;
    this.tracker.removeListener("change", this.showProgress);
    this.gauge.disable();
};
var trackerConstructors = [
    "newGroup",
    "newItem",
    "newStream"
];
var mixinLog = function(tracker) {
    // mixin the public methods from log into the tracker
    // (except: conflicts and one's we handle specially)
    Object.keys(log).forEach(function(P) {
        if (P[0] === "_") return;
        if (trackerConstructors.filter(function(C) {
            return C === P;
        }).length) return;
        if (tracker[P]) return;
        if (typeof log[P] !== "function") return;
        var func = log[P];
        tracker[P] = function() {
            return func.apply(log, arguments);
        };
    });
    // if the new tracker is a group, make sure any subtrackers get
    // mixed in too
    if (tracker instanceof Progress.TrackerGroup) trackerConstructors.forEach(function(C) {
        var func = tracker[C];
        tracker[C] = function() {
            return mixinLog(func.apply(tracker, arguments));
        };
    });
    return tracker;
};
// Add tracker constructors to the top level log object
trackerConstructors.forEach(function(C) {
    log[C] = function() {
        return mixinLog(this.tracker[C].apply(this.tracker, arguments));
    };
});
log.clearProgress = function(cb) {
    if (!this.progressEnabled) return cb && process.nextTick(cb);
    this.gauge.hide(cb);
};
log.showProgress = (function(name, completed) {
    if (!this.progressEnabled) return;
    var values = {};
    if (name) values.section = name;
    var last = log.record[log.record.length - 1];
    if (last) {
        values.subsection = last.prefix;
        var disp = log.disp[last.level] || last.level;
        var logline = this._format(disp, log.style[last.level]);
        if (last.prefix) logline += " " + this._format(last.prefix, this.prefixStyle);
        logline += " " + last.message.split(/\r?\n/)[0];
        values.logline = logline;
    }
    values.completed = completed || this.tracker.completed();
    this.gauge.show(values);
}).bind(log) // bind for use in tracker's on-change listener
;
// temporarily stop emitting, but don't drop
log.pause = function() {
    this._paused = true;
    if (this.progressEnabled) this.gauge.disable();
};
log.resume = function() {
    if (!this._paused) return;
    this._paused = false;
    var b = this._buffer;
    this._buffer = [];
    b.forEach(function(m) {
        this.emitLog(m);
    }, this);
    if (this.progressEnabled) this.gauge.enable();
};
log._buffer = [];
var id = 0;
log.record = [];
log.maxRecordSize = 10000;
log.log = (function(lvl, prefix, message) {
    var l = this.levels[lvl];
    if (l === undefined) return this.emit("error", new Error(util.format("Undefined log level: %j", lvl)));
    var a = new Array(arguments.length - 2);
    var stack = null;
    for(var i = 2; i < arguments.length; i++){
        var arg = a[i - 2] = arguments[i];
        // resolve stack traces to a plain string.
        if (typeof arg === "object" && arg instanceof Error && arg.stack) Object.defineProperty(arg, "stack", {
            value: stack = arg.stack + "",
            enumerable: true,
            writable: true
        });
    }
    if (stack) a.unshift(stack + "\n");
    message = util.format.apply(util, a);
    var m = {
        id: id++,
        level: lvl,
        prefix: String(prefix || ""),
        message: message,
        messageRaw: a
    };
    this.emit("log", m);
    this.emit("log." + lvl, m);
    if (m.prefix) this.emit(m.prefix, m);
    this.record.push(m);
    var mrs = this.maxRecordSize;
    var n = this.record.length - mrs;
    if (n > mrs / 10) {
        var newSize = Math.floor(mrs * 0.9);
        this.record = this.record.slice(-1 * newSize);
    }
    this.emitLog(m);
}).bind(log);
log.emitLog = function(m) {
    if (this._paused) {
        this._buffer.push(m);
        return;
    }
    if (this.progressEnabled) this.gauge.pulse(m.prefix);
    var l = this.levels[m.level];
    if (l === undefined) return;
    if (l < this.levels[this.level]) return;
    if (l > 0 && !isFinite(l)) return;
    // If 'disp' is null or undefined, use the lvl as a default
    // Allows: '', 0 as valid disp
    var disp = log.disp[m.level] != null ? log.disp[m.level] : m.level;
    this.clearProgress();
    m.message.split(/\r?\n/).forEach(function(line) {
        if (this.heading) {
            this.write(this.heading, this.headingStyle);
            this.write(" ");
        }
        this.write(disp, log.style[m.level]);
        var p = m.prefix || "";
        if (p) this.write(" ");
        this.write(p, this.prefixStyle);
        this.write(" " + line + "\n");
    }, this);
    this.showProgress();
};
log._format = function(msg, style) {
    if (!stream) return;
    var output = "";
    if (this.useColor()) {
        style = style || {};
        var settings = [];
        if (style.fg) settings.push(style.fg);
        if (style.bg) settings.push("bg" + style.bg[0].toUpperCase() + style.bg.slice(1));
        if (style.bold) settings.push("bold");
        if (style.underline) settings.push("underline");
        if (style.inverse) settings.push("inverse");
        if (settings.length) output += consoleControl.color(settings);
        if (style.beep) output += consoleControl.beep();
    }
    output += msg;
    if (this.useColor()) output += consoleControl.color("reset");
    return output;
};
log.write = function(msg, style) {
    if (!stream) return;
    stream.write(this._format(msg, style));
};
log.addLevel = function(lvl, n, style, disp) {
    // If 'disp' is null or undefined, use the lvl as a default
    if (disp == null) disp = lvl;
    this.levels[lvl] = n;
    this.style[lvl] = style;
    if (!this[lvl]) this[lvl] = (function() {
        var a = new Array(arguments.length + 1);
        a[0] = lvl;
        for(var i = 0; i < arguments.length; i++)a[i + 1] = arguments[i];
        return this.log.apply(this, a);
    }).bind(this);
    this.disp[lvl] = disp;
};
log.prefixStyle = {
    fg: "magenta"
};
log.headingStyle = {
    fg: "white",
    bg: "black"
};
log.style = {};
log.levels = {};
log.disp = {};
log.addLevel("silly", -Infinity, {
    inverse: true
}, "sill");
log.addLevel("verbose", 1000, {
    fg: "blue",
    bg: "black"
}, "verb");
log.addLevel("info", 2000, {
    fg: "green"
});
log.addLevel("timing", 2500, {
    fg: "green",
    bg: "black"
});
log.addLevel("http", 3000, {
    fg: "green",
    bg: "black"
});
log.addLevel("notice", 3500, {
    fg: "blue",
    bg: "black"
});
log.addLevel("warn", 4000, {
    fg: "black",
    bg: "yellow"
}, "WARN");
log.addLevel("error", 5000, {
    fg: "red",
    bg: "black"
}, "ERR!");
log.addLevel("silent", Infinity);
// allow 'error' prefix
log.on("error", function() {});

},{"1b61e9780e237c07":"kKEHw","bfa876a41d25bb54":"brbIr","ac4afe1b420a5d2b":"3Rjkt","ef521b678a537a18":"gIDbZ","49161d6c6b83893e":"h4AnS","a6a3c49320544db":"2DEIS","bb0c774fc4a6e4d3":"dfAAb"}],"brbIr":[function(require,module,exports) {
"use strict";
exports.TrackerGroup = require("9ddef2f076a910d5");
exports.Tracker = require("40f1dab31b3b16e");
exports.TrackerStream = require("5bd77203605d88c7");

},{"9ddef2f076a910d5":"2vZrP","40f1dab31b3b16e":"7jfI8","5bd77203605d88c7":"gGGt8"}],"2vZrP":[function(require,module,exports) {
"use strict";
var util = require("e158d8c6cd454049");
var TrackerBase = require("6f7874754516f92c");
var Tracker = require("54f55dbc7d5acdc8");
var TrackerStream = require("34ebc0d9f2c7d90e");
var TrackerGroup = module.exports = function(name) {
    TrackerBase.call(this, name);
    this.parentGroup = null;
    this.trackers = [];
    this.completion = {};
    this.weight = {};
    this.totalWeight = 0;
    this.finished = false;
    this.bubbleChange = bubbleChange(this);
};
util.inherits(TrackerGroup, TrackerBase);
function bubbleChange(trackerGroup) {
    return function(name, completed, tracker) {
        trackerGroup.completion[tracker.id] = completed;
        if (trackerGroup.finished) return;
        trackerGroup.emit("change", name || trackerGroup.name, trackerGroup.completed(), trackerGroup);
    };
}
TrackerGroup.prototype.nameInTree = function() {
    var names = [];
    var from = this;
    while(from){
        names.unshift(from.name);
        from = from.parentGroup;
    }
    return names.join("/");
};
TrackerGroup.prototype.addUnit = function(unit, weight) {
    if (unit.addUnit) {
        var toTest = this;
        while(toTest){
            if (unit === toTest) throw new Error("Attempted to add tracker group " + unit.name + " to tree that already includes it " + this.nameInTree(this));
            toTest = toTest.parentGroup;
        }
        unit.parentGroup = this;
    }
    this.weight[unit.id] = weight || 1;
    this.totalWeight += this.weight[unit.id];
    this.trackers.push(unit);
    this.completion[unit.id] = unit.completed();
    unit.on("change", this.bubbleChange);
    if (!this.finished) this.emit("change", unit.name, this.completion[unit.id], unit);
    return unit;
};
TrackerGroup.prototype.completed = function() {
    if (this.trackers.length === 0) return 0;
    var valPerWeight = 1 / this.totalWeight;
    var completed = 0;
    for(var ii = 0; ii < this.trackers.length; ii++){
        var trackerId = this.trackers[ii].id;
        completed += valPerWeight * this.weight[trackerId] * this.completion[trackerId];
    }
    return completed;
};
TrackerGroup.prototype.newGroup = function(name, weight) {
    return this.addUnit(new TrackerGroup(name), weight);
};
TrackerGroup.prototype.newItem = function(name, todo, weight) {
    return this.addUnit(new Tracker(name, todo), weight);
};
TrackerGroup.prototype.newStream = function(name, todo, weight) {
    return this.addUnit(new TrackerStream(name, todo), weight);
};
TrackerGroup.prototype.finish = function() {
    this.finished = true;
    if (!this.trackers.length) this.addUnit(new Tracker(), 1, true);
    for(var ii = 0; ii < this.trackers.length; ii++){
        var tracker = this.trackers[ii];
        tracker.finish();
        tracker.removeListener("change", this.bubbleChange);
    }
    this.emit("change", this.name, 1, this);
};
var buffer = "                                  ";
TrackerGroup.prototype.debug = function(depth) {
    depth = depth || 0;
    var indent = depth ? buffer.substr(0, depth) : "";
    var output = indent + (this.name || "top") + ": " + this.completed() + "\n";
    this.trackers.forEach(function(tracker) {
        if (tracker instanceof TrackerGroup) output += tracker.debug(depth + 1);
        else output += indent + " " + tracker.name + ": " + tracker.completed() + "\n";
    });
    return output;
};

},{"e158d8c6cd454049":"h4AnS","6f7874754516f92c":"6lSQg","54f55dbc7d5acdc8":"7jfI8","34ebc0d9f2c7d90e":"gGGt8"}],"6lSQg":[function(require,module,exports) {
"use strict";
var EventEmitter = require("1c7144cc7bdf4a47").EventEmitter;
var util = require("317b8ce4549cbd2");
var trackerId = 0;
var TrackerBase = module.exports = function(name) {
    EventEmitter.call(this);
    this.id = ++trackerId;
    this.name = name;
};
util.inherits(TrackerBase, EventEmitter);

},{"1c7144cc7bdf4a47":"gIDbZ","317b8ce4549cbd2":"h4AnS"}],"7jfI8":[function(require,module,exports) {
"use strict";
var util = require("625f3035a3b2fb42");
var TrackerBase = require("e5e84c3dae2cf434");
var Tracker = module.exports = function(name, todo) {
    TrackerBase.call(this, name);
    this.workDone = 0;
    this.workTodo = todo || 0;
};
util.inherits(Tracker, TrackerBase);
Tracker.prototype.completed = function() {
    return this.workTodo === 0 ? 0 : this.workDone / this.workTodo;
};
Tracker.prototype.addWork = function(work) {
    this.workTodo += work;
    this.emit("change", this.name, this.completed(), this);
};
Tracker.prototype.completeWork = function(work) {
    this.workDone += work;
    if (this.workDone > this.workTodo) this.workDone = this.workTodo;
    this.emit("change", this.name, this.completed(), this);
};
Tracker.prototype.finish = function() {
    this.workTodo = this.workDone = 1;
    this.emit("change", this.name, 1, this);
};

},{"625f3035a3b2fb42":"h4AnS","e5e84c3dae2cf434":"6lSQg"}],"gGGt8":[function(require,module,exports) {
"use strict";
var util = require("43ab61052195d19e");
var stream = require("4ec1053e82ef07b7");
var delegate = require("eaa42d2cdb1cb217");
var Tracker = require("535968accf7561df");
var TrackerStream = module.exports = function(name, size, options) {
    stream.Transform.call(this, options);
    this.tracker = new Tracker(name, size);
    this.name = name;
    this.id = this.tracker.id;
    this.tracker.on("change", delegateChange(this));
};
util.inherits(TrackerStream, stream.Transform);
function delegateChange(trackerStream) {
    return function(name, completion, tracker) {
        trackerStream.emit("change", name, completion, trackerStream);
    };
}
TrackerStream.prototype._transform = function(data, encoding, cb) {
    this.tracker.completeWork(data.length ? data.length : 1);
    this.push(data);
    cb();
};
TrackerStream.prototype._flush = function(cb) {
    this.tracker.finish();
    cb();
};
delegate(TrackerStream.prototype, "tracker").method("completed").method("addWork").method("finish");

},{"43ab61052195d19e":"h4AnS","4ec1053e82ef07b7":"aIy8Y","eaa42d2cdb1cb217":"lz50T","535968accf7561df":"7jfI8"}],"aIy8Y":[function(require,module,exports) {
exports = module.exports = require("68bb3bdae87803ec");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("74167f79b688eaf7");
exports.Duplex = require("84600f6783428a47");
exports.Transform = require("23bee5f697448a0");
exports.PassThrough = require("e0ec4b8e438dbbd");
exports.finished = require("6cc0f9af7147cdbc");
exports.pipeline = require("f90db22d01d3c3d1");

},{"68bb3bdae87803ec":"ft7NW","74167f79b688eaf7":"lDhM4","84600f6783428a47":"2O1mu","23bee5f697448a0":"bWfxs","e0ec4b8e438dbbd":"2gBOV","6cc0f9af7147cdbc":"ci7Oj","f90db22d01d3c3d1":"9QZGO"}],"lz50T":[function(require,module,exports) {
/**
 * Expose `Delegator`.
 */ module.exports = Delegator;
/**
 * Initialize a delegator.
 *
 * @param {Object} proto
 * @param {String} target
 * @api public
 */ function Delegator(proto, target) {
    if (!(this instanceof Delegator)) return new Delegator(proto, target);
    this.proto = proto;
    this.target = target;
    this.methods = [];
    this.getters = [];
    this.setters = [];
    this.fluents = [];
}
/**
 * Delegate method `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */ Delegator.prototype.method = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.methods.push(name);
    proto[name] = function() {
        return this[target][name].apply(this[target], arguments);
    };
    return this;
};
/**
 * Delegator accessor `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */ Delegator.prototype.access = function(name) {
    return this.getter(name).setter(name);
};
/**
 * Delegator getter `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */ Delegator.prototype.getter = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.getters.push(name);
    proto.__defineGetter__(name, function() {
        return this[target][name];
    });
    return this;
};
/**
 * Delegator setter `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */ Delegator.prototype.setter = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.setters.push(name);
    proto.__defineSetter__(name, function(val) {
        return this[target][name] = val;
    });
    return this;
};
/**
 * Delegator fluent accessor
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */ Delegator.prototype.fluent = function(name) {
    var proto = this.proto;
    var target = this.target;
    this.fluents.push(name);
    proto[name] = function(val) {
        if ("undefined" != typeof val) {
            this[target][name] = val;
            return this;
        } else return this[target][name];
    };
    return this;
};

},{}],"3Rjkt":[function(require,module,exports) {
"use strict";
var Plumbing = require("92ebc6c86bec998a");
var hasUnicode = require("ddf485d6d4b5cd0e");
var hasColor = require("18883af14491be4d");
var onExit = require("33d0a3f8367ebecf");
var defaultThemes = require("765791dd7162a027");
var setInterval = require("9be787e5af5e50b7");
var process = require("b79544f6a539575a");
var setImmediate = require("88d8d6b03d50104");
module.exports = Gauge;
function callWith(obj, method) {
    return function() {
        return method.call(obj);
    };
}
function Gauge(arg1, arg2) {
    var options, writeTo;
    if (arg1 && arg1.write) {
        writeTo = arg1;
        options = arg2 || {};
    } else if (arg2 && arg2.write) {
        writeTo = arg2;
        options = arg1 || {};
    } else {
        writeTo = process.stderr;
        options = arg1 || arg2 || {};
    }
    this._status = {
        spun: 0,
        section: "",
        subsection: ""
    };
    this._paused = false // are we paused for back pressure?
    ;
    this._disabled = true // are all progress bar updates disabled?
    ;
    this._showing = false // do we WANT the progress bar on screen
    ;
    this._onScreen = false // IS the progress bar on screen
    ;
    this._needsRedraw = false // should we print something at next tick?
    ;
    this._hideCursor = options.hideCursor == null ? true : options.hideCursor;
    this._fixedFramerate = options.fixedFramerate == null ? !/^v0\.8\./.test(process.version) : options.fixedFramerate;
    this._lastUpdateAt = null;
    this._updateInterval = options.updateInterval == null ? 50 : options.updateInterval;
    this._themes = options.themes || defaultThemes;
    this._theme = options.theme;
    var theme = this._computeTheme(options.theme);
    var template = options.template || [
        {
            type: "progressbar",
            length: 20
        },
        {
            type: "activityIndicator",
            kerning: 1,
            length: 1
        },
        {
            type: "section",
            kerning: 1,
            default: ""
        },
        {
            type: "subsection",
            kerning: 1,
            default: ""
        }
    ];
    this.setWriteTo(writeTo, options.tty);
    var PlumbingClass = options.Plumbing || Plumbing;
    this._gauge = new PlumbingClass(theme, template, this.getWidth());
    this._$$doRedraw = callWith(this, this._doRedraw);
    this._$$handleSizeChange = callWith(this, this._handleSizeChange);
    this._cleanupOnExit = options.cleanupOnExit == null || options.cleanupOnExit;
    this._removeOnExit = null;
    if (options.enabled || options.enabled == null && this._tty && this._tty.isTTY) this.enable();
    else this.disable();
}
Gauge.prototype = {};
Gauge.prototype.isEnabled = function() {
    return !this._disabled;
};
Gauge.prototype.setTemplate = function(template) {
    this._gauge.setTemplate(template);
    if (this._showing) this._requestRedraw();
};
Gauge.prototype._computeTheme = function(theme) {
    if (!theme) theme = {};
    if (typeof theme === "string") theme = this._themes.getTheme(theme);
    else if (theme && (Object.keys(theme).length === 0 || theme.hasUnicode != null || theme.hasColor != null)) {
        var useUnicode = theme.hasUnicode == null ? hasUnicode() : theme.hasUnicode;
        var useColor = theme.hasColor == null ? hasColor : theme.hasColor;
        theme = this._themes.getDefault({
            hasUnicode: useUnicode,
            hasColor: useColor,
            platform: theme.platform
        });
    }
    return theme;
};
Gauge.prototype.setThemeset = function(themes) {
    this._themes = themes;
    this.setTheme(this._theme);
};
Gauge.prototype.setTheme = function(theme) {
    this._gauge.setTheme(this._computeTheme(theme));
    if (this._showing) this._requestRedraw();
    this._theme = theme;
};
Gauge.prototype._requestRedraw = function() {
    this._needsRedraw = true;
    if (!this._fixedFramerate) this._doRedraw();
};
Gauge.prototype.getWidth = function() {
    return (this._tty && this._tty.columns || 80) - 1;
};
Gauge.prototype.setWriteTo = function(writeTo, tty) {
    var enabled = !this._disabled;
    if (enabled) this.disable();
    this._writeTo = writeTo;
    this._tty = tty || writeTo === process.stderr && process.stdout.isTTY && process.stdout || writeTo.isTTY && writeTo || this._tty;
    if (this._gauge) this._gauge.setWidth(this.getWidth());
    if (enabled) this.enable();
};
Gauge.prototype.enable = function() {
    if (!this._disabled) return;
    this._disabled = false;
    if (this._tty) this._enableEvents();
    if (this._showing) this.show();
};
Gauge.prototype.disable = function() {
    if (this._disabled) return;
    if (this._showing) {
        this._lastUpdateAt = null;
        this._showing = false;
        this._doRedraw();
        this._showing = true;
    }
    this._disabled = true;
    if (this._tty) this._disableEvents();
};
Gauge.prototype._enableEvents = function() {
    if (this._cleanupOnExit) this._removeOnExit = onExit(callWith(this, this.disable));
    this._tty.on("resize", this._$$handleSizeChange);
    if (this._fixedFramerate) {
        this.redrawTracker = setInterval(this._$$doRedraw, this._updateInterval);
        if (this.redrawTracker.unref) this.redrawTracker.unref();
    }
};
Gauge.prototype._disableEvents = function() {
    this._tty.removeListener("resize", this._$$handleSizeChange);
    if (this._fixedFramerate) clearInterval(this.redrawTracker);
    if (this._removeOnExit) this._removeOnExit();
};
Gauge.prototype.hide = function(cb) {
    if (this._disabled) return cb && process.nextTick(cb);
    if (!this._showing) return cb && process.nextTick(cb);
    this._showing = false;
    this._doRedraw();
    cb && setImmediate(cb);
};
Gauge.prototype.show = function(section, completed) {
    this._showing = true;
    if (typeof section === "string") this._status.section = section;
    else if (typeof section === "object") {
        var sectionKeys = Object.keys(section);
        for(var ii = 0; ii < sectionKeys.length; ++ii){
            var key = sectionKeys[ii];
            this._status[key] = section[key];
        }
    }
    if (completed != null) this._status.completed = completed;
    if (this._disabled) return;
    this._requestRedraw();
};
Gauge.prototype.pulse = function(subsection) {
    this._status.subsection = subsection || "";
    this._status.spun++;
    if (this._disabled) return;
    if (!this._showing) return;
    this._requestRedraw();
};
Gauge.prototype._handleSizeChange = function() {
    this._gauge.setWidth(this._tty.columns - 1);
    this._requestRedraw();
};
Gauge.prototype._doRedraw = function() {
    if (this._disabled || this._paused) return;
    if (!this._fixedFramerate) {
        var now = Date.now();
        if (this._lastUpdateAt && now - this._lastUpdateAt < this._updateInterval) return;
        this._lastUpdateAt = now;
    }
    if (!this._showing && this._onScreen) {
        this._onScreen = false;
        var result = this._gauge.hide();
        if (this._hideCursor) result += this._gauge.showCursor();
        return this._writeTo.write(result);
    }
    if (!this._showing && !this._onScreen) return;
    if (this._showing && !this._onScreen) {
        this._onScreen = true;
        this._needsRedraw = true;
        if (this._hideCursor) this._writeTo.write(this._gauge.hideCursor());
    }
    if (!this._needsRedraw) return;
    if (!this._writeTo.write(this._gauge.show(this._status))) {
        this._paused = true;
        this._writeTo.on("drain", callWith(this, function() {
            this._paused = false;
            this._doRedraw();
        }));
    }
};

},{"92ebc6c86bec998a":"6teez","ddf485d6d4b5cd0e":"7DMKO","18883af14491be4d":"71n4L","33d0a3f8367ebecf":"cNYyE","765791dd7162a027":"3FaP3","9be787e5af5e50b7":"2almF","b79544f6a539575a":"a3apA","88d8d6b03d50104":"f2NE3"}],"6teez":[function(require,module,exports) {
"use strict";
var consoleControl = require("862216bef050c8a3");
var renderTemplate = require("ebe4ca0a4ec43021");
var validate = require("6847945f3a4ccd68");
var Plumbing = module.exports = function(theme, template, width) {
    if (!width) width = 80;
    validate("OAN", [
        theme,
        template,
        width
    ]);
    this.showing = false;
    this.theme = theme;
    this.width = width;
    this.template = template;
};
Plumbing.prototype = {};
Plumbing.prototype.setTheme = function(theme) {
    validate("O", [
        theme
    ]);
    this.theme = theme;
};
Plumbing.prototype.setTemplate = function(template) {
    validate("A", [
        template
    ]);
    this.template = template;
};
Plumbing.prototype.setWidth = function(width) {
    validate("N", [
        width
    ]);
    this.width = width;
};
Plumbing.prototype.hide = function() {
    return consoleControl.gotoSOL() + consoleControl.eraseLine();
};
Plumbing.prototype.hideCursor = consoleControl.hideCursor;
Plumbing.prototype.showCursor = consoleControl.showCursor;
Plumbing.prototype.show = function(status) {
    var values = Object.create(this.theme);
    for(var key in status)values[key] = status[key];
    return renderTemplate(this.width, this.template, values).trim() + consoleControl.color("reset") + consoleControl.eraseLine() + consoleControl.gotoSOL();
};

},{"862216bef050c8a3":"dfAAb","ebe4ca0a4ec43021":"71ZrS","6847945f3a4ccd68":"gpLe7"}],"dfAAb":[function(require,module,exports) {
"use strict";
// These tables borrowed from `ansi`
var prefix = "\x1b[";
exports.up = function up(num) {
    return prefix + (num || "") + "A";
};
exports.down = function down(num) {
    return prefix + (num || "") + "B";
};
exports.forward = function forward(num) {
    return prefix + (num || "") + "C";
};
exports.back = function back(num) {
    return prefix + (num || "") + "D";
};
exports.nextLine = function nextLine(num) {
    return prefix + (num || "") + "E";
};
exports.previousLine = function previousLine(num) {
    return prefix + (num || "") + "F";
};
exports.horizontalAbsolute = function horizontalAbsolute(num) {
    if (num == null) throw new Error("horizontalAboslute requires a column to position to");
    return prefix + num + "G";
};
exports.eraseData = function eraseData() {
    return prefix + "J";
};
exports.eraseLine = function eraseLine() {
    return prefix + "K";
};
exports.goto = function(x, y) {
    return prefix + y + ";" + x + "H";
};
exports.gotoSOL = function() {
    return "\r";
};
exports.beep = function() {
    return "\x07";
};
exports.hideCursor = function hideCursor() {
    return prefix + "?25l";
};
exports.showCursor = function showCursor() {
    return prefix + "?25h";
};
var colors = {
    reset: 0,
    // styles
    bold: 1,
    italic: 3,
    underline: 4,
    inverse: 7,
    // resets
    stopBold: 22,
    stopItalic: 23,
    stopUnderline: 24,
    stopInverse: 27,
    // colors
    white: 37,
    black: 30,
    blue: 34,
    cyan: 36,
    green: 32,
    magenta: 35,
    red: 31,
    yellow: 33,
    bgWhite: 47,
    bgBlack: 40,
    bgBlue: 44,
    bgCyan: 46,
    bgGreen: 42,
    bgMagenta: 45,
    bgRed: 41,
    bgYellow: 43,
    grey: 90,
    brightBlack: 90,
    brightRed: 91,
    brightGreen: 92,
    brightYellow: 93,
    brightBlue: 94,
    brightMagenta: 95,
    brightCyan: 96,
    brightWhite: 97,
    bgGrey: 100,
    bgBrightBlack: 100,
    bgBrightRed: 101,
    bgBrightGreen: 102,
    bgBrightYellow: 103,
    bgBrightBlue: 104,
    bgBrightMagenta: 105,
    bgBrightCyan: 106,
    bgBrightWhite: 107
};
exports.color = function color(colorWith) {
    if (arguments.length !== 1 || !Array.isArray(colorWith)) colorWith = Array.prototype.slice.call(arguments);
    return prefix + colorWith.map(colorNameToCode).join(";") + "m";
};
function colorNameToCode(color) {
    if (colors[color] != null) return colors[color];
    throw new Error("Unknown color or style name: " + color);
}

},{}],"71ZrS":[function(require,module,exports) {
"use strict";
var align = require("590a37a81702917c");
var validate = require("83f97e716c496a7f");
var wideTruncate = require("2a96205611c846e5");
var error = require("de932b816cc55888");
var TemplateItem = require("aaeb1c331429b65b");
function renderValueWithValues(values) {
    return function(item) {
        return renderValue(item, values);
    };
}
var renderTemplate = module.exports = function(width, template, values) {
    var items = prepareItems(width, template, values);
    var rendered = items.map(renderValueWithValues(values)).join("");
    return align.left(wideTruncate(rendered, width), width);
};
function preType(item) {
    var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
    return "pre" + cappedTypeName;
}
function postType(item) {
    var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
    return "post" + cappedTypeName;
}
function hasPreOrPost(item, values) {
    if (!item.type) return;
    return values[preType(item)] || values[postType(item)];
}
function generatePreAndPost(baseItem, parentValues) {
    var item = Object.assign({}, baseItem);
    var values = Object.create(parentValues);
    var template = [];
    var pre = preType(item);
    var post = postType(item);
    if (values[pre]) {
        template.push({
            value: values[pre]
        });
        values[pre] = null;
    }
    item.minLength = null;
    item.length = null;
    item.maxLength = null;
    template.push(item);
    values[item.type] = values[item.type];
    if (values[post]) {
        template.push({
            value: values[post]
        });
        values[post] = null;
    }
    return function($1, $2, length) {
        return renderTemplate(length, template, values);
    };
}
function prepareItems(width, template, values) {
    function cloneAndObjectify(item, index, arr) {
        var cloned = new TemplateItem(item, width);
        var type = cloned.type;
        if (cloned.value == null) {
            if (!(type in values)) {
                if (cloned.default == null) throw new error.MissingTemplateValue(cloned, values);
                else cloned.value = cloned.default;
            } else cloned.value = values[type];
        }
        if (cloned.value == null || cloned.value === "") return null;
        cloned.index = index;
        cloned.first = index === 0;
        cloned.last = index === arr.length - 1;
        if (hasPreOrPost(cloned, values)) cloned.value = generatePreAndPost(cloned, values);
        return cloned;
    }
    var output = template.map(cloneAndObjectify).filter(function(item) {
        return item != null;
    });
    var remainingSpace = width;
    var variableCount = output.length;
    function consumeSpace(length) {
        if (length > remainingSpace) length = remainingSpace;
        remainingSpace -= length;
    }
    function finishSizing(item, length) {
        if (item.finished) throw new error.Internal("Tried to finish template item that was already finished");
        if (length === Infinity) throw new error.Internal("Length of template item cannot be infinity");
        if (length != null) item.length = length;
        item.minLength = null;
        item.maxLength = null;
        --variableCount;
        item.finished = true;
        if (item.length == null) item.length = item.getBaseLength();
        if (item.length == null) throw new error.Internal("Finished template items must have a length");
        consumeSpace(item.getLength());
    }
    output.forEach(function(item) {
        if (!item.kerning) return;
        var prevPadRight = item.first ? 0 : output[item.index - 1].padRight;
        if (!item.first && prevPadRight < item.kerning) item.padLeft = item.kerning - prevPadRight;
        if (!item.last) item.padRight = item.kerning;
    });
    // Finish any that have a fixed (literal or intuited) length
    output.forEach(function(item) {
        if (item.getBaseLength() == null) return;
        finishSizing(item);
    });
    var resized = 0;
    var resizing;
    var hunkSize;
    do {
        resizing = false;
        hunkSize = Math.round(remainingSpace / variableCount);
        output.forEach(function(item) {
            if (item.finished) return;
            if (!item.maxLength) return;
            if (item.getMaxLength() < hunkSize) {
                finishSizing(item, item.maxLength);
                resizing = true;
            }
        });
    }while (resizing && resized++ < output.length);
    if (resizing) throw new error.Internal("Resize loop iterated too many times while determining maxLength");
    resized = 0;
    do {
        resizing = false;
        hunkSize = Math.round(remainingSpace / variableCount);
        output.forEach(function(item) {
            if (item.finished) return;
            if (!item.minLength) return;
            if (item.getMinLength() >= hunkSize) {
                finishSizing(item, item.minLength);
                resizing = true;
            }
        });
    }while (resizing && resized++ < output.length);
    if (resizing) throw new error.Internal("Resize loop iterated too many times while determining minLength");
    hunkSize = Math.round(remainingSpace / variableCount);
    output.forEach(function(item) {
        if (item.finished) return;
        finishSizing(item, hunkSize);
    });
    return output;
}
function renderFunction(item, values, length) {
    validate("OON", arguments);
    if (item.type) return item.value(values, values[item.type + "Theme"] || {}, length);
    else return item.value(values, {}, length);
}
function renderValue(item, values) {
    var length = item.getBaseLength();
    var value = typeof item.value === "function" ? renderFunction(item, values, length) : item.value;
    if (value == null || value === "") return "";
    var alignWith = align[item.align] || align.left;
    var leftPadding = item.padLeft ? align.left("", item.padLeft) : "";
    var rightPadding = item.padRight ? align.right("", item.padRight) : "";
    var truncated = wideTruncate(String(value), length);
    var aligned = alignWith(truncated, length);
    return leftPadding + aligned + rightPadding;
}

},{"590a37a81702917c":"6buli","83f97e716c496a7f":"gpLe7","2a96205611c846e5":"8erMh","de932b816cc55888":"hyn60","aaeb1c331429b65b":"7TCO9"}],"6buli":[function(require,module,exports) {
"use strict";
var stringWidth = require("bfd28e1d81f4ca5a");
exports.center = alignCenter;
exports.left = alignLeft;
exports.right = alignRight;
// lodash's way of generating pad characters.
function createPadding(width) {
    var result = "";
    var string = " ";
    var n = width;
    do {
        if (n % 2) result += string;
        n = Math.floor(n / 2);
        string += string;
    }while (n);
    return result;
}
function alignLeft(str, width) {
    var trimmed = str.trimRight();
    if (trimmed.length === 0 && str.length >= width) return str;
    var padding = "";
    var strWidth = stringWidth(trimmed);
    if (strWidth < width) padding = createPadding(width - strWidth);
    return trimmed + padding;
}
function alignRight(str, width) {
    var trimmed = str.trimLeft();
    if (trimmed.length === 0 && str.length >= width) return str;
    var padding = "";
    var strWidth = stringWidth(trimmed);
    if (strWidth < width) padding = createPadding(width - strWidth);
    return padding + trimmed;
}
function alignCenter(str, width) {
    var trimmed = str.trim();
    if (trimmed.length === 0 && str.length >= width) return str;
    var padLeft = "";
    var padRight = "";
    var strWidth = stringWidth(trimmed);
    if (strWidth < width) {
        var padLeftBy = parseInt((width - strWidth) / 2, 10);
        padLeft = createPadding(padLeftBy);
        padRight = createPadding(width - (strWidth + padLeftBy));
    }
    return padLeft + trimmed + padRight;
}

},{"bfd28e1d81f4ca5a":"973St"}],"973St":[function(require,module,exports) {
"use strict";
const stripAnsi = require("1d1bee83c4eb436a");
const isFullwidthCodePoint = require("20cba561f7cedaf7");
const emojiRegex = require("54820453e41b589a");
const stringWidth = (string)=>{
    if (typeof string !== "string" || string.length === 0) return 0;
    string = stripAnsi(string);
    if (string.length === 0) return 0;
    string = string.replace(emojiRegex(), "  ");
    let width = 0;
    for(let i = 0; i < string.length; i++){
        const code = string.codePointAt(i);
        // Ignore control characters
        if (code <= 0x1F || code >= 0x7F && code <= 0x9F) continue;
        // Ignore combining characters
        if (code >= 0x300 && code <= 0x36F) continue;
        // Surrogates
        if (code > 0xFFFF) i++;
        width += isFullwidthCodePoint(code) ? 2 : 1;
    }
    return width;
};
module.exports = stringWidth;
// TODO: remove this in the next major version
module.exports.default = stringWidth;

},{"1d1bee83c4eb436a":"bRUQh","20cba561f7cedaf7":"eoNSV","54820453e41b589a":"6vUo4"}],"bRUQh":[function(require,module,exports) {
"use strict";
const ansiRegex = require("fed8dd1553e08d3c");
module.exports = (string)=>typeof string === "string" ? string.replace(ansiRegex(), "") : string;

},{"fed8dd1553e08d3c":"49fdF"}],"49fdF":[function(require,module,exports) {
"use strict";
module.exports = ({ onlyFirst = false } = {})=>{
    const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? undefined : "g");
};

},{}],"eoNSV":[function(require,module,exports) {
/* eslint-disable yoda */ "use strict";
const isFullwidthCodePoint = (codePoint)=>{
    if (Number.isNaN(codePoint)) return false;
    // Code points are derived from:
    // http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
    if (codePoint >= 0x1100 && (codePoint <= 0x115F || // Hangul Jamo
    codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
    codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
    // CJK Radicals Supplement .. Enclosed CJK Letters and Months
    0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
    0x3250 <= codePoint && codePoint <= 0x4DBF || // CJK Unified Ideographs .. Yi Radicals
    0x4E00 <= codePoint && codePoint <= 0xA4C6 || // Hangul Jamo Extended-A
    0xA960 <= codePoint && codePoint <= 0xA97C || // Hangul Syllables
    0xAC00 <= codePoint && codePoint <= 0xD7A3 || // CJK Compatibility Ideographs
    0xF900 <= codePoint && codePoint <= 0xFAFF || // Vertical Forms
    0xFE10 <= codePoint && codePoint <= 0xFE19 || // CJK Compatibility Forms .. Small Form Variants
    0xFE30 <= codePoint && codePoint <= 0xFE6B || // Halfwidth and Fullwidth Forms
    0xFF01 <= codePoint && codePoint <= 0xFF60 || 0xFFE0 <= codePoint && codePoint <= 0xFFE6 || // Kana Supplement
    0x1B000 <= codePoint && codePoint <= 0x1B001 || // Enclosed Ideographic Supplement
    0x1F200 <= codePoint && codePoint <= 0x1F251 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
    0x20000 <= codePoint && codePoint <= 0x3FFFD)) return true;
    return false;
};
module.exports = isFullwidthCodePoint;
module.exports.default = isFullwidthCodePoint;

},{}],"6vUo4":[function(require,module,exports) {
"use strict";
module.exports = function() {
    // https://mths.be/emoji
    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};

},{}],"gpLe7":[function(require,module,exports) {
"use strict";
module.exports = validate;
function isArguments(thingy) {
    return thingy != null && typeof thingy === "object" && thingy.hasOwnProperty("callee");
}
const types = {
    "*": {
        label: "any",
        check: ()=>true
    },
    A: {
        label: "array",
        check: (_)=>Array.isArray(_) || isArguments(_)
    },
    S: {
        label: "string",
        check: (_)=>typeof _ === "string"
    },
    N: {
        label: "number",
        check: (_)=>typeof _ === "number"
    },
    F: {
        label: "function",
        check: (_)=>typeof _ === "function"
    },
    O: {
        label: "object",
        check: (_)=>typeof _ === "object" && _ != null && !types.A.check(_) && !types.E.check(_)
    },
    B: {
        label: "boolean",
        check: (_)=>typeof _ === "boolean"
    },
    E: {
        label: "error",
        check: (_)=>_ instanceof Error
    },
    Z: {
        label: "null",
        check: (_)=>_ == null
    }
};
function addSchema(schema, arity) {
    const group = arity[schema.length] = arity[schema.length] || [];
    if (group.indexOf(schema) === -1) group.push(schema);
}
function validate(rawSchemas, args) {
    if (arguments.length !== 2) throw wrongNumberOfArgs([
        "SA"
    ], arguments.length);
    if (!rawSchemas) throw missingRequiredArg(0, "rawSchemas");
    if (!args) throw missingRequiredArg(1, "args");
    if (!types.S.check(rawSchemas)) throw invalidType(0, [
        "string"
    ], rawSchemas);
    if (!types.A.check(args)) throw invalidType(1, [
        "array"
    ], args);
    const schemas = rawSchemas.split("|");
    const arity = {};
    schemas.forEach((schema)=>{
        for(let ii = 0; ii < schema.length; ++ii){
            const type = schema[ii];
            if (!types[type]) throw unknownType(ii, type);
        }
        if (/E.*E/.test(schema)) throw moreThanOneError(schema);
        addSchema(schema, arity);
        if (/E/.test(schema)) {
            addSchema(schema.replace(/E.*$/, "E"), arity);
            addSchema(schema.replace(/E/, "Z"), arity);
            if (schema.length === 1) addSchema("", arity);
        }
    });
    let matching = arity[args.length];
    if (!matching) throw wrongNumberOfArgs(Object.keys(arity), args.length);
    for(let ii = 0; ii < args.length; ++ii){
        let newMatching = matching.filter((schema)=>{
            const type = schema[ii];
            const typeCheck = types[type].check;
            return typeCheck(args[ii]);
        });
        if (!newMatching.length) {
            const labels = matching.map((_)=>types[_[ii]].label).filter((_)=>_ != null);
            throw invalidType(ii, labels, args[ii]);
        }
        matching = newMatching;
    }
}
function missingRequiredArg(num) {
    return newException("EMISSINGARG", "Missing required argument #" + (num + 1));
}
function unknownType(num, type) {
    return newException("EUNKNOWNTYPE", "Unknown type " + type + " in argument #" + (num + 1));
}
function invalidType(num, expectedTypes, value) {
    let valueType;
    Object.keys(types).forEach((typeCode)=>{
        if (types[typeCode].check(value)) valueType = types[typeCode].label;
    });
    return newException("EINVALIDTYPE", "Argument #" + (num + 1) + ": Expected " + englishList(expectedTypes) + " but got " + valueType);
}
function englishList(list) {
    return list.join(", ").replace(/, ([^,]+)$/, " or $1");
}
function wrongNumberOfArgs(expected, got) {
    const english = englishList(expected);
    const args = expected.every((ex)=>ex.length === 1) ? "argument" : "arguments";
    return newException("EWRONGARGCOUNT", "Expected " + english + " " + args + " but got " + got);
}
function moreThanOneError(schema) {
    return newException("ETOOMANYERRORTYPES", 'Only one error type per argument signature is allowed, more than one found in "' + schema + '"');
}
function newException(code, msg) {
    const err = new Error(msg);
    err.code = code;
    /* istanbul ignore else */ if (Error.captureStackTrace) Error.captureStackTrace(err, validate);
    return err;
}

},{}],"8erMh":[function(require,module,exports) {
"use strict";
var stringWidth = require("9e87378ed8f976af");
var stripAnsi = require("c6b2482cf0f2ac29");
module.exports = wideTruncate;
function wideTruncate(str, target) {
    if (stringWidth(str) === 0) return str;
    if (target <= 0) return "";
    if (stringWidth(str) <= target) return str;
    // We compute the number of bytes of ansi sequences here and add
    // that to our initial truncation to ensure that we don't slice one
    // that we want to keep in half.
    var noAnsi = stripAnsi(str);
    var ansiSize = str.length + noAnsi.length;
    var truncated = str.slice(0, target + ansiSize);
    // we have to shrink the result to account for our ansi sequence buffer
    // (if an ansi sequence was truncated) and double width characters.
    while(stringWidth(truncated) > target)truncated = truncated.slice(0, -1);
    return truncated;
}

},{"9e87378ed8f976af":"973St","c6b2482cf0f2ac29":"bRUQh"}],"hyn60":[function(require,module,exports) {
"use strict";
var util = require("6c9b1da0d93d68c1");
var User = exports.User = function User(msg) {
    var err = new Error(msg);
    Error.captureStackTrace(err, User);
    err.code = "EGAUGE";
    return err;
};
exports.MissingTemplateValue = function MissingTemplateValue(item, values) {
    var err = new User(util.format('Missing template value "%s"', item.type));
    Error.captureStackTrace(err, MissingTemplateValue);
    err.template = item;
    err.values = values;
    return err;
};
exports.Internal = function Internal(msg) {
    var err = new Error(msg);
    Error.captureStackTrace(err, Internal);
    err.code = "EGAUGEINTERNAL";
    return err;
};

},{"6c9b1da0d93d68c1":"h4AnS"}],"7TCO9":[function(require,module,exports) {
"use strict";
var stringWidth = require("76275e052f65da22");
module.exports = TemplateItem;
function isPercent(num) {
    if (typeof num !== "string") return false;
    return num.slice(-1) === "%";
}
function percent(num) {
    return Number(num.slice(0, -1)) / 100;
}
function TemplateItem(values, outputLength) {
    this.overallOutputLength = outputLength;
    this.finished = false;
    this.type = null;
    this.value = null;
    this.length = null;
    this.maxLength = null;
    this.minLength = null;
    this.kerning = null;
    this.align = "left";
    this.padLeft = 0;
    this.padRight = 0;
    this.index = null;
    this.first = null;
    this.last = null;
    if (typeof values === "string") this.value = values;
    else for(var prop in values)this[prop] = values[prop];
    // Realize percents
    if (isPercent(this.length)) this.length = Math.round(this.overallOutputLength * percent(this.length));
    if (isPercent(this.minLength)) this.minLength = Math.round(this.overallOutputLength * percent(this.minLength));
    if (isPercent(this.maxLength)) this.maxLength = Math.round(this.overallOutputLength * percent(this.maxLength));
    return this;
}
TemplateItem.prototype = {};
TemplateItem.prototype.getBaseLength = function() {
    var length = this.length;
    if (length == null && typeof this.value === "string" && this.maxLength == null && this.minLength == null) length = stringWidth(this.value);
    return length;
};
TemplateItem.prototype.getLength = function() {
    var length = this.getBaseLength();
    if (length == null) return null;
    return length + this.padLeft + this.padRight;
};
TemplateItem.prototype.getMaxLength = function() {
    if (this.maxLength == null) return null;
    return this.maxLength + this.padLeft + this.padRight;
};
TemplateItem.prototype.getMinLength = function() {
    if (this.minLength == null) return null;
    return this.minLength + this.padLeft + this.padRight;
};

},{"76275e052f65da22":"973St"}],"7DMKO":[function(require,module,exports) {
"use strict";
var os = require("6bc4bd1abe6a4071");
var hasUnicode = module.exports = function() {
    // Recent Win32 platforms (>XP) CAN support unicode in the console but
    // don't have to, and in non-english locales often use traditional local
    // code pages. There's no way, short of windows system calls or execing
    // the chcp command line program to figure this out. As such, we default
    // this to false and encourage your users to override it via config if
    // appropriate.
    if (os.type() == "Windows_NT") return false;
    var isUTF8 = /UTF-?8$/i;
    var ctype = undefined;
    return isUTF8.test(ctype);
};

},{"6bc4bd1abe6a4071":"fKYkW"}],"71n4L":[function(require,module,exports) {
"use strict";
var colorSupport = require("c1b050c69c0e1aff");
module.exports = colorSupport().hasBasic;

},{"c1b050c69c0e1aff":"9h2C3"}],"9h2C3":[function(require,module,exports) {
module.exports = colorSupport({
    alwaysReturn: true
}, colorSupport);
function colorSupport(options, obj) {
    obj = obj || {};
    options = options || {};
    obj.level = 0;
    obj.hasBasic = false;
    obj.has256 = false;
    obj.has16m = false;
    if (!options.alwaysReturn) return false;
    return obj;
}

},{}],"cNYyE":[function(require,module,exports) {
// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
var global = arguments[3];
var process = global.process;
const processOk = function(process) {
    return process && typeof process === "object" && typeof process.removeListener === "function" && typeof process.emit === "function" && typeof process.reallyExit === "function" && typeof process.listeners === "function" && typeof process.kill === "function" && typeof process.pid === "number" && typeof process.on === "function";
};
// some kind of non-node environment, just no-op
/* istanbul ignore if */ if (!processOk(process)) module.exports = function() {
    return function() {};
};
else {
    var assert = require("bbc110a60ddcb999");
    var signals = require("76f7b4ff2ec7e415");
    var isWin = /^win/i.test(process.platform);
    var EE = require("f3fef57218fabfd1");
    /* istanbul ignore if */ if (typeof EE !== "function") EE = EE.EventEmitter;
    var emitter;
    if (process.__signal_exit_emitter__) emitter = process.__signal_exit_emitter__;
    else {
        emitter = process.__signal_exit_emitter__ = new EE();
        emitter.count = 0;
        emitter.emitted = {};
    }
    // Because this emitter is a global, we have to check to see if a
    // previous version of this library failed to enable infinite listeners.
    // I know what you're about to say.  But literally everything about
    // signal-exit is a compromise with evil.  Get used to it.
    if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
    }
    module.exports = function(cb, opts) {
        /* istanbul ignore if */ if (!processOk(global.process)) return function() {};
        assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
        if (loaded === false) load();
        var ev = "exit";
        if (opts && opts.alwaysLast) ev = "afterexit";
        var remove = function() {
            emitter.removeListener(ev, cb);
            if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) unload();
        };
        emitter.on(ev, cb);
        return remove;
    };
    var unload = function unload() {
        if (!loaded || !processOk(global.process)) return;
        loaded = false;
        signals.forEach(function(sig) {
            try {
                process.removeListener(sig, sigListeners[sig]);
            } catch (er) {}
        });
        process.emit = originalProcessEmit;
        process.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
    };
    module.exports.unload = unload;
    var emit = function emit(event, code, signal) {
        /* istanbul ignore if */ if (emitter.emitted[event]) return;
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
    };
    // { <signal>: <listener fn>, ... }
    var sigListeners = {};
    signals.forEach(function(sig) {
        sigListeners[sig] = function listener() {
            /* istanbul ignore if */ if (!processOk(global.process)) return;
            // If there are no other listeners, an exit is coming!
            // Simplest way: remove us and then re-send the signal.
            // We know that this will kill the process, so we can
            // safely emit now.
            var listeners = process.listeners(sig);
            if (listeners.length === emitter.count) {
                unload();
                emit("exit", null, sig);
                /* istanbul ignore next */ emit("afterexit", null, sig);
                /* istanbul ignore next */ if (isWin && sig === "SIGHUP") // "SIGHUP" throws an `ENOSYS` error on Windows,
                // so use a supported signal instead
                sig = "SIGINT";
                /* istanbul ignore next */ process.kill(process.pid, sig);
            }
        };
    });
    module.exports.signals = function() {
        return signals;
    };
    var loaded = false;
    var load = function load() {
        if (loaded || !processOk(global.process)) return;
        loaded = true;
        // This is the number of onSignalExit's that are in play.
        // It's important so that we can count the correct number of
        // listeners on signals, and don't wait for the other one to
        // handle it instead of us.
        emitter.count += 1;
        signals = signals.filter(function(sig) {
            try {
                process.on(sig, sigListeners[sig]);
                return true;
            } catch (er) {
                return false;
            }
        });
        process.emit = processEmit;
        process.reallyExit = processReallyExit;
    };
    module.exports.load = load;
    var originalProcessReallyExit = process.reallyExit;
    var processReallyExit = function processReallyExit(code) {
        /* istanbul ignore if */ if (!processOk(global.process)) return;
        process.exitCode = code || /* istanbul ignore next */ 0;
        emit("exit", process.exitCode, null);
        /* istanbul ignore next */ emit("afterexit", process.exitCode, null);
        /* istanbul ignore next */ originalProcessReallyExit.call(process, process.exitCode);
    };
    var originalProcessEmit = process.emit;
    var processEmit = function processEmit(ev, arg) {
        if (ev === "exit" && processOk(global.process)) {
            /* istanbul ignore else */ if (arg !== undefined) process.exitCode = arg;
            var ret = originalProcessEmit.apply(this, arguments);
            /* istanbul ignore next */ emit("exit", process.exitCode, null);
            /* istanbul ignore next */ emit("afterexit", process.exitCode, null);
            /* istanbul ignore next */ return ret;
        } else return originalProcessEmit.apply(this, arguments);
    };
}

},{"bbc110a60ddcb999":"bNzhs","76f7b4ff2ec7e415":"6F3kl","f3fef57218fabfd1":"gIDbZ"}],"bNzhs":[function(require,module,exports) {
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("17530e9a8e9dd8de");
"use strict";
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var _require = require("67930e3bebc18ea9"), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = require("11bdd262fb706a54");
var _require2 = require("d61a3396666721b6"), inspect = _require2.inspect;
var _require$types = require("d61a3396666721b6").types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
var objectAssign = require("fe81af847d362e93")();
var objectIs = require("4ad4507c8e372c71")();
var RegExpPrototypeTest = require("11f208d8f2e10b17")("RegExp.prototype.test");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
    var comparison = require("131e25d2408617a4");
    isDeepEqual = comparison.isDeepEqual;
    isDeepStrictEqual = comparison.isDeepStrictEqual;
}
// Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    "\\b",
    "",
    "",
    "\\u000b",
    "\\f",
    "",
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f"
];
var escapeFn = function escapeFn(str) {
    return meta[str.charCodeAt(0)];
};
var warned = false;
// The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {};
// All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function innerFail(obj) {
    if (obj.message instanceof Error) throw obj.message;
    throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
    var argsLen = arguments.length;
    var internalMessage;
    if (argsLen === 0) internalMessage = "Failed";
    else if (argsLen === 1) {
        message = actual;
        actual = undefined;
    } else {
        if (warned === false) {
            warned = true;
            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
    }
    if (message instanceof Error) throw message;
    var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? "fail" : operator,
        stackStartFn: stackStartFn || fail
    };
    if (message !== undefined) errArgs.message = message;
    var err = new AssertionError(errArgs);
    if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
    }
    throw err;
}
assert.fail = fail;
// The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
    if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
            generatedMessage = true;
            message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) throw message;
        var err = new AssertionError({
            actual: value,
            expected: true,
            message: message,
            operator: "==",
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
}
// Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    innerOk.apply(void 0, [
        ok,
        args.length
    ].concat(args));
}
assert.ok = ok;
// The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    // eslint-disable-next-line eqeqeq
    if (actual != expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "==",
        stackStartFn: equal
    });
};
// The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    // eslint-disable-next-line eqeqeq
    if (actual == expected) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "!=",
        stackStartFn: notEqual
    });
};
// The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepEqual",
        stackStartFn: deepEqual
    });
};
// The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepEqual",
        stackStartFn: notDeepEqual
    });
};
/* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (!isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "deepStrictEqual",
        stackStartFn: deepStrictEqual
    });
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (isDeepEqual === undefined) lazyLoadComparison();
    if (isDeepStrictEqual(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notDeepStrictEqual",
        stackStartFn: notDeepStrictEqual
    });
}
assert.strictEqual = function strictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (!objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "strictEqual",
        stackStartFn: strictEqual
    });
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new ERR_MISSING_ARGS("actual", "expected");
    if (objectIs(actual, expected)) innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: "notStrictEqual",
        stackStartFn: notStrictEqual
    });
};
var Comparison = /*#__PURE__*/ _createClass(function Comparison(obj, keys, actual) {
    var _this = this;
    _classCallCheck(this, Comparison);
    keys.forEach(function(key) {
        if (key in obj) {
            if (actual !== undefined && typeof actual[key] === "string" && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) _this[key] = actual[key];
            else _this[key] = obj[key];
        }
    });
});
function compareExceptionKey(actual, expected, key, message, keys, fn) {
    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
            // Create placeholder objects to create a nice output.
            var a = new Comparison(actual, keys);
            var b = new Comparison(expected, keys, actual);
            var err = new AssertionError({
                actual: a,
                expected: b,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn.name;
            throw err;
        }
        innerFail({
            actual: actual,
            expected: expected,
            message: message,
            operator: fn.name,
            stackStartFn: fn
        });
    }
}
function expectedException(actual, expected, msg, fn) {
    if (typeof expected !== "function") {
        if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
        // assert.doesNotThrow does not accept objects.
        if (arguments.length === 2) throw new ERR_INVALID_ARG_TYPE("expected", [
            "Function",
            "RegExp"
        ], expected);
        // Handle primitives properly.
        if (_typeof(actual) !== "object" || actual === null) {
            var err = new AssertionError({
                actual: actual,
                expected: expected,
                message: msg,
                operator: "deepStrictEqual",
                stackStartFn: fn
            });
            err.operator = fn.name;
            throw err;
        }
        var keys = Object.keys(expected);
        // Special handle errors to make sure the name and the message are compared
        // as well.
        if (expected instanceof Error) keys.push("name", "message");
        else if (keys.length === 0) throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        if (isDeepEqual === undefined) lazyLoadComparison();
        keys.forEach(function(key) {
            if (typeof actual[key] === "string" && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) return;
            compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
    }
    // Guard instanceof against arrow functions as they don't have a prototype.
    if (expected.prototype !== undefined && actual instanceof expected) return true;
    if (Error.isPrototypeOf(expected)) return false;
    return expected.call({}, actual) === true;
}
function getActual(fn) {
    if (typeof fn !== "function") throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
    try {
        fn();
    } catch (e) {
        return e;
    }
    return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
    // Accept native ES6 promises and promises that are implemented in a similar
    // way. Do not accept thenables that use a function as `obj` and that have no
    // `catch` handler.
    // TODO: thenables are checked up until they have the correct methods,
    // but according to documentation, the `then` method should receive
    // the `fulfill` and `reject` arguments as well or it may be never resolved.
    return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
}
function waitForActual(promiseFn) {
    return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
            // Return a rejected promise if `promiseFn` throws synchronously.
            resultPromise = promiseFn();
            // Fail in case no promise is returned.
            if (!checkIsPromise(resultPromise)) throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
        } else if (checkIsPromise(promiseFn)) resultPromise = promiseFn;
        else throw new ERR_INVALID_ARG_TYPE("promiseFn", [
            "Function",
            "Promise"
        ], promiseFn);
        return Promise.resolve().then(function() {
            return resultPromise;
        }).then(function() {
            return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
            return e;
        });
    });
}
function expectsError(stackStartFn, actual, error, message) {
    if (typeof error === "string") {
        if (arguments.length === 4) throw new ERR_INVALID_ARG_TYPE("error", [
            "Object",
            "Error",
            "Function",
            "RegExp"
        ], error);
        if (_typeof(actual) === "object" && actual !== null) {
            if (actual.message === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
        } else if (actual === error) throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        message = error;
        error = undefined;
    } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") throw new ERR_INVALID_ARG_TYPE("error", [
        "Object",
        "Error",
        "Function",
        "RegExp"
    ], error);
    if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) details += " (".concat(error.name, ")");
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
            actual: undefined,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn: stackStartFn
        });
    }
    if (error && !expectedException(actual, error, message, stackStartFn)) throw actual;
}
function expectsNoError(stackStartFn, actual, error, message) {
    if (actual === NO_EXCEPTION_SENTINEL) return;
    if (typeof error === "string") {
        message = error;
        error = undefined;
    }
    if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
            actual: actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
            stackStartFn: stackStartFn
        });
    }
    throw actual;
}
assert.throws = function throws(promiseFn) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    expectsError.apply(void 0, [
        throws,
        getActual(promiseFn)
    ].concat(args));
};
assert.rejects = function rejects(promiseFn) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [
            rejects,
            result
        ].concat(args));
    });
};
assert.doesNotThrow = function doesNotThrow(fn) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    expectsNoError.apply(void 0, [
        doesNotThrow,
        getActual(fn)
    ].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
    return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [
            doesNotReject,
            result
        ].concat(args));
    });
};
assert.ifError = function ifError(err) {
    if (err !== null && err !== undefined) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
            if (err.message.length === 0 && err.constructor) message += err.constructor.name;
            else message += err.message;
        } else message += inspect(err);
        var newErr = new AssertionError({
            actual: err,
            expected: null,
            operator: "ifError",
            message: message,
            stackStartFn: ifError
        });
        // Make sure we actually have a stack trace!
        var origStack = err.stack;
        if (typeof origStack === "string") {
            // This will remove any duplicated frames from the error frames taken
            // from within `ifError` and add the original error frames to the newly
            // created ones.
            var tmp2 = origStack.split("\n");
            tmp2.shift();
            // Filter all frames existing in err.stack.
            var tmp1 = newErr.stack.split("\n");
            for(var i = 0; i < tmp2.length; i++){
                // Find the first occurrence of the frame.
                var pos = tmp1.indexOf(tmp2[i]);
                if (pos !== -1) {
                    // Only keep new frames.
                    tmp1 = tmp1.slice(0, pos);
                    break;
                }
            }
            newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
    }
};
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb
function internalMatch(string, regexp, message, fn, fnName) {
    if (!isRegExp(regexp)) throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
    var match = fnName === "match";
    if (typeof string !== "string" || RegExpPrototypeTest(regexp, string) !== match) {
        if (message instanceof Error) throw message;
        var generatedMessage = !message;
        // 'The input was expected to not match the regular expression ' +
        message = message || (typeof string !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
        var err = new AssertionError({
            actual: string,
            expected: regexp,
            message: message,
            operator: fnName,
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
}
assert.match = function match(string, regexp, message) {
    internalMatch(string, regexp, message, match, "match");
};
assert.doesNotMatch = function doesNotMatch(string, regexp, message) {
    internalMatch(string, regexp, message, doesNotMatch, "doesNotMatch");
};
// Expose a strict only variant of assert
function strict() {
    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
    innerOk.apply(void 0, [
        strict,
        args.length
    ].concat(args));
}
assert.strict = objectAssign(strict, assert, {
    equal: assert.strictEqual,
    deepEqual: assert.deepStrictEqual,
    notEqual: assert.notStrictEqual,
    notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

},{"17530e9a8e9dd8de":"kKEHw","67930e3bebc18ea9":"cQb4R","11bdd262fb706a54":"buLhQ","d61a3396666721b6":"h4AnS","fe81af847d362e93":"c4EuY","4ad4507c8e372c71":"bhCju","11f208d8f2e10b17":"3u0uq","131e25d2408617a4":"6yCqR"}],"cQb4R":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
/* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ "use strict";
// The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn(this, result);
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
var codes = {};
// Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inherits(NodeError, _Base);
        var _super = _createSuper(NodeError);
        function NodeError(arg1, arg2, arg3) {
            var _this;
            _classCallCheck(this, NodeError);
            _this = _super.call(this, getMessage(arg1, arg2, arg3));
            _this.code = code;
            return _this;
        }
        return _createClass(NodeError);
    }(Base);
    codes[code] = NodeError;
}
// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    if (assert === undefined) assert = require("f73a3052b95b9ed");
    assert(typeof name === "string", "'name' must be a string");
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    // TODO(BridgeAR): Improve the output by showing `null` and similar.
    msg += ". Received type ".concat(_typeof(actual));
    return msg;
}, TypeError);
createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "is invalid";
    if (util === undefined) util = require("1fd472100fa8826f");
    var inspected = util.inspect(value);
    if (inspected.length > 128) inspected = "".concat(inspected.slice(0, 128), "...");
    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
    var type;
    if (value && value.constructor && value.constructor.name) type = "instance of ".concat(value.constructor.name);
    else type = "type ".concat(_typeof(value));
    return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
}, TypeError);
createErrorType("ERR_MISSING_ARGS", function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    if (assert === undefined) assert = require("f73a3052b95b9ed");
    assert(args.length > 0, "At least one arg needs to be specified");
    var msg = "The ";
    var len = args.length;
    args = args.map(function(a) {
        return '"'.concat(a, '"');
    });
    switch(len){
        case 1:
            msg += "".concat(args[0], " argument");
            break;
        case 2:
            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
            break;
        default:
            msg += args.slice(0, len - 1).join(", ");
            msg += ", and ".concat(args[len - 1], " arguments");
            break;
    }
    return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

},{"f73a3052b95b9ed":"bNzhs","1fd472100fa8826f":"h4AnS"}],"buLhQ":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
var process = require("228da2c254a5e871");
"use strict";
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn(this, result);
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct.bind();
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
var _require = require("9984e91d63ed614c"), inspect = _require.inspect;
var _require2 = require("1670766d7c5cef96"), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
    count = Math.floor(count);
    if (str.length == 0 || count == 0) return "";
    var maxCount = str.length * count;
    count = Math.floor(Math.log(count) / Math.log(2));
    while(count){
        str += str;
        count--;
    }
    str += str.substring(0, maxCount - str.length);
    return str;
}
var blue = "";
var green = "";
var red = "";
var white = "";
var kReadableOperator = {
    deepStrictEqual: "Expected values to be strictly deep-equal:",
    strictEqual: "Expected values to be strictly equal:",
    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
    deepEqual: "Expected values to be loosely deep-equal:",
    equal: "Expected values to be loosely equal:",
    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
    notEqual: 'Expected "actual" to be loosely unequal to:',
    notIdentical: "Values identical but not reference-equal:"
};
// Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
    var keys = Object.keys(source);
    var target = Object.create(Object.getPrototypeOf(source));
    keys.forEach(function(key) {
        target[key] = source[key];
    });
    Object.defineProperty(target, "message", {
        value: source.message
    });
    return target;
}
function inspectValue(val) {
    // The util.inspect default values could be changed. This makes sure the
    // error messages contain the necessary information nevertheless.
    return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1000,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
    });
}
function createErrDiff(actual, expected, operator) {
    var other = "";
    var res = "";
    var lastPos = 0;
    var end = "";
    var skipped = false;
    var actualInspected = inspectValue(actual);
    var actualLines = actualInspected.split("\n");
    var expectedLines = inspectValue(expected).split("\n");
    var i = 0;
    var indicator = "";
    // In case both values are objects explicitly mark them as not reference equal
    // for the `strictEqual` operator.
    if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) operator = "strictEqualObject";
    // If "actual" and "expected" fit on a single line and they are not strictly
    // equal, check further special handling.
    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        // If the character length of "actual" and "expected" together is less than
        // kMaxShortLength and if neither is an object and at least one of them is
        // not `zero`, use the strict equal comparison to visualize the output.
        if (inputLength <= kMaxShortLength) {
            if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) // -0 === +0
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
        } else if (operator !== "strictEqualObject") {
            // If the stderr is a tty and the input length is lower than the current
            // columns per line, add a mismatch indicator below the output. If it is
            // not a tty, use a default value of 80 characters.
            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
            if (inputLength < maxLength) {
                while(actualLines[0][i] === expectedLines[0][i])i++;
                // Ignore the first characters.
                if (i > 2) {
                    // Add position indicator for the first mismatch in case it is a
                    // single line and the input length is less than the column length.
                    indicator = "\n  ".concat(repeat(" ", i), "^");
                    i = 0;
                }
            }
        }
    }
    // Remove all ending lines that match (this optimizes the output for
    // readability by reducing the number of total changed lines).
    var a = actualLines[actualLines.length - 1];
    var b = expectedLines[expectedLines.length - 1];
    while(a === b){
        if (i++ < 2) end = "\n  ".concat(a).concat(end);
        else other = a;
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
    }
    var maxLines = Math.max(actualLines.length, expectedLines.length);
    // Strict equal with identical objects that are not identical by reference.
    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
    if (maxLines === 0) {
        // We have to get the result again. The lines were all removed before.
        var _actualLines = actualInspected.split("\n");
        // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (_actualLines.length > 30) {
            _actualLines[26] = "".concat(blue, "...").concat(white);
            while(_actualLines.length > 27)_actualLines.pop();
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
    }
    if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
    }
    if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
    }
    var printedLines = 0;
    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
    for(i = 0; i < maxLines; i++){
        // Only extra expected lines exist
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(expectedLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(expectedLines[i - 1]);
                printedLines++;
            }
            // Mark the current line as the last diverging one.
            lastPos = i;
            // Add the expected line to the cache.
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
            printedLines++;
        // Only extra actual lines exist
        } else if (expectedLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat(blue, "...").concat(white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(actualLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(actualLines[i - 1]);
                printedLines++;
            }
            // Mark the current line as the last diverging one.
            lastPos = i;
            // Add the actual line to the result.
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
            printedLines++;
        // Lines diverge
        } else {
            var expectedLine = expectedLines[i];
            var actualLine = actualLines[i];
            // If the lines diverge, specifically check for lines that only diverge by
            // a trailing comma. In that case it is actually identical and we should
            // mark it as such.
            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
            // If the expected line has a trailing comma but is otherwise identical,
            // add a comma at the end of the actual line. Otherwise the output could
            // look weird as in:
            //
            //   [
            //     1         // No comma at the end!
            // +   2
            //   ]
            //
            if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
                divergingLines = false;
                actualLine += ",";
            }
            if (divergingLines) {
                // If the last diverging line is more than one line above and the
                // current line is at least line three, add some of the former lines and
                // also add dots to indicate skipped entries.
                if (cur > 1 && i > 2) {
                    if (cur > 4) {
                        res += "\n".concat(blue, "...").concat(white);
                        skipped = true;
                    } else if (cur > 3) {
                        res += "\n  ".concat(actualLines[i - 2]);
                        printedLines++;
                    }
                    res += "\n  ".concat(actualLines[i - 1]);
                    printedLines++;
                }
                // Mark the current line as the last diverging one.
                lastPos = i;
                // Add the actual line to the result and cache the expected diverging
                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                printedLines += 2;
            // Lines are identical
            } else {
                // Add all cached information to the result before adding other things
                // and reset the cache.
                res += other;
                other = "";
                // If the last diverging line is exactly one line above or if it is the
                // very first line, add the line to the result.
                if (cur === 1 || i === 0) {
                    res += "\n  ".concat(actualLine);
                    printedLines++;
                }
            }
        }
        // Inspected object to big (Show ~20 rows max)
        if (printedLines > 20 && i < maxLines - 2) return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
    return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/ function(_Error, _inspect$custom) {
    _inherits(AssertionError, _Error);
    var _super = _createSuper(AssertionError);
    function AssertionError(options) {
        var _this;
        _classCallCheck(this, AssertionError);
        if (_typeof(options) !== "object" || options === null) throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) _this = _super.call(this, String(message));
        else {
            if (process.stderr && process.stderr.isTTY) {
                // Reset on each call to make sure we handle dynamically set environment
                // variables correct.
                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                    blue = "\x1b[34m";
                    green = "\x1b[32m";
                    white = "\x1b[39m";
                    red = "\x1b[31m";
                } else {
                    blue = "";
                    green = "";
                    white = "";
                    red = "";
                }
            }
            // Prevent the error stack from being visible by duplicating the error
            // in a very close way to the original in case both sides are actually
            // instances of Error.
            if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
                actual = copyError(actual);
                expected = copyError(expected);
            }
            if (operator === "deepStrictEqual" || operator === "strictEqual") _this = _super.call(this, createErrDiff(actual, expected, operator));
            else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
                // In case the objects are equal but the operator requires unequal, show
                // the first object and say A equals B
                var base = kReadableOperator[operator];
                var res = inspectValue(actual).split("\n");
                // In case "actual" is an object, it should not be reference equal.
                if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) base = kReadableOperator.notStrictEqualObject;
                // Only remove lines in case it makes sense to collapse those.
                // TODO: Accept env to always show the full error.
                if (res.length > 30) {
                    res[26] = "".concat(blue, "...").concat(white);
                    while(res.length > 27)res.pop();
                }
                // Only print a single input.
                if (res.length === 1) _this = _super.call(this, "".concat(base, " ").concat(res[0]));
                else _this = _super.call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n"));
            } else {
                var _res = inspectValue(actual);
                var other = "";
                var knownOperators = kReadableOperator[operator];
                if (operator === "notDeepEqual" || operator === "notEqual") {
                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                    if (_res.length > 1024) _res = "".concat(_res.slice(0, 1021), "...");
                } else {
                    other = "".concat(inspectValue(expected));
                    if (_res.length > 512) _res = "".concat(_res.slice(0, 509), "...");
                    if (other.length > 512) other = "".concat(other.slice(0, 509), "...");
                    if (operator === "deepEqual" || operator === "equal") _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                    else other = " ".concat(operator, " ").concat(other);
                }
                _this = _super.call(this, "".concat(_res).concat(other));
            }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
            value: "AssertionError [ERR_ASSERTION]",
            enumerable: false,
            writable: true,
            configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) // eslint-disable-next-line no-restricted-syntax
        Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        // Create error message including the error code in the name.
        _this.stack;
        // Reset the name.
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
    }
    _createClass(AssertionError, [
        {
            key: "toString",
            value: function toString() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
            }
        },
        {
            key: _inspect$custom,
            value: function value(recurseTimes, ctx) {
                // This limits the `actual` and `expected` property default inspection to
                // the minimum depth. Otherwise those values would be too verbose compared
                // to the actual error message which contains a combined view of these two
                // input values.
                return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
                    customInspect: false,
                    depth: 0
                }));
            }
        }
    ]);
    return AssertionError;
}(/*#__PURE__*/ _wrapNativeSuper(Error), inspect.custom);
module.exports = AssertionError;

},{"228da2c254a5e871":"kKEHw","9984e91d63ed614c":"h4AnS","1670766d7c5cef96":"cQb4R"}],"c4EuY":[function(require,module,exports) {
"use strict";
var implementation = require("b7e83063a8ec29e5");
var lacksProperEnumerationOrder = function() {
    if (!Object.assign) return false;
    /*
	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
	 * note: this does not detect the bug unless there's 20 characters
	 */ var str = "abcdefghijklmnopqrst";
    var letters = str.split("");
    var map = {};
    for(var i = 0; i < letters.length; ++i)map[letters[i]] = letters[i];
    var obj = Object.assign({}, map);
    var actual = "";
    for(var k in obj)actual += k;
    return str !== actual;
};
var assignHasPendingExceptions = function() {
    if (!Object.assign || !Object.preventExtensions) return false;
    /*
	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	 * which is 72% slower than our shim, and Firefox 40's native implementation.
	 */ var thrower = Object.preventExtensions({
        1: 2
    });
    try {
        Object.assign(thrower, "xy");
    } catch (e) {
        return thrower[1] === "y";
    }
    return false;
};
module.exports = function getPolyfill() {
    if (!Object.assign) return implementation;
    if (lacksProperEnumerationOrder()) return implementation;
    if (assignHasPendingExceptions()) return implementation;
    return Object.assign;
};

},{"b7e83063a8ec29e5":"hur3X"}],"hur3X":[function(require,module,exports) {
"use strict";
// modified from https://github.com/es-shims/es6-shim
var objectKeys = require("334c0bea01e613e6");
var hasSymbols = require("1964e25feb5e87a1")();
var callBound = require("6fb85b5b56dcab21");
var toObject = Object;
var $push = callBound("Array.prototype.push");
var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
// eslint-disable-next-line no-unused-vars
module.exports = function assign(target, source1) {
    if (target == null) throw new TypeError("target must be an object");
    var to = toObject(target); // step 1
    if (arguments.length === 1) return to; // step 2
    for(var s = 1; s < arguments.length; ++s){
        var from = toObject(arguments[s]); // step 3.a.i
        // step 3.a.ii:
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
            var syms = getSymbols(from);
            for(var j = 0; j < syms.length; ++j){
                var key = syms[j];
                if ($propIsEnumerable(from, key)) $push(keys, key);
            }
        }
        // step 3.a.iii:
        for(var i = 0; i < keys.length; ++i){
            var nextKey = keys[i];
            if ($propIsEnumerable(from, nextKey)) {
                var propValue = from[nextKey]; // step 3.a.iii.2.a
                to[nextKey] = propValue; // step 3.a.iii.2.b
            }
        }
    }
    return to; // step 4
};

},{"334c0bea01e613e6":"67gsy","1964e25feb5e87a1":"5UNSS","6fb85b5b56dcab21":"3u0uq"}],"67gsy":[function(require,module,exports) {
"use strict";
var slice = Array.prototype.slice;
var isArgs = require("93e8460f624c96f4");
var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
    return origKeys(o);
} : require("344bb0d7b2568e03");
var originalKeys = Object.keys;
keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
        var keysWorksWithArguments = function() {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) Object.keys = function keys(object) {
            if (isArgs(object)) return originalKeys(slice.call(object));
            return originalKeys(object);
        };
    } else Object.keys = keysShim;
    return Object.keys || keysShim;
};
module.exports = keysShim;

},{"93e8460f624c96f4":"iaQUP","344bb0d7b2568e03":"5qKds"}],"iaQUP":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
module.exports = function isArguments(value) {
    var str = toStr.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
    return isArgs;
};

},{}],"5qKds":[function(require,module,exports) {
"use strict";
var keysShim;
if (!Object.keys) {
    // modified from https://github.com/es-shims/es5-shim
    var has = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArgs = require("b0d8c8b84be91ffd"); // eslint-disable-line global-require
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({
        toString: null
    }, "toString");
    var hasProtoEnumBug = isEnumerable.call(function() {}, "prototype");
    var dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
    ];
    var equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
    };
    var hasAutomationEqualityBug = function() {
        /* global window */ if (typeof window === "undefined") return false;
        for(var k in window)try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") try {
                equalsConstructorPrototype(window[k]);
            } catch (e) {
                return true;
            }
        } catch (e) {
            return true;
        }
        return false;
    }();
    var equalsConstructorPrototypeIfNotBuggy = function(o) {
        /* global window */ if (typeof window === "undefined" || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
        try {
            return equalsConstructorPrototype(o);
        } catch (e) {
            return false;
        }
    };
    keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) for(var i = 0; i < object.length; ++i)theKeys.push(String(i));
        if (isArguments && object.length > 0) for(var j = 0; j < object.length; ++j)theKeys.push(String(j));
        else {
            for(var name in object)if (!(skipProto && name === "prototype") && has.call(object, name)) theKeys.push(String(name));
        }
        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for(var k = 0; k < dontEnums.length; ++k)if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) theKeys.push(dontEnums[k]);
        }
        return theKeys;
    };
}
module.exports = keysShim;

},{"b0d8c8b84be91ffd":"iaQUP"}],"bhCju":[function(require,module,exports) {
"use strict";
var implementation = require("ff80ab827617d6fd");
module.exports = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation;
};

},{"ff80ab827617d6fd":"2IB6c"}],"2IB6c":[function(require,module,exports) {
"use strict";
var numberIsNaN = function(value) {
    return value !== value;
};
module.exports = function is(a, b) {
    if (a === 0 && b === 0) return 1 / a === 1 / b;
    if (a === b) return true;
    if (numberIsNaN(a) && numberIsNaN(b)) return true;
    return false;
};

},{}],"6yCqR":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t) return;
                f = !1;
            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
    var array = [];
    set.forEach(function(value) {
        return array.push(value);
    });
    return array;
};
var arrayFromMap = function arrayFromMap(map) {
    var array = [];
    map.forEach(function(value, key) {
        return array.push([
            key,
            value
        ]);
    });
    return array;
};
var objectIs = Object.is ? Object.is : require("3addb16fbdd05c1c");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : require("a27e57a3fd2e2e23");
function uncurryThis(f) {
    return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = require("4940125679601087").types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
    if (key.length === 0 || key.length > 10) return true;
    for(var i = 0; i < key.length; i++){
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
    }
    // The maximum size for an array is 2 ** 32 -1.
    return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
}
// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3;
// Check if they have the same source and flags
function areSimilarRegExps(a, b) {
    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    for(var offset = 0; offset < a.byteLength; offset++){
        if (a[offset] !== b[offset]) return false;
    }
    return true;
}
function areSimilarTypedArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
    if (isNumberObject(val1)) return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
    if (isStringObject(val1)) return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
    if (isBooleanObject(val1)) return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
    if (isBigIntObject(val1)) return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
}
// Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.
function innerDeepEqual(val1, val2, strict, memos) {
    // All identical values are equivalent, as determined by ===.
    if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
    }
    // Check more closely if val1 and val2 are equal.
    if (strict) {
        if (_typeof(val1) !== "object") return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) return false;
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) return false;
    } else {
        if (val1 === null || _typeof(val1) !== "object") {
            if (val2 === null || _typeof(val2) !== "object") // eslint-disable-next-line eqeqeq
            return val1 == val2;
            return false;
        }
        if (val2 === null || _typeof(val2) !== "object") return false;
    }
    var val1Tag = objectToString(val1);
    var val2Tag = objectToString(val2);
    if (val1Tag !== val2Tag) return false;
    if (Array.isArray(val1)) {
        // Check for sparse arrays and general fast path
        if (val1.length !== val2.length) return false;
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
    }
    // [browserify] This triggers on certain types in IE (Map/Set) so we don't
    // wan't to early return out of the rest of the checks. However we can check
    // if the second value is one of these values and the first isn't.
    if (val1Tag === "[object Object]") {
        // return keyCheck(val1, val2, strict, memos, kNoIterator);
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) return false;
    }
    if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) return false;
    } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) return false;
    } else if (isNativeError(val1) || val1 instanceof Error) {
        // Do not compare the stack as it might differ even though the error itself
        // is otherwise identical.
        if (val1.message !== val2.message || val1.name !== val2.name) return false;
    } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
            if (!areSimilarFloatArrays(val1, val2)) return false;
        } else if (!areSimilarTypedArrays(val1, val2)) return false;
        // Buffer.compare returns true, so val1.length === val2.length. If they both
        // only contain numeric keys, we don't need to exam further than checking
        // the symbols.
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) return false;
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
    } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsSet);
    } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) return false;
        return keyCheck(val1, val2, strict, memos, kIsMap);
    } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) return false;
    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) return false;
    return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
    return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
    });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
    // For all remaining Object pairs, including Array, objects and Maps,
    // equivalence is determined by having:
    // a) The same number of owned enumerable properties
    // b) The same set of keys/indexes (although not necessarily the same order)
    // c) Equivalent values for every corresponding key/index
    // d) For Sets and Maps, equal contents
    // Note: this accounts for both named and indexed properties on Arrays.
    if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        // The pair must have the same number of owned properties.
        if (aKeys.length !== bKeys.length) return false;
    }
    // Cheap key test
    var i = 0;
    for(; i < aKeys.length; i++){
        if (!hasOwnProperty(val2, aKeys[i])) return false;
    }
    if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
            var count = 0;
            for(i = 0; i < symbolKeysA.length; i++){
                var key = symbolKeysA[i];
                if (propertyIsEnumerable(val1, key)) {
                    if (!propertyIsEnumerable(val2, key)) return false;
                    aKeys.push(key);
                    count++;
                } else if (propertyIsEnumerable(val2, key)) return false;
            }
            var symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) return false;
        } else {
            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) return false;
        }
    }
    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) return true;
    // Use memos to handle cycles.
    if (memos === undefined) memos = {
        val1: new Map(),
        val2: new Map(),
        position: 0
    };
    else {
        // We prevent up to two map.has(x) calls by directly retrieving the value
        // and checking for undefined. The map can only contain numbers, so it is
        // safe to check for undefined only.
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== undefined) {
            var val2MemoB = memos.val2.get(val2);
            if (val2MemoB !== undefined) return val2MemoA === val2MemoB;
        }
        memos.position++;
    }
    memos.val1.set(val1, memos.position);
    memos.val2.set(val2, memos.position);
    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
    memos.val1.delete(val1);
    memos.val2.delete(val2);
    return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
    // Go looking.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
            // Remove the matching element to make sure we do not check that again.
            set.delete(val2);
            return true;
        }
    }
    return false;
}
// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
    switch(_typeof(prim)){
        case "undefined":
            return null;
        case "object":
            // Only pass in null as object!
            return undefined;
        case "symbol":
            return false;
        case "string":
            prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case "number":
            if (numberIsNaN(prim)) return false;
    }
    return true;
}
function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    var curB = b.get(altValue);
    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) return false;
    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
    // This is a lazily initiated Set of entries which have to be compared
    // pairwise.
    var set = null;
    var aValues = arrayFromSet(a);
    for(var i = 0; i < aValues.length; i++){
        var val = aValues[i];
        // Note: Checking for the objects first improves the performance for object
        // heavy sets but it is a minor slow down for primitives. As they are fast
        // to check this improves the worst case scenario instead.
        if (_typeof(val) === "object" && val !== null) {
            if (set === null) set = new Set();
            // If the specified value doesn't exist in the second set its an not null
            // object (or non strict only: a not matching primitive) we'll need to go
            // hunting for something thats deep-(strict-)equal to it. To make this
            // O(n log n) complexity we have to copy these values in a new set first.
            set.add(val);
        } else if (!b.has(val)) {
            if (strict) return false;
            // Fast path to detect missing string, symbol, undefined and null values.
            if (!setMightHaveLoosePrim(a, b, val)) return false;
            if (set === null) set = new Set();
            set.add(val);
        }
    }
    if (set !== null) {
        var bValues = arrayFromSet(b);
        for(var _i = 0; _i < bValues.length; _i++){
            var _val = bValues[_i];
            // We have to check if a primitive value is already
            // matching and only if it's not, go hunting for it.
            if (_typeof(_val) === "object" && _val !== null) {
                if (!setHasEqualElement(set, _val, strict, memo)) return false;
            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
    // To be able to handle cases like:
    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
    // ... we need to consider *all* matching keys, not just the first we find.
    var setValues = arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
            set.delete(key2);
            return true;
        }
    }
    return false;
}
function mapEquiv(a, b, strict, memo) {
    var set = null;
    var aEntries = arrayFromMap(a);
    for(var i = 0; i < aEntries.length; i++){
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
            if (set === null) set = new Set();
            set.add(key);
        } else {
            // By directly retrieving the value we prevent another b.has(key) check in
            // almost all possible cases.
            var item2 = b.get(key);
            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                if (strict) return false;
                // Fast path to detect missing string, symbol, undefined and null
                // keys.
                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                if (set === null) set = new Set();
                set.add(key);
            }
        }
    }
    if (set !== null) {
        var bEntries = arrayFromMap(b);
        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
            if (_typeof(_key) === "object" && _key !== null) {
                if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
            } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
    // Sets and maps don't have their entries accessible via normal object
    // properties.
    var i = 0;
    if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === kIsArray) for(; i < a.length; i++){
        if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) return false;
        } else if (hasOwnProperty(b, i)) return false;
        else {
            // Array is sparse.
            var keysA = Object.keys(a);
            for(; i < keysA.length; i++){
                var key = keysA[i];
                if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) return false;
            }
            if (keysA.length !== Object.keys(b).length) return false;
            return true;
        }
    }
    // The pair must have equivalent values for every corresponding key.
    // Possibly expensive deep test:
    for(i = 0; i < keys.length; i++){
        var _key2 = keys[i];
        if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) return false;
    }
    return true;
}
function isDeepEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
    return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
    isDeepEqual: isDeepEqual,
    isDeepStrictEqual: isDeepStrictEqual
};

},{"3addb16fbdd05c1c":"8lNUw","a27e57a3fd2e2e23":"eFAV3","4940125679601087":"h4AnS"}],"8lNUw":[function(require,module,exports) {
"use strict";
var define = require("7a0bb7df335a6af");
var callBind = require("794ce1103c4a65ba");
var implementation = require("f52a71fcf365d3bd");
var getPolyfill = require("59addbaef079e040");
var shim = require("c0e8b0f7342ba484");
var polyfill = callBind(getPolyfill(), Object);
define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"7a0bb7df335a6af":"XVQ2G","794ce1103c4a65ba":"dr8J5","f52a71fcf365d3bd":"2IB6c","59addbaef079e040":"bhCju","c0e8b0f7342ba484":"bHd3G"}],"XVQ2G":[function(require,module,exports) {
"use strict";
var keys = require("7ff177585d1618f0");
var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require("84ca194f5a28ce70");
var isFunction = function(fn) {
    return typeof fn === "function" && toStr.call(fn) === "[object Function]";
};
var supportsDescriptors = require("c52d62086511583f")();
var defineProperty = function(object, name, value, predicate) {
    if (name in object) {
        if (predicate === true) {
            if (object[name] === value) return;
        } else if (!isFunction(predicate) || !predicate()) return;
    }
    if (supportsDescriptors) defineDataProperty(object, name, value, true);
    else defineDataProperty(object, name, value);
};
var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols) props = concat.call(props, Object.getOwnPropertySymbols(map));
    for(var i = 0; i < props.length; i += 1)defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

},{"7ff177585d1618f0":"67gsy","84ca194f5a28ce70":"iagib","c52d62086511583f":"7jwG1"}],"bHd3G":[function(require,module,exports) {
"use strict";
var getPolyfill = require("f188d636391a5061");
var define = require("155865cffc557cd");
module.exports = function shimObjectIs() {
    var polyfill = getPolyfill();
    define(Object, {
        is: polyfill
    }, {
        is: function testObjectIs() {
            return Object.is !== polyfill;
        }
    });
    return polyfill;
};

},{"f188d636391a5061":"bhCju","155865cffc557cd":"XVQ2G"}],"eFAV3":[function(require,module,exports) {
"use strict";
var callBind = require("8bc778ead6edc2b");
var define = require("1e9a111647ec40d6");
var implementation = require("db9e8266e38a0a1c");
var getPolyfill = require("37ae20d268339d21");
var shim = require("9fe13ad91d3d9c68");
var polyfill = callBind(getPolyfill(), Number);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});
module.exports = polyfill;

},{"8bc778ead6edc2b":"dr8J5","1e9a111647ec40d6":"XVQ2G","db9e8266e38a0a1c":"8Ug11","37ae20d268339d21":"cDoH9","9fe13ad91d3d9c68":"2KeFc"}],"8Ug11":[function(require,module,exports) {
"use strict";
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function isNaN(value) {
    return value !== value;
};

},{}],"cDoH9":[function(require,module,exports) {
"use strict";
var implementation = require("e25466f067cfd8fc");
module.exports = function getPolyfill() {
    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) return Number.isNaN;
    return implementation;
};

},{"e25466f067cfd8fc":"8Ug11"}],"2KeFc":[function(require,module,exports) {
"use strict";
var define = require("6e613ddb8bace1c6");
var getPolyfill = require("f2ce5ac0488eb372");
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function shimNumberIsNaN() {
    var polyfill = getPolyfill();
    define(Number, {
        isNaN: polyfill
    }, {
        isNaN: function testIsNaN() {
            return Number.isNaN !== polyfill;
        }
    });
    return polyfill;
};

},{"6e613ddb8bace1c6":"XVQ2G","f2ce5ac0488eb372":"cDoH9"}],"6F3kl":[function(require,module,exports) {
// This is not the set of all possible signals.
//
// It IS, however, the set of all signals that trigger
// an exit on either Linux or BSD systems.  Linux is a
// superset of the signal names supported on BSD, and
// the unknown signals just fail to register, so we can
// catch that easily enough.
//
// Don't bother with SIGKILL.  It's uncatchable, which
// means that we can't fire any callbacks anyway.
//
// If a user does happen to register a handler on a non-
// fatal signal like SIGWINCH or something, and then
// exit, it'll end up firing `process.emit('exit')`, so
// the handler will be fired anyway.
//
// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
// artificially, inherently leave the process in a
// state from which it is not safe to try and enter JS
// listeners.
var process = require("145b97b75bbb08f6");
module.exports = [
    "SIGABRT",
    "SIGALRM",
    "SIGHUP",
    "SIGINT",
    "SIGTERM"
];
if (process.platform !== "win32") module.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
if (process.platform === "linux") module.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");

},{"145b97b75bbb08f6":"kKEHw"}],"3FaP3":[function(require,module,exports) {
"use strict";
var color = require("dad780f9f1e012a7").color;
var ThemeSet = require("cbb6728cddf934f9");
var themes = module.exports = new ThemeSet();
themes.addTheme("ASCII", {
    preProgressbar: "[",
    postProgressbar: "]",
    progressbarTheme: {
        complete: "#",
        remaining: "."
    },
    activityIndicatorTheme: "-\\|/",
    preSubsection: ">"
});
themes.addTheme("colorASCII", themes.getTheme("ASCII"), {
    progressbarTheme: {
        preComplete: color("bgBrightWhite", "brightWhite"),
        complete: "#",
        postComplete: color("reset"),
        preRemaining: color("bgBrightBlack", "brightBlack"),
        remaining: ".",
        postRemaining: color("reset")
    }
});
themes.addTheme("brailleSpinner", {
    preProgressbar: "\u2E28",
    postProgressbar: "\u2E29",
    progressbarTheme: {
        complete: "#",
        remaining: "\u2802"
    },
    activityIndicatorTheme: "\u280B\u2819\u2839\u2838\u283C\u2834\u2826\u2827\u2807\u280F",
    preSubsection: ">"
});
themes.addTheme("colorBrailleSpinner", themes.getTheme("brailleSpinner"), {
    progressbarTheme: {
        preComplete: color("bgBrightWhite", "brightWhite"),
        complete: "#",
        postComplete: color("reset"),
        preRemaining: color("bgBrightBlack", "brightBlack"),
        remaining: "\u2802",
        postRemaining: color("reset")
    }
});
themes.setDefault({}, "ASCII");
themes.setDefault({
    hasColor: true
}, "colorASCII");
themes.setDefault({
    platform: "darwin",
    hasUnicode: true
}, "brailleSpinner");
themes.setDefault({
    platform: "darwin",
    hasUnicode: true,
    hasColor: true
}, "colorBrailleSpinner");
themes.setDefault({
    platform: "linux",
    hasUnicode: true
}, "brailleSpinner");
themes.setDefault({
    platform: "linux",
    hasUnicode: true,
    hasColor: true
}, "colorBrailleSpinner");

},{"dad780f9f1e012a7":"dfAAb","cbb6728cddf934f9":"eqdqC"}],"eqdqC":[function(require,module,exports) {
var process = require("9b9cf4e2fd041bad");
"use strict";
var objectAssign = require("150f16a835a706b2");
module.exports = function() {
    return ThemeSetProto.newThemeSet();
};
var ThemeSetProto = {};
ThemeSetProto.baseTheme = require("c193edd384f16f4e");
ThemeSetProto.newTheme = function(parent, theme) {
    if (!theme) {
        theme = parent;
        parent = this.baseTheme;
    }
    return objectAssign({}, parent, theme);
};
ThemeSetProto.getThemeNames = function() {
    return Object.keys(this.themes);
};
ThemeSetProto.addTheme = function(name, parent, theme) {
    this.themes[name] = this.newTheme(parent, theme);
};
ThemeSetProto.addToAllThemes = function(theme) {
    var themes = this.themes;
    Object.keys(themes).forEach(function(name) {
        objectAssign(themes[name], theme);
    });
    objectAssign(this.baseTheme, theme);
};
ThemeSetProto.getTheme = function(name) {
    if (!this.themes[name]) throw this.newMissingThemeError(name);
    return this.themes[name];
};
ThemeSetProto.setDefault = function(opts, name) {
    if (name == null) {
        name = opts;
        opts = {};
    }
    var platform = opts.platform == null ? "fallback" : opts.platform;
    var hasUnicode = !!opts.hasUnicode;
    var hasColor = !!opts.hasColor;
    if (!this.defaults[platform]) this.defaults[platform] = {
        true: {},
        false: {}
    };
    this.defaults[platform][hasUnicode][hasColor] = name;
};
ThemeSetProto.getDefault = function(opts) {
    if (!opts) opts = {};
    var platformName = opts.platform || process.platform;
    var platform = this.defaults[platformName] || this.defaults.fallback;
    var hasUnicode = !!opts.hasUnicode;
    var hasColor = !!opts.hasColor;
    if (!platform) throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);
    if (!platform[hasUnicode][hasColor]) {
        if (hasUnicode && hasColor && platform[!hasUnicode][hasColor]) hasUnicode = false;
        else if (hasUnicode && hasColor && platform[hasUnicode][!hasColor]) hasColor = false;
        else if (hasUnicode && hasColor && platform[!hasUnicode][!hasColor]) {
            hasUnicode = false;
            hasColor = false;
        } else if (hasUnicode && !hasColor && platform[!hasUnicode][hasColor]) hasUnicode = false;
        else if (!hasUnicode && hasColor && platform[hasUnicode][!hasColor]) hasColor = false;
        else if (platform === this.defaults.fallback) throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);
    }
    if (platform[hasUnicode][hasColor]) return this.getTheme(platform[hasUnicode][hasColor]);
    else return this.getDefault(objectAssign({}, opts, {
        platform: "fallback"
    }));
};
ThemeSetProto.newMissingThemeError = function newMissingThemeError(name) {
    var err = new Error('Could not find a gauge theme named "' + name + '"');
    Error.captureStackTrace.call(err, newMissingThemeError);
    err.theme = name;
    err.code = "EMISSINGTHEME";
    return err;
};
ThemeSetProto.newMissingDefaultThemeError = function newMissingDefaultThemeError(platformName, hasUnicode, hasColor) {
    var err = new Error("Could not find a gauge theme for your platform/unicode/color use combo:\n    platform = " + platformName + "\n" + "    hasUnicode = " + hasUnicode + "\n" + "    hasColor = " + hasColor);
    Error.captureStackTrace.call(err, newMissingDefaultThemeError);
    err.platform = platformName;
    err.hasUnicode = hasUnicode;
    err.hasColor = hasColor;
    err.code = "EMISSINGTHEME";
    return err;
};
ThemeSetProto.newThemeSet = function() {
    var themeset = function(opts) {
        return themeset.getDefault(opts);
    };
    return objectAssign(themeset, ThemeSetProto, {
        themes: objectAssign({}, this.themes),
        baseTheme: objectAssign({}, this.baseTheme),
        defaults: JSON.parse(JSON.stringify(this.defaults || {}))
    });
};

},{"9b9cf4e2fd041bad":"kKEHw","150f16a835a706b2":"5kgn5","c193edd384f16f4e":"1Z4OE"}],"5kgn5":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ "use strict";
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2["_" + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join("") !== "0123456789") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"1Z4OE":[function(require,module,exports) {
"use strict";
var spin = require("5f6fe2831c8a6cee");
var progressBar = require("858f6c5eb946e30a");
module.exports = {
    activityIndicator: function(values, theme, width) {
        if (values.spun == null) return;
        return spin(theme, values.spun);
    },
    progressbar: function(values, theme, width) {
        if (values.completed == null) return;
        return progressBar(theme, width, values.completed);
    }
};

},{"5f6fe2831c8a6cee":"e8qwO","858f6c5eb946e30a":"abGJr"}],"e8qwO":[function(require,module,exports) {
"use strict";
module.exports = function spin(spinstr, spun) {
    return spinstr[spun % spinstr.length];
};

},{}],"abGJr":[function(require,module,exports) {
"use strict";
var validate = require("74a1b18c0caf29ad");
var renderTemplate = require("7cfea4a0f1fb0b18");
var wideTruncate = require("a2bb9ae740b486c");
var stringWidth = require("aa8ade921aabc931");
module.exports = function(theme, width, completed) {
    validate("ONN", [
        theme,
        width,
        completed
    ]);
    if (completed < 0) completed = 0;
    if (completed > 1) completed = 1;
    if (width <= 0) return "";
    var sofar = Math.round(width * completed);
    var rest = width - sofar;
    var template = [
        {
            type: "complete",
            value: repeat(theme.complete, sofar),
            length: sofar
        },
        {
            type: "remaining",
            value: repeat(theme.remaining, rest),
            length: rest
        }
    ];
    return renderTemplate(width, template, theme);
};
// lodash's way of repeating
function repeat(string, width) {
    var result = "";
    var n = width;
    do {
        if (n % 2) result += string;
        n = Math.floor(n / 2);
        /* eslint no-self-assign: 0 */ string += string;
    }while (n && stringWidth(result) < width);
    return wideTruncate(result, width);
}

},{"74a1b18c0caf29ad":"gpLe7","7cfea4a0f1fb0b18":"71ZrS","a2bb9ae740b486c":"8erMh","aa8ade921aabc931":"973St"}],"2almF":[function(require,module,exports) {
"use strict";
// this exists so we can replace it during testing
module.exports = setInterval;

},{}],"a3apA":[function(require,module,exports) {
var process = require("2bde6780ab849177");
"use strict";
// this exists so we can replace it during testing
module.exports = process;

},{"2bde6780ab849177":"kKEHw"}],"f2NE3":[function(require,module,exports) {
"use strict";
var process = require("e7c7e50260fab7a4");
try {
    module.exports = setImmediate;
} catch (ex) {
    module.exports = process.nextTick;
}

},{"e7c7e50260fab7a4":"a3apA"}],"2DEIS":[function(require,module,exports) {
var process = require("84b5ce1ee7c68eef");
module.exports = function(blocking) {
    [
        process.stdout,
        process.stderr
    ].forEach(function(stream) {
        if (stream._handle && stream.isTTY && typeof stream._handle.setBlocking === "function") stream._handle.setBlocking(blocking);
    });
};

},{"84b5ce1ee7c68eef":"kKEHw"}],"1SHwg":[function(require,module,exports) {
var process = require("46844a23ec118efe");
"use strict";
const fs = require("a6c446df4342706b");
module.exports = exports;
const versionArray = process.version.substr(1).replace(/-.*$/, "").split(".").map((item)=>{
    return +item;
});
const napi_multiple_commands = [
    "build",
    "clean",
    "configure",
    "package",
    "publish",
    "reveal",
    "testbinary",
    "testpackage",
    "unpublish"
];
const napi_build_version_tag = "napi_build_version=";
module.exports.get_napi_version = function() {
    // returns the non-zero numeric napi version or undefined if napi is not supported.
    // correctly supporting target requires an updated cross-walk
    let version = process.versions.napi; // can be undefined
    if (!version) {
        if (versionArray[0] === 9 && versionArray[1] >= 3) version = 2; // 9.3.0+
        else if (versionArray[0] === 8) version = 1; // 8.0.0+
    }
    return version;
};
module.exports.get_napi_version_as_string = function(target) {
    // returns the napi version as a string or an empty string if napi is not supported.
    const version = module.exports.get_napi_version(target);
    return version ? "" + version : "";
};
module.exports.validate_package_json = function(package_json, opts) {
    const binary = package_json.binary;
    const module_path_ok = pathOK(binary.module_path);
    const remote_path_ok = pathOK(binary.remote_path);
    const package_name_ok = pathOK(binary.package_name);
    const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts, true);
    const napi_build_versions_raw = module.exports.get_napi_build_versions_raw(package_json);
    if (napi_build_versions) napi_build_versions.forEach((napi_build_version)=>{
        if (!(parseInt(napi_build_version, 10) === napi_build_version && napi_build_version > 0)) throw new Error("All values specified in napi_versions must be positive integers.");
    });
    if (napi_build_versions && (!module_path_ok || !remote_path_ok && !package_name_ok)) throw new Error("When napi_versions is specified; module_path and either remote_path or package_name must contain the substitution string '{napi_build_version}`.");
    if ((module_path_ok || remote_path_ok || package_name_ok) && !napi_build_versions_raw) throw new Error("When the substitution string '{napi_build_version}` is specified in module_path, remote_path, or package_name; napi_versions must also be specified.");
    if (napi_build_versions && !module.exports.get_best_napi_build_version(package_json, opts) && module.exports.build_napi_only(package_json)) throw new Error("The Node-API version of this Node instance is " + module.exports.get_napi_version(opts ? opts.target : undefined) + ". " + "This module supports Node-API version(s) " + module.exports.get_napi_build_versions_raw(package_json) + ". " + "This Node instance cannot run this module.");
    if (napi_build_versions_raw && !napi_build_versions && module.exports.build_napi_only(package_json)) throw new Error("The Node-API version of this Node instance is " + module.exports.get_napi_version(opts ? opts.target : undefined) + ". " + "This module supports Node-API version(s) " + module.exports.get_napi_build_versions_raw(package_json) + ". " + "This Node instance cannot run this module.");
};
function pathOK(path) {
    return path && (path.indexOf("{napi_build_version}") !== -1 || path.indexOf("{node_napi_label}") !== -1);
}
module.exports.expand_commands = function(package_json, opts, commands) {
    const expanded_commands = [];
    const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);
    commands.forEach((command)=>{
        if (napi_build_versions && command.name === "install") {
            const napi_build_version = module.exports.get_best_napi_build_version(package_json, opts);
            const args = napi_build_version ? [
                napi_build_version_tag + napi_build_version
            ] : [];
            expanded_commands.push({
                name: command.name,
                args: args
            });
        } else if (napi_build_versions && napi_multiple_commands.indexOf(command.name) !== -1) napi_build_versions.forEach((napi_build_version)=>{
            const args = command.args.slice();
            args.push(napi_build_version_tag + napi_build_version);
            expanded_commands.push({
                name: command.name,
                args: args
            });
        });
        else expanded_commands.push(command);
    });
    return expanded_commands;
};
module.exports.get_napi_build_versions = function(package_json, opts, warnings) {
    const log = require("b7335f35455e7ff6");
    let napi_build_versions = [];
    const supported_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);
    // remove duplicates, verify each napi version can actaully be built
    if (package_json.binary && package_json.binary.napi_versions) package_json.binary.napi_versions.forEach((napi_version)=>{
        const duplicated = napi_build_versions.indexOf(napi_version) !== -1;
        if (!duplicated && supported_napi_version && napi_version <= supported_napi_version) napi_build_versions.push(napi_version);
        else if (warnings && !duplicated && supported_napi_version) log.info("This Node instance does not support builds for Node-API version", napi_version);
    });
    if (opts && opts["build-latest-napi-version-only"]) {
        let latest_version = 0;
        napi_build_versions.forEach((napi_version)=>{
            if (napi_version > latest_version) latest_version = napi_version;
        });
        napi_build_versions = latest_version ? [
            latest_version
        ] : [];
    }
    return napi_build_versions.length ? napi_build_versions : undefined;
};
module.exports.get_napi_build_versions_raw = function(package_json) {
    const napi_build_versions = [];
    // remove duplicates
    if (package_json.binary && package_json.binary.napi_versions) package_json.binary.napi_versions.forEach((napi_version)=>{
        if (napi_build_versions.indexOf(napi_version) === -1) napi_build_versions.push(napi_version);
    });
    return napi_build_versions.length ? napi_build_versions : undefined;
};
module.exports.get_command_arg = function(napi_build_version) {
    return napi_build_version_tag + napi_build_version;
};
module.exports.get_napi_build_version_from_command_args = function(command_args) {
    for(let i = 0; i < command_args.length; i++){
        const arg = command_args[i];
        if (arg.indexOf(napi_build_version_tag) === 0) return parseInt(arg.substr(napi_build_version_tag.length), 10);
    }
    return undefined;
};
module.exports.swap_build_dir_out = function(napi_build_version) {
    if (napi_build_version) {
        const rm = require("44314b4572b6b34b");
        rm.sync(module.exports.get_build_dir(napi_build_version));
        fs.renameSync("build", module.exports.get_build_dir(napi_build_version));
    }
};
module.exports.swap_build_dir_in = function(napi_build_version) {
    if (napi_build_version) {
        const rm = require("44314b4572b6b34b");
        rm.sync("build");
        fs.renameSync(module.exports.get_build_dir(napi_build_version), "build");
    }
};
module.exports.get_build_dir = function(napi_build_version) {
    return "build-tmp-napi-v" + napi_build_version;
};
module.exports.get_best_napi_build_version = function(package_json, opts) {
    let best_napi_build_version = 0;
    const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);
    if (napi_build_versions) {
        const our_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);
        napi_build_versions.forEach((napi_build_version)=>{
            if (napi_build_version > best_napi_build_version && napi_build_version <= our_napi_version) best_napi_build_version = napi_build_version;
        });
    }
    return best_napi_build_version === 0 ? undefined : best_napi_build_version;
};
module.exports.build_napi_only = function(package_json) {
    return package_json.binary && package_json.binary.package_name && package_json.binary.package_name.indexOf("{node_napi_label}") === -1;
};

},{"46844a23ec118efe":"kKEHw","a6c446df4342706b":"4oI9L","b7335f35455e7ff6":"jN8cz","44314b4572b6b34b":"5Kunb"}],"5Kunb":[function(require,module,exports) {
var process = require("acb468997d6f3369");
const assert = require("b5ecf9792491c2d8");
const path = require("df5c866e1c1d28b8");
const fs = require("6b43e67f96ae8b44");
let glob = undefined;
try {
    glob = require("af7367a63680588a");
} catch (_err) {
// treat glob as optional.
}
const defaultGlobOpts = {
    nosort: true,
    silent: true
};
// for EMFILE handling
let timeout = 0;
const isWindows = process.platform === "win32";
const defaults = (options)=>{
    const methods = [
        "unlink",
        "chmod",
        "stat",
        "lstat",
        "rmdir",
        "readdir"
    ];
    methods.forEach((m)=>{
        options[m] = options[m] || fs[m];
        m = m + "Sync";
        options[m] = options[m] || fs[m];
    });
    options.maxBusyTries = options.maxBusyTries || 3;
    options.emfileWait = options.emfileWait || 1000;
    if (options.glob === false) options.disableGlob = true;
    if (options.disableGlob !== true && glob === undefined) throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");
    options.disableGlob = options.disableGlob || false;
    options.glob = options.glob || defaultGlobOpts;
};
const rimraf = (p, options, cb)=>{
    if (typeof options === "function") {
        cb = options;
        options = {};
    }
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert.equal(typeof cb, "function", "rimraf: callback function required");
    assert(options, "rimraf: invalid options argument provided");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    defaults(options);
    let busyTries = 0;
    let errState = null;
    let n = 0;
    const next = (er)=>{
        errState = errState || er;
        if (--n === 0) cb(errState);
    };
    const afterGlob = (er, results)=>{
        if (er) return cb(er);
        n = results.length;
        if (n === 0) return cb();
        results.forEach((p)=>{
            const CB = (er)=>{
                if (er) {
                    if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
                        busyTries++;
                        // try again, with the same exact callback as this one.
                        return setTimeout(()=>rimraf_(p, options, CB), busyTries * 100);
                    }
                    // this one won't happen if graceful-fs is used.
                    if (er.code === "EMFILE" && timeout < options.emfileWait) return setTimeout(()=>rimraf_(p, options, CB), timeout++);
                    // already gone
                    if (er.code === "ENOENT") er = null;
                }
                timeout = 0;
                next(er);
            };
            rimraf_(p, options, CB);
        });
    };
    if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [
        p
    ]);
    options.lstat(p, (er, stat)=>{
        if (!er) return afterGlob(null, [
            p
        ]);
        glob(p, options.glob, afterGlob);
    });
};
// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
const rimraf_ = (p, options, cb)=>{
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    // sunos lets the root user unlink directories, which is... weird.
    // so we have to lstat here and make sure it's not a dir.
    options.lstat(p, (er, st)=>{
        if (er && er.code === "ENOENT") return cb(null);
        // Windows can EPERM on stat.  Life is suffering.
        if (er && er.code === "EPERM" && isWindows) fixWinEPERM(p, options, er, cb);
        if (st && st.isDirectory()) return rmdir(p, options, er, cb);
        options.unlink(p, (er)=>{
            if (er) {
                if (er.code === "ENOENT") return cb(null);
                if (er.code === "EPERM") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
                if (er.code === "EISDIR") return rmdir(p, options, er, cb);
            }
            return cb(er);
        });
    });
};
const fixWinEPERM = (p, options, er, cb)=>{
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.chmod(p, 438, (er2)=>{
        if (er2) cb(er2.code === "ENOENT" ? null : er);
        else options.stat(p, (er3, stats)=>{
            if (er3) cb(er3.code === "ENOENT" ? null : er);
            else if (stats.isDirectory()) rmdir(p, options, er, cb);
            else options.unlink(p, cb);
        });
    });
};
const fixWinEPERMSync = (p, options, er)=>{
    assert(p);
    assert(options);
    try {
        options.chmodSync(p, 438);
    } catch (er2) {
        if (er2.code === "ENOENT") return;
        else throw er;
    }
    let stats;
    try {
        stats = options.statSync(p);
    } catch (er3) {
        if (er3.code === "ENOENT") return;
        else throw er;
    }
    if (stats.isDirectory()) rmdirSync(p, options, er);
    else options.unlinkSync(p);
};
const rmdir = (p, options, originalEr, cb)=>{
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
    // if we guessed wrong, and it's not a directory, then
    // raise the original error.
    options.rmdir(p, (er)=>{
        if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p, options, cb);
        else if (er && er.code === "ENOTDIR") cb(originalEr);
        else cb(er);
    });
};
const rmkids = (p, options, cb)=>{
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.readdir(p, (er, files)=>{
        if (er) return cb(er);
        let n = files.length;
        if (n === 0) return options.rmdir(p, cb);
        let errState;
        files.forEach((f)=>{
            rimraf(path.join(p, f), options, (er)=>{
                if (errState) return;
                if (er) return cb(errState = er);
                if (--n === 0) options.rmdir(p, cb);
            });
        });
    });
};
// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
const rimrafSync = (p, options)=>{
    options = options || {};
    defaults(options);
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert(options, "rimraf: missing options");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    let results;
    if (options.disableGlob || !glob.hasMagic(p)) results = [
        p
    ];
    else try {
        options.lstatSync(p);
        results = [
            p
        ];
    } catch (er) {
        results = glob.sync(p, options.glob);
    }
    if (!results.length) return;
    for(let i = 0; i < results.length; i++){
        const p = results[i];
        let st;
        try {
            st = options.lstatSync(p);
        } catch (er) {
            if (er.code === "ENOENT") return;
            // Windows can EPERM on stat.  Life is suffering.
            if (er.code === "EPERM" && isWindows) fixWinEPERMSync(p, options, er);
        }
        try {
            // sunos lets the root user unlink directories, which is... weird.
            if (st && st.isDirectory()) rmdirSync(p, options, null);
            else options.unlinkSync(p);
        } catch (er) {
            if (er.code === "ENOENT") return;
            if (er.code === "EPERM") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
            if (er.code !== "EISDIR") throw er;
            rmdirSync(p, options, er);
        }
    }
};
const rmdirSync = (p, options, originalEr)=>{
    assert(p);
    assert(options);
    try {
        options.rmdirSync(p);
    } catch (er) {
        if (er.code === "ENOENT") return;
        if (er.code === "ENOTDIR") throw originalEr;
        if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p, options);
    }
};
const rmkidsSync = (p, options)=>{
    assert(p);
    assert(options);
    options.readdirSync(p).forEach((f)=>rimrafSync(path.join(p, f), options));
    // We only end up here once we got ENOTEMPTY at least once, and
    // at this point, we are guaranteed to have removed all the kids.
    // So, we know that it won't be ENOENT or ENOTDIR or anything else.
    // try really hard to delete stuff on windows, because it has a
    // PROFOUNDLY annoying habit of not closing handles promptly when
    // files are deleted, resulting in spurious ENOTEMPTY errors.
    const retries = isWindows ? 100 : 1;
    let i = 0;
    do {
        let threw = true;
        try {
            const ret = options.rmdirSync(p, options);
            threw = false;
            return ret;
        } finally{
            if (++i < retries && threw) continue;
        }
    }while (true);
};
module.exports = rimraf;
rimraf.sync = rimrafSync;

},{"acb468997d6f3369":"kKEHw","b5ecf9792491c2d8":"bNzhs","df5c866e1c1d28b8":"i1BLo","6b43e67f96ae8b44":"4oI9L","af7367a63680588a":"5ozyg"}],"5ozyg":[function(require,module,exports) {
// Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.
var process = require("bbdeb104da9f01e3");
module.exports = glob;
var rp = require("5bc582ba8c5257ad");
var minimatch = require("d952e023bff267a9");
var Minimatch = minimatch.Minimatch;
var inherits = require("1f6409d1d9e2296d");
var EE = require("400ffd571443a607").EventEmitter;
var path = require("da618e4abd48dced");
var assert = require("2ccb70913ac4c2df");
var isAbsolute = require("412bcf4c26fe29f7");
var globSync = require("420b2074cb0d1f5");
var common = require("7279b2d57007e8ad");
var setopts = common.setopts;
var ownProp = common.ownProp;
var inflight = require("71890ac15acf66af");
var util = require("f31573398d4da3f1");
var childrenIgnored = common.childrenIgnored;
var isIgnored = common.isIgnored;
var once = require("a14e1ad70f85c3f5");
function glob(pattern, options, cb) {
    if (typeof options === "function") cb = options, options = {};
    if (!options) options = {};
    if (options.sync) {
        if (cb) throw new TypeError("callback provided to sync glob");
        return globSync(pattern, options);
    }
    return new Glob(pattern, options, cb);
}
glob.sync = globSync;
var GlobSync = glob.GlobSync = globSync.GlobSync;
// old api surface
glob.glob = glob;
function extend(origin, add) {
    if (add === null || typeof add !== "object") return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
}
glob.hasMagic = function(pattern, options_) {
    var options = extend({}, options_);
    options.noprocess = true;
    var g = new Glob(pattern, options);
    var set = g.minimatch.set;
    if (!pattern) return false;
    if (set.length > 1) return true;
    for(var j = 0; j < set[0].length; j++){
        if (typeof set[0][j] !== "string") return true;
    }
    return false;
};
glob.Glob = Glob;
inherits(Glob, EE);
function Glob(pattern, options, cb) {
    if (typeof options === "function") {
        cb = options;
        options = null;
    }
    if (options && options.sync) {
        if (cb) throw new TypeError("callback provided to sync glob");
        return new GlobSync(pattern, options);
    }
    if (!(this instanceof Glob)) return new Glob(pattern, options, cb);
    setopts(this, pattern, options);
    this._didRealPath = false;
    // process each pattern in the minimatch set
    var n = this.minimatch.set.length;
    // The matches are stored as {<filename>: true,...} so that
    // duplicates are automagically pruned.
    // Later, we do an Object.keys() on these.
    // Keep them as a list so we can fill in when nonull is set.
    this.matches = new Array(n);
    if (typeof cb === "function") {
        cb = once(cb);
        this.on("error", cb);
        this.on("end", function(matches) {
            cb(null, matches);
        });
    }
    var self = this;
    this._processing = 0;
    this._emitQueue = [];
    this._processQueue = [];
    this.paused = false;
    if (this.noprocess) return this;
    if (n === 0) return done();
    var sync = true;
    for(var i = 0; i < n; i++)this._process(this.minimatch.set[i], i, false, done);
    sync = false;
    function done() {
        --self._processing;
        if (self._processing <= 0) {
            if (sync) process.nextTick(function() {
                self._finish();
            });
            else self._finish();
        }
    }
}
Glob.prototype._finish = function() {
    assert(this instanceof Glob);
    if (this.aborted) return;
    if (this.realpath && !this._didRealpath) return this._realpath();
    common.finish(this);
    this.emit("end", this.found);
};
Glob.prototype._realpath = function() {
    if (this._didRealpath) return;
    this._didRealpath = true;
    var n = this.matches.length;
    if (n === 0) return this._finish();
    var self = this;
    for(var i = 0; i < this.matches.length; i++)this._realpathSet(i, next);
    function next() {
        if (--n === 0) self._finish();
    }
};
Glob.prototype._realpathSet = function(index, cb) {
    var matchset = this.matches[index];
    if (!matchset) return cb();
    var found = Object.keys(matchset);
    var self = this;
    var n = found.length;
    if (n === 0) return cb();
    var set = this.matches[index] = Object.create(null);
    found.forEach(function(p, i) {
        // If there's a problem with the stat, then it means that
        // one or more of the links in the realpath couldn't be
        // resolved.  just return the abs value in that case.
        p = self._makeAbs(p);
        rp.realpath(p, self.realpathCache, function(er, real) {
            if (!er) set[real] = true;
            else if (er.syscall === "stat") set[p] = true;
            else self.emit("error", er) // srsly wtf right here
            ;
            if (--n === 0) {
                self.matches[index] = set;
                cb();
            }
        });
    });
};
Glob.prototype._mark = function(p) {
    return common.mark(this, p);
};
Glob.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
};
Glob.prototype.abort = function() {
    this.aborted = true;
    this.emit("abort");
};
Glob.prototype.pause = function() {
    if (!this.paused) {
        this.paused = true;
        this.emit("pause");
    }
};
Glob.prototype.resume = function() {
    if (this.paused) {
        this.emit("resume");
        this.paused = false;
        if (this._emitQueue.length) {
            var eq = this._emitQueue.slice(0);
            this._emitQueue.length = 0;
            for(var i = 0; i < eq.length; i++){
                var e = eq[i];
                this._emitMatch(e[0], e[1]);
            }
        }
        if (this._processQueue.length) {
            var pq = this._processQueue.slice(0);
            this._processQueue.length = 0;
            for(var i = 0; i < pq.length; i++){
                var p = pq[i];
                this._processing--;
                this._process(p[0], p[1], p[2], p[3]);
            }
        }
    }
};
Glob.prototype._process = function(pattern, index, inGlobStar, cb) {
    assert(this instanceof Glob);
    assert(typeof cb === "function");
    if (this.aborted) return;
    this._processing++;
    if (this.paused) {
        this._processQueue.push([
            pattern,
            index,
            inGlobStar,
            cb
        ]);
        return;
    }
    //console.error('PROCESS %d', this._processing, pattern)
    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while(typeof pattern[n] === "string")n++;
    // now n is the index of the first one that is *not* a string.
    // see if there's anything else
    var prefix;
    switch(n){
        // if not, then this is rather simple
        case pattern.length:
            this._processSimple(pattern.join("/"), index, cb);
            return;
        case 0:
            // pattern *starts* with some non-trivial item.
            // going to readdir(cwd), but not include the prefix in matches.
            prefix = null;
            break;
        default:
            // pattern has some string bits in the front.
            // whatever it starts with, whether that's 'absolute' like /foo/bar,
            // or 'relative' like '../baz'
            prefix = pattern.slice(0, n).join("/");
            break;
    }
    var remain = pattern.slice(n);
    // get the list of entries.
    var read;
    if (prefix === null) read = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {
        return typeof p === "string" ? p : "[*]";
    }).join("/"))) {
        if (!prefix || !isAbsolute(prefix)) prefix = "/" + prefix;
        read = prefix;
    } else read = prefix;
    var abs = this._makeAbs(read);
    //if ignored, skip _processing
    if (childrenIgnored(this, read)) return cb();
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
};
Glob.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
        return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
};
Glob.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    // if the abs isn't a dir, then nothing can match!
    if (!entries) return cb();
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for(var i = 0; i < entries.length; i++){
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
            var m;
            if (negate && !prefix) m = !e.match(pn);
            else m = e.match(pn);
            if (m) matchedEntries.push(e);
        }
    }
    //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0) return cb();
    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.
    if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index]) this.matches[index] = Object.create(null);
        for(var i = 0; i < len; i++){
            var e = matchedEntries[i];
            if (prefix) {
                if (prefix !== "/") e = prefix + "/" + e;
                else e = prefix + e;
            }
            if (e.charAt(0) === "/" && !this.nomount) e = path.join(this.root, e);
            this._emitMatch(index, e);
        }
        // This was the last one, and no stats were needed
        return cb();
    }
    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for(var i = 0; i < len; i++){
        var e = matchedEntries[i];
        var newPattern;
        if (prefix) {
            if (prefix !== "/") e = prefix + "/" + e;
            else e = prefix + e;
        }
        this._process([
            e
        ].concat(remain), index, inGlobStar, cb);
    }
    cb();
};
Glob.prototype._emitMatch = function(index, e) {
    if (this.aborted) return;
    if (isIgnored(this, e)) return;
    if (this.paused) {
        this._emitQueue.push([
            index,
            e
        ]);
        return;
    }
    var abs = isAbsolute(e) ? e : this._makeAbs(e);
    if (this.mark) e = this._mark(e);
    if (this.absolute) e = abs;
    if (this.matches[index][e]) return;
    if (this.nodir) {
        var c = this.cache[abs];
        if (c === "DIR" || Array.isArray(c)) return;
    }
    this.matches[index][e] = true;
    var st = this.statCache[abs];
    if (st) this.emit("stat", e, st);
    this.emit("match", e);
};
Glob.prototype._readdirInGlobStar = function(abs, cb) {
    if (this.aborted) return;
    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow) return this._readdir(abs, false, cb);
    var lstatkey = "lstat\0" + abs;
    var self = this;
    var lstatcb = inflight(lstatkey, lstatcb_);
    if (lstatcb) self.fs.lstat(abs, lstatcb);
    function lstatcb_(er, lstat) {
        if (er && er.code === "ENOENT") return cb();
        var isSym = lstat && lstat.isSymbolicLink();
        self.symlinks[abs] = isSym;
        // If it's not a symlink or a dir, then it's definitely a regular file.
        // don't bother doing a readdir in that case.
        if (!isSym && lstat && !lstat.isDirectory()) {
            self.cache[abs] = "FILE";
            cb();
        } else self._readdir(abs, false, cb);
    }
};
Glob.prototype._readdir = function(abs, inGlobStar, cb) {
    if (this.aborted) return;
    cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
    if (!cb) return;
    //console.error('RD %j %j', +inGlobStar, abs)
    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs, cb);
    if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE") return cb();
        if (Array.isArray(c)) return cb(null, c);
    }
    var self = this;
    self.fs.readdir(abs, readdirCb(this, abs, cb));
};
function readdirCb(self, abs, cb) {
    return function(er, entries) {
        if (er) self._readdirError(abs, er, cb);
        else self._readdirEntries(abs, entries, cb);
    };
}
Glob.prototype._readdirEntries = function(abs, entries, cb) {
    if (this.aborted) return;
    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) for(var i = 0; i < entries.length; i++){
        var e = entries[i];
        if (abs === "/") e = abs + e;
        else e = abs + "/" + e;
        this.cache[e] = true;
    }
    this.cache[abs] = entries;
    return cb(null, entries);
};
Glob.prototype._readdirError = function(f, er, cb) {
    if (this.aborted) return;
    // handle errors, and cache the information
    switch(er.code){
        case "ENOTSUP":
        case "ENOTDIR":
            var abs = this._makeAbs(f);
            this.cache[abs] = "FILE";
            if (abs === this.cwdAbs) {
                var error = new Error(er.code + " invalid cwd " + this.cwd);
                error.path = this.cwd;
                error.code = er.code;
                this.emit("error", error);
                this.abort();
            }
            break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
            this.cache[this._makeAbs(f)] = false;
            break;
        default:
            this.cache[this._makeAbs(f)] = false;
            if (this.strict) {
                this.emit("error", er);
                // If the error is handled, then we abort
                // if not, we threw out of here
                this.abort();
            }
            if (!this.silent) console.error("glob error", er);
            break;
    }
    return cb();
};
Glob.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
        self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
};
Glob.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    //console.error('pgs2', prefix, remain[0], entries)
    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries) return cb();
    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [
        prefix
    ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false, cb);
    var isSym = this.symlinks[abs];
    var len = entries.length;
    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar) return cb();
    for(var i = 0; i < len; i++){
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot) continue;
        // these two cases enter the inGlobStar state
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true, cb);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true, cb);
    }
    cb();
};
Glob.prototype._processSimple = function(prefix, index, cb) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var self = this;
    this._stat(prefix, function(er, exists) {
        self._processSimple2(prefix, index, er, exists, cb);
    });
};
Glob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
    //console.error('ps2', prefix, exists)
    if (!this.matches[index]) this.matches[index] = Object.create(null);
    // If it doesn't exist, then just mark the lack of results
    if (!exists) return cb();
    if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") prefix = path.join(this.root, prefix);
        else {
            prefix = path.resolve(this.root, prefix);
            if (trail) prefix += "/";
        }
    }
    if (process.platform === "win32") prefix = prefix.replace(/\\/g, "/");
    // Mark this as a match
    this._emitMatch(index, prefix);
    cb();
};
// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function(f, cb) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength) return cb();
    if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c)) c = "DIR";
        // It exists, but maybe not how we need it
        if (!needDir || c === "DIR") return cb(null, c);
        if (needDir && c === "FILE") return cb();
    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
    }
    var exists;
    var stat = this.statCache[abs];
    if (stat !== undefined) {
        if (stat === false) return cb(null, stat);
        else {
            var type = stat.isDirectory() ? "DIR" : "FILE";
            if (needDir && type === "FILE") return cb();
            else return cb(null, type, stat);
        }
    }
    var self = this;
    var statcb = inflight("stat\0" + abs, lstatcb_);
    if (statcb) self.fs.lstat(abs, statcb);
    function lstatcb_(er, lstat) {
        if (lstat && lstat.isSymbolicLink()) // If it's a symlink, then treat it as the target, unless
        // the target does not exist, then treat it as a file.
        return self.fs.stat(abs, function(er, stat) {
            if (er) self._stat2(f, abs, null, lstat, cb);
            else self._stat2(f, abs, er, stat, cb);
        });
        else self._stat2(f, abs, er, lstat, cb);
    }
};
Glob.prototype._stat2 = function(f, abs, er, stat, cb) {
    if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
        this.statCache[abs] = false;
        return cb();
    }
    var needDir = f.slice(-1) === "/";
    this.statCache[abs] = stat;
    if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) return cb(null, false, stat);
    var c = true;
    if (stat) c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE") return cb();
    return cb(null, c, stat);
};

},{"bbdeb104da9f01e3":"kKEHw","5bc582ba8c5257ad":"6GUHv","d952e023bff267a9":"i9jym","1f6409d1d9e2296d":"8TdOm","400ffd571443a607":"gIDbZ","da618e4abd48dced":"i1BLo","2ccb70913ac4c2df":"bNzhs","412bcf4c26fe29f7":"8GYLN","420b2074cb0d1f5":"kfvEY","7279b2d57007e8ad":"lBQ7A","71890ac15acf66af":"elnyH","f31573398d4da3f1":"h4AnS","a14e1ad70f85c3f5":"horxu"}],"6GUHv":[function(require,module,exports) {
var process = require("78933daf7d23390e");
module.exports = realpath;
realpath.realpath = realpath;
realpath.sync = realpathSync;
realpath.realpathSync = realpathSync;
realpath.monkeypatch = monkeypatch;
realpath.unmonkeypatch = unmonkeypatch;
var fs = require("f514c7a5c1ae43ea");
var origRealpath = fs.realpath;
var origRealpathSync = fs.realpathSync;
var version = process.version;
var ok = /^v[0-5]\./.test(version);
var old = require("81dc14763be8c306");
function newError(er) {
    return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
}
function realpath(p, cache, cb) {
    if (ok) return origRealpath(p, cache, cb);
    if (typeof cache === "function") {
        cb = cache;
        cache = null;
    }
    origRealpath(p, cache, function(er, result) {
        if (newError(er)) old.realpath(p, cache, cb);
        else cb(er, result);
    });
}
function realpathSync(p, cache) {
    if (ok) return origRealpathSync(p, cache);
    try {
        return origRealpathSync(p, cache);
    } catch (er) {
        if (newError(er)) return old.realpathSync(p, cache);
        else throw er;
    }
}
function monkeypatch() {
    fs.realpath = realpath;
    fs.realpathSync = realpathSync;
}
function unmonkeypatch() {
    fs.realpath = origRealpath;
    fs.realpathSync = origRealpathSync;
}

},{"78933daf7d23390e":"kKEHw","f514c7a5c1ae43ea":"4oI9L","81dc14763be8c306":"iNffu"}],"iNffu":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("89aaeb5ee66c5155");
var pathModule = require("1f8e9afc07bc929");
var isWindows = process.platform === "win32";
var fs = require("cc24e00e1e73ee68");
// JavaScript implementation of realpath, ported from node pre-v6
var DEBUG = undefined;
function rethrow() {
    // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
    // is fairly slow to generate.
    var callback;
    if (DEBUG) {
        var backtrace = new Error;
        callback = debugCallback;
    } else callback = missingCallback;
    return callback;
    function debugCallback(err) {
        if (err) {
            backtrace.message = err.message;
            err = backtrace;
            missingCallback(err);
        }
    }
    function missingCallback(err) {
        if (err) {
            if (process.throwDeprecation) throw err; // Forgot a callback but don't know where? Use NODE_DEBUG=fs
            else if (!process.noDeprecation) {
                var msg = "fs: missing callback " + (err.stack || err.message);
                if (process.traceDeprecation) console.trace(msg);
                else console.error(msg);
            }
        }
    }
}
function maybeCallback(cb) {
    return typeof cb === "function" ? cb : rethrow();
}
var normalize = pathModule.normalize;
// Regexp that finds the next partion of a (partial) path
// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
if (isWindows) var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
else var nextPartRe = /(.*?)(?:[\/]+|$)/g;
// Regex to find the device root, including trailing slash. E.g. 'c:\\'.
if (isWindows) var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
else var splitRootRe = /^[\/]*/;
exports.realpathSync = function realpathSync(p, cache) {
    // make p is absolute
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) return cache[p];
    var original = p, seenLinks = {}, knownHard = {};
    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;
    start();
    function start() {
        // Skip over roots
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = "";
        // On windows, check that the root exists. On unix there is no need.
        if (isWindows && !knownHard[base]) {
            fs.lstatSync(base);
            knownHard[base] = true;
        }
    }
    // walk down the path, swapping out linked pathparts for their real
    // values
    // NB: p.length changes.
    while(pos < p.length){
        // find the next part
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;
        // continue if not a symlink
        if (knownHard[base] || cache && cache[base] === base) continue;
        var resolvedLink;
        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) // some known symbolic link.  no need to stat again.
        resolvedLink = cache[base];
        else {
            var stat = fs.lstatSync(base);
            if (!stat.isSymbolicLink()) {
                knownHard[base] = true;
                if (cache) cache[base] = base;
                continue;
            }
            // read the link if it wasn't read before
            // dev/ino always return 0 on windows, so skip the check.
            var linkTarget = null;
            if (!isWindows) {
                var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
                if (seenLinks.hasOwnProperty(id)) linkTarget = seenLinks[id];
            }
            if (linkTarget === null) {
                fs.statSync(base);
                linkTarget = fs.readlinkSync(base);
            }
            resolvedLink = pathModule.resolve(previous, linkTarget);
            // track this, if given a cache.
            if (cache) cache[base] = resolvedLink;
            if (!isWindows) seenLinks[id] = linkTarget;
        }
        // resolve the link, then start over
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
    }
    if (cache) cache[original] = p;
    return p;
};
exports.realpath = function realpath(p, cache, cb) {
    if (typeof cb !== "function") {
        cb = maybeCallback(cache);
        cache = null;
    }
    // make p is absolute
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) return process.nextTick(cb.bind(null, null, cache[p]));
    var original = p, seenLinks = {}, knownHard = {};
    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;
    start();
    function start() {
        // Skip over roots
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = "";
        // On windows, check that the root exists. On unix there is no need.
        if (isWindows && !knownHard[base]) fs.lstat(base, function(err) {
            if (err) return cb(err);
            knownHard[base] = true;
            LOOP();
        });
        else process.nextTick(LOOP);
    }
    // walk down the path, swapping out linked pathparts for their real
    // values
    function LOOP() {
        // stop if scanned past end of path
        if (pos >= p.length) {
            if (cache) cache[original] = p;
            return cb(null, p);
        }
        // find the next part
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;
        // continue if not a symlink
        if (knownHard[base] || cache && cache[base] === base) return process.nextTick(LOOP);
        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) // known symbolic link.  no need to stat again.
        return gotResolvedLink(cache[base]);
        return fs.lstat(base, gotStat);
    }
    function gotStat(err, stat) {
        if (err) return cb(err);
        // if not a symlink, skip to the next path part
        if (!stat.isSymbolicLink()) {
            knownHard[base] = true;
            if (cache) cache[base] = base;
            return process.nextTick(LOOP);
        }
        // stat & read the link if not read before
        // call gotTarget as soon as the link target is known
        // dev/ino always return 0 on windows, so skip the check.
        if (!isWindows) {
            var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
            if (seenLinks.hasOwnProperty(id)) return gotTarget(null, seenLinks[id], base);
        }
        fs.stat(base, function(err) {
            if (err) return cb(err);
            fs.readlink(base, function(err, target) {
                if (!isWindows) seenLinks[id] = target;
                gotTarget(err, target);
            });
        });
    }
    function gotTarget(err, target, base) {
        if (err) return cb(err);
        var resolvedLink = pathModule.resolve(previous, target);
        if (cache) cache[base] = resolvedLink;
        gotResolvedLink(resolvedLink);
    }
    function gotResolvedLink(resolvedLink) {
        // resolve the link, then start over
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
    }
};

},{"89aaeb5ee66c5155":"kKEHw","1f8e9afc07bc929":"i1BLo","cc24e00e1e73ee68":"4oI9L"}],"i9jym":[function(require,module,exports) {
module.exports = minimatch;
minimatch.Minimatch = Minimatch;
var path = function() {
    try {
        return require("1e60e64c203ffb5e");
    } catch (e) {}
}() || {
    sep: "/"
};
minimatch.sep = path.sep;
var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
var expand = require("3b492394301c0014");
var plTypes = {
    "!": {
        open: "(?:(?!(?:",
        close: "))[^/]*?)"
    },
    "?": {
        open: "(?:",
        close: ")?"
    },
    "+": {
        open: "(?:",
        close: ")+"
    },
    "*": {
        open: "(?:",
        close: ")*"
    },
    "@": {
        open: "(?:",
        close: ")"
    }
};
// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = "[^/]";
// * => any number of characters
var star = qmark + "*?";
// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
// characters that need to be escaped in RegExp.
var reSpecials = charSet("().*{}+?[]^$\\!");
// "abc" -> { a:true, b:true, c:true }
function charSet(s) {
    return s.split("").reduce(function(set, c) {
        set[c] = true;
        return set;
    }, {});
}
// normalizes slashes.
var slashSplit = /\/+/;
minimatch.filter = filter;
function filter(pattern, options) {
    options = options || {};
    return function(p, i, list) {
        return minimatch(p, pattern, options);
    };
}
function ext(a, b) {
    b = b || {};
    var t = {};
    Object.keys(a).forEach(function(k) {
        t[k] = a[k];
    });
    Object.keys(b).forEach(function(k) {
        t[k] = b[k];
    });
    return t;
}
minimatch.defaults = function(def) {
    if (!def || typeof def !== "object" || !Object.keys(def).length) return minimatch;
    var orig = minimatch;
    var m = function minimatch(p, pattern, options) {
        return orig(p, pattern, ext(def, options));
    };
    m.Minimatch = function Minimatch(pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options));
    };
    m.Minimatch.defaults = function defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
    };
    m.filter = function filter(pattern, options) {
        return orig.filter(pattern, ext(def, options));
    };
    m.defaults = function defaults(options) {
        return orig.defaults(ext(def, options));
    };
    m.makeRe = function makeRe(pattern, options) {
        return orig.makeRe(pattern, ext(def, options));
    };
    m.braceExpand = function braceExpand(pattern, options) {
        return orig.braceExpand(pattern, ext(def, options));
    };
    m.match = function(list, pattern, options) {
        return orig.match(list, pattern, ext(def, options));
    };
    return m;
};
Minimatch.defaults = function(def) {
    return minimatch.defaults(def).Minimatch;
};
function minimatch(p, pattern, options) {
    assertValidPattern(pattern);
    if (!options) options = {};
    // shortcut: comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === "#") return false;
    return new Minimatch(pattern, options).match(p);
}
function Minimatch(pattern, options) {
    if (!(this instanceof Minimatch)) return new Minimatch(pattern, options);
    assertValidPattern(pattern);
    if (!options) options = {};
    pattern = pattern.trim();
    // windows support: need to use /, not \
    if (!options.allowWindowsEscape && path.sep !== "/") pattern = pattern.split(path.sep).join("/");
    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;
    this.partial = !!options.partial;
    // make the set of regexps etc.
    this.make();
}
Minimatch.prototype.debug = function() {};
Minimatch.prototype.make = make;
function make() {
    var pattern = this.pattern;
    var options = this.options;
    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
    }
    if (!pattern) {
        this.empty = true;
        return;
    }
    // step 1: figure out negation, etc.
    this.parseNegate();
    // step 2: expand braces
    var set = this.globSet = this.braceExpand();
    if (options.debug) this.debug = function debug() {
        console.error.apply(console, arguments);
    };
    this.debug(this.pattern, set);
    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(function(s) {
        return s.split(slashSplit);
    });
    this.debug(this.pattern, set);
    // glob --> regexps
    set = set.map(function(s, si, set) {
        return s.map(this.parse, this);
    }, this);
    this.debug(this.pattern, set);
    // filter out everything that didn't compile properly.
    set = set.filter(function(s) {
        return s.indexOf(false) === -1;
    });
    this.debug(this.pattern, set);
    this.set = set;
}
Minimatch.prototype.parseNegate = parseNegate;
function parseNegate() {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;
    if (options.nonegate) return;
    for(var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++){
        negate = !negate;
        negateOffset++;
    }
    if (negateOffset) this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
}
// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function(pattern, options) {
    return braceExpand(pattern, options);
};
Minimatch.prototype.braceExpand = braceExpand;
function braceExpand(pattern, options) {
    if (!options) {
        if (this instanceof Minimatch) options = this.options;
        else options = {};
    }
    pattern = typeof pattern === "undefined" ? this.pattern : pattern;
    assertValidPattern(pattern);
    // Thanks to Yeting Li <https://github.com/yetingli> for
    // improving this regexp to avoid a ReDOS vulnerability.
    if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) // shortcut. no need to expand.
    return [
        pattern
    ];
    return expand(pattern);
}
var MAX_PATTERN_LENGTH = 65536;
var assertValidPattern = function(pattern) {
    if (typeof pattern !== "string") throw new TypeError("invalid pattern");
    if (pattern.length > MAX_PATTERN_LENGTH) throw new TypeError("pattern is too long");
};
// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse;
var SUBPARSE = {};
function parse(pattern, isSub) {
    assertValidPattern(pattern);
    var options = this.options;
    // shortcuts
    if (pattern === "**") {
        if (!options.noglobstar) return GLOBSTAR;
        else pattern = "*";
    }
    if (pattern === "") return "";
    var re = "";
    var hasMagic = !!options.nocase;
    var escaping = false;
    // ? => one single character
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.
    var patternStart = pattern.charAt(0) === "." ? "" // anything
     : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
    var self = this;
    function clearStateChar() {
        if (stateChar) {
            // we had some state-tracking character
            // that wasn't consumed by this pass.
            switch(stateChar){
                case "*":
                    re += star;
                    hasMagic = true;
                    break;
                case "?":
                    re += qmark;
                    hasMagic = true;
                    break;
                default:
                    re += "\\" + stateChar;
                    break;
            }
            self.debug("clearStateChar %j %j", stateChar, re);
            stateChar = false;
        }
    }
    for(var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++){
        this.debug("%s	%s %s %j", pattern, i, re, c);
        // skip over any that are escaped.
        if (escaping && reSpecials[c]) {
            re += "\\" + c;
            escaping = false;
            continue;
        }
        switch(c){
            /* istanbul ignore next */ case "/":
                // completely not allowed, even escaped.
                // Should already be path-split by now.
                return false;
            case "\\":
                clearStateChar();
                escaping = true;
                continue;
            // the various stateChar values
            // for the "extglob" stuff.
            case "?":
            case "*":
            case "+":
            case "@":
            case "!":
                this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
                // all of those are literals inside a class, except that
                // the glob [!a] means [^a] in regexp
                if (inClass) {
                    this.debug("  in class");
                    if (c === "!" && i === classStart + 1) c = "^";
                    re += c;
                    continue;
                }
                // if we already have a stateChar, then it means
                // that there was something like ** or +? in there.
                // Handle the stateChar, then proceed with this one.
                self.debug("call clearStateChar %j", stateChar);
                clearStateChar();
                stateChar = c;
                // if extglob is disabled, then +(asdf|foo) isn't a thing.
                // just clear the statechar *now*, rather than even diving into
                // the patternList stuff.
                if (options.noext) clearStateChar();
                continue;
            case "(":
                if (inClass) {
                    re += "(";
                    continue;
                }
                if (!stateChar) {
                    re += "\\(";
                    continue;
                }
                patternListStack.push({
                    type: stateChar,
                    start: i - 1,
                    reStart: re.length,
                    open: plTypes[stateChar].open,
                    close: plTypes[stateChar].close
                });
                // negation is (?:(?!js)[^/]*)
                re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
                this.debug("plType %j %j", stateChar, re);
                stateChar = false;
                continue;
            case ")":
                if (inClass || !patternListStack.length) {
                    re += "\\)";
                    continue;
                }
                clearStateChar();
                hasMagic = true;
                var pl = patternListStack.pop();
                // negation is (?:(?!js)[^/]*)
                // The others are (?:<pattern>)<type>
                re += pl.close;
                if (pl.type === "!") negativeLists.push(pl);
                pl.reEnd = re.length;
                continue;
            case "|":
                if (inClass || !patternListStack.length || escaping) {
                    re += "\\|";
                    escaping = false;
                    continue;
                }
                clearStateChar();
                re += "|";
                continue;
            // these are mostly the same in regexp and glob
            case "[":
                // swallow any state-tracking char before the [
                clearStateChar();
                if (inClass) {
                    re += "\\" + c;
                    continue;
                }
                inClass = true;
                classStart = i;
                reClassStart = re.length;
                re += c;
                continue;
            case "]":
                //  a right bracket shall lose its special
                //  meaning and represent itself in
                //  a bracket expression if it occurs
                //  first in the list.  -- POSIX.2 2.8.3.2
                if (i === classStart + 1 || !inClass) {
                    re += "\\" + c;
                    escaping = false;
                    continue;
                }
                // handle the case where we left a class open.
                // "[z-a]" is valid, equivalent to "\[z-a\]"
                // split where the last [ was, make sure we don't have
                // an invalid re. if so, re-walk the contents of the
                // would-be class to re-translate any characters that
                // were passed through as-is
                // TODO: It would probably be faster to determine this
                // without a try/catch and a new RegExp, but it's tricky
                // to do safely.  For now, this is safe and works.
                var cs = pattern.substring(classStart + 1, i);
                try {
                    RegExp("[" + cs + "]");
                } catch (er) {
                    // not a valid class!
                    var sp = this.parse(cs, SUBPARSE);
                    re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
                    hasMagic = hasMagic || sp[1];
                    inClass = false;
                    continue;
                }
                // finish up the class.
                hasMagic = true;
                inClass = false;
                re += c;
                continue;
            default:
                // swallow any state char that wasn't consumed
                clearStateChar();
                if (escaping) // no need
                escaping = false;
                else if (reSpecials[c] && !(c === "^" && inClass)) re += "\\";
                re += c;
        } // switch
    } // for
    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
        // split where the last [ was, and escape it
        // this is a huge pita.  We now have to re-walk
        // the contents of the would-be class to re-translate
        // any characters that were passed through as-is
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
    }
    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for(pl = patternListStack.pop(); pl; pl = patternListStack.pop()){
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        // maybe some even number of \, then maybe 1 \, followed by a |
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
            if (!$2) // the | isn't already escaped, so escape it.
            $2 = "\\";
            // need to escape all those slashes *again*, without escaping the
            // one that we need for escaping the | character.  As it works out,
            // escaping an even number of slashes can be done by simply repeating
            // it exactly after itself.  That's why this trick works.
            //
            // I am sorry that you have to see this.
            return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + "\\(" + tail;
    }
    // handle trailing things that only matter at the very end.
    clearStateChar();
    if (escaping) // trailing \\
    re += "\\\\";
    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    var addPatternStart = false;
    switch(re.charAt(0)){
        case "[":
        case ".":
        case "(":
            addPatternStart = true;
    }
    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for(var n = negativeLists.length - 1; n > -1; n--){
        var nl = negativeLists[n];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        // Handle nested stuff like *(*.js|!(*.json)), where open parens
        // mean that we should *not* include the ) in the bit that is considered
        // "after" the negated section.
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for(i = 0; i < openParensBefore; i++)cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) dollar = "$";
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
    }
    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== "" && hasMagic) re = "(?=.)" + re;
    if (addPatternStart) re = patternStart + re;
    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) return [
        re,
        hasMagic
    ];
    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) return globUnescape(pattern);
    var flags = options.nocase ? "i" : "";
    try {
        var regExp = new RegExp("^" + re + "$", flags);
    } catch (er) /* istanbul ignore next - should be impossible */ {
        // If it was an invalid regular expression, then it can't match
        // anything.  This trick looks for a character after the end of
        // the string, which is of course impossible, except in multi-line
        // mode, but it's not a /m regex.
        return new RegExp("$.");
    }
    regExp._glob = pattern;
    regExp._src = re;
    return regExp;
}
minimatch.makeRe = function(pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe();
};
Minimatch.prototype.makeRe = makeRe;
function makeRe() {
    if (this.regexp || this.regexp === false) return this.regexp;
    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    var set = this.set;
    if (!set.length) {
        this.regexp = false;
        return this.regexp;
    }
    var options = this.options;
    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
    var flags = options.nocase ? "i" : "";
    var re = set.map(function(pattern) {
        return pattern.map(function(p) {
            return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
        }).join("\\/");
    }).join("|");
    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = "^(?:" + re + ")$";
    // can match anything, as long as it's not this.
    if (this.negate) re = "^(?!" + re + ").*$";
    try {
        this.regexp = new RegExp(re, flags);
    } catch (ex) /* istanbul ignore next - should be impossible */ {
        this.regexp = false;
    }
    return this.regexp;
}
minimatch.match = function(list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function(f) {
        return mm.match(f);
    });
    if (mm.options.nonull && !list.length) list.push(pattern);
    return list;
};
Minimatch.prototype.match = function match(f, partial) {
    if (typeof partial === "undefined") partial = this.partial;
    this.debug("match", f, this.pattern);
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false;
    if (this.empty) return f === "";
    if (f === "/" && partial) return true;
    var options = this.options;
    // windows: need to use /, not \
    if (path.sep !== "/") f = f.split(path.sep).join("/");
    // treat the test path as a set of pathparts.
    f = f.split(slashSplit);
    this.debug(this.pattern, "split", f);
    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.
    var set = this.set;
    this.debug(this.pattern, "set", set);
    // Find the basename of the path by looking for the last non-empty segment
    var filename;
    var i;
    for(i = f.length - 1; i >= 0; i--){
        filename = f[i];
        if (filename) break;
    }
    for(i = 0; i < set.length; i++){
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) file = [
            filename
        ];
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
            if (options.flipNegate) return true;
            return !this.negate;
        }
    }
    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false;
    return this.negate;
};
// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function(file, pattern, partial) {
    var options = this.options;
    this.debug("matchOne", {
        "this": this,
        file: file,
        pattern: pattern
    });
    this.debug("matchOne", file.length, pattern.length);
    for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        // should be impossible.
        // some invalid regexp stuff in the set.
        /* istanbul ignore if */ if (p === false) return false;
        if (p === GLOBSTAR) {
            this.debug("GLOBSTAR", [
                pattern,
                p,
                f
            ]);
            // "**"
            // a/**/b/**/c would match the following:
            // a/b/x/y/z/c
            // a/x/y/z/b/c
            // a/b/x/b/x/c
            // a/b/c
            // To do this, take the rest of the pattern after
            // the **, and see if it would match the file remainder.
            // If so, return success.
            // If not, the ** "swallows" a segment, and try again.
            // This is recursively awful.
            //
            // a/**/b/**/c matching a/b/x/y/z/c
            // - a matches a
            // - doublestar
            //   - matchOne(b/x/y/z/c, b/**/c)
            //     - b matches b
            //     - doublestar
            //       - matchOne(x/y/z/c, c) -> no
            //       - matchOne(y/z/c, c) -> no
            //       - matchOne(z/c, c) -> no
            //       - matchOne(c, c) yes, hit
            var fr = fi;
            var pr = pi + 1;
            if (pr === pl) {
                this.debug("** at the end");
                // a ** at the end will just swallow the rest.
                // We have found a match.
                // however, it will not swallow /.x, unless
                // options.dot is set.
                // . and .. are *never* matched by **, for explosively
                // exponential reasons.
                for(; fi < fl; fi++){
                    if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".") return false;
                }
                return true;
            }
            // ok, let's see if we can swallow whatever we can.
            while(fr < fl){
                var swallowee = file[fr];
                this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
                // XXX remove this slice.  Just pass the start index.
                if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                    this.debug("globstar found match!", fr, fl, swallowee);
                    // found a match.
                    return true;
                } else {
                    // can't swallow "." or ".." ever.
                    // can only swallow ".foo" when explicitly asked.
                    if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                        this.debug("dot detected!", file, fr, pattern, pr);
                        break;
                    }
                    // ** swallows a segment, and continue.
                    this.debug("globstar swallow a segment, and continue");
                    fr++;
                }
            }
            // no match was found.
            // However, in partial mode, we can't say this is necessarily over.
            // If there's more *pattern* left, then
            /* istanbul ignore if */ if (partial) {
                // ran out of file
                this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
                if (fr === fl) return true;
            }
            return false;
        }
        // something other than **
        // non-magic patterns just have to match exactly
        // patterns with magic have been turned into regexps.
        var hit;
        if (typeof p === "string") {
            hit = f === p;
            this.debug("string match", p, f, hit);
        } else {
            hit = f.match(p);
            this.debug("pattern match", p, f, hit);
        }
        if (!hit) return false;
    }
    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*
    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) // ran out of pattern and filename at the same time.
    // an exact hit!
    return true;
    else if (fi === fl) // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial;
    else /* istanbul ignore else */ if (pi === pl) // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return fi === fl - 1 && file[fi] === "";
    // should be unreachable.
    /* istanbul ignore next */ throw new Error("wtf?");
};
// replace stuff like \* with *
function globUnescape(s) {
    return s.replace(/\\(.)/g, "$1");
}
function regExpEscape(s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}

},{"1e60e64c203ffb5e":"i1BLo","3b492394301c0014":"7ocy5"}],"7ocy5":[function(require,module,exports) {
var concatMap = require("3bebbba84c30e13a");
var balanced = require("786575cea3630ae0");
module.exports = expandTop;
var escSlash = "\0SLASH" + Math.random() + "\0";
var escOpen = "\0OPEN" + Math.random() + "\0";
var escClose = "\0CLOSE" + Math.random() + "\0";
var escComma = "\0COMMA" + Math.random() + "\0";
var escPeriod = "\0PERIOD" + Math.random() + "\0";
function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
}
function escapeBraces(str) {
    return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
}
function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
}
// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
    if (!str) return [
        ""
    ];
    var parts = [];
    var m = balanced("{", "}", str);
    if (!m) return str.split(",");
    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(",");
    p[p.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
    }
    parts.push.apply(parts, p);
    return parts;
}
function expandTop(str) {
    if (!str) return [];
    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.substr(0, 2) === "{}") str = "\\{\\}" + str.substr(2);
    return expand(escapeBraces(str), true).map(unescapeBraces);
}
function identity(e) {
    return e;
}
function embrace(str) {
    return "{" + str + "}";
}
function isPadded(el) {
    return /^-?0\d/.test(el);
}
function lte(i, y) {
    return i <= y;
}
function gte(i, y) {
    return i >= y;
}
function expand(str, isTop) {
    var expansions = [];
    var m = balanced("{", "}", str);
    if (!m || /\$$/.test(m.pre)) return [
        str
    ];
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(",") >= 0;
    if (!isSequence && !isOptions) {
        // {a},b}
        if (m.post.match(/,.*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand(str);
        }
        return [
            str
        ];
    }
    var n;
    if (isSequence) n = m.body.split(/\.\./);
    else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
            // x{{a,b}}y ==> x{a}y x{b}y
            n = expand(n[0], false).map(embrace);
            if (n.length === 1) {
                var post = m.post.length ? expand(m.post, false) : [
                    ""
                ];
                return post.map(function(p) {
                    return m.pre + n[0] + p;
                });
            }
        }
    }
    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.
    // no need to expand pre, since it is guaranteed to be free of brace-sets
    var pre = m.pre;
    var post = m.post.length ? expand(m.post, false) : [
        ""
    ];
    var N;
    if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
            incr *= -1;
            test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for(var i = x; test(i, y); i += incr){
            var c;
            if (isAlphaSequence) {
                c = String.fromCharCode(i);
                if (c === "\\") c = "";
            } else {
                c = String(i);
                if (pad) {
                    var need = width - c.length;
                    if (need > 0) {
                        var z = new Array(need + 1).join("0");
                        if (i < 0) c = "-" + z + c.slice(1);
                        else c = z + c;
                    }
                }
            }
            N.push(c);
        }
    } else N = concatMap(n, function(el) {
        return expand(el, false);
    });
    for(var j = 0; j < N.length; j++)for(var k = 0; k < post.length; k++){
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion) expansions.push(expansion);
    }
    return expansions;
}

},{"3bebbba84c30e13a":"5G2qG","786575cea3630ae0":"lDl9U"}],"5G2qG":[function(require,module,exports) {
module.exports = function(xs, fn) {
    var res = [];
    for(var i = 0; i < xs.length; i++){
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};

},{}],"lDl9U":[function(require,module,exports) {
"use strict";
module.exports = balanced;
function balanced(a, b, str) {
    if (a instanceof RegExp) a = maybeMatch(a, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
    };
}
function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
}
balanced.range = range;
function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
        if (a === b) return [
            ai,
            bi
        ];
        begs = [];
        left = str.length;
        while(i >= 0 && !result){
            if (i == ai) {
                begs.push(i);
                ai = str.indexOf(a, i + 1);
            } else if (begs.length == 1) result = [
                begs.pop(),
                bi
            ];
            else {
                beg = begs.pop();
                if (beg < left) {
                    left = beg;
                    right = bi;
                }
                bi = str.indexOf(b, i + 1);
            }
            i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) result = [
            left,
            right
        ];
    }
    return result;
}

},{}],"8GYLN":[function(require,module,exports) {
var process = require("d326ebb5844ad961");
"use strict";
function posix(path) {
    return path.charAt(0) === "/";
}
function win32(path) {
    // https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    var result = splitDeviceRe.exec(path);
    var device = result[1] || "";
    var isUnc = Boolean(device && device.charAt(1) !== ":");
    // UNC paths are always absolute
    return Boolean(result[2] || isUnc);
}
module.exports = process.platform === "win32" ? win32 : posix;
module.exports.posix = posix;
module.exports.win32 = win32;

},{"d326ebb5844ad961":"kKEHw"}],"kfvEY":[function(require,module,exports) {
var process = require("467787227d10902c");
module.exports = globSync;
globSync.GlobSync = GlobSync;
var rp = require("83d78de11f9d6470");
var minimatch = require("841c96a31180e00");
var Minimatch = minimatch.Minimatch;
var Glob = require("4bafe0d4367e89fb").Glob;
var util = require("984cec1cc53f7eaf");
var path = require("8b471a922625721a");
var assert = require("a79c75f0622db82");
var isAbsolute = require("21b6e54a40a88ba6");
var common = require("ccfe6b7406d46377");
var setopts = common.setopts;
var ownProp = common.ownProp;
var childrenIgnored = common.childrenIgnored;
var isIgnored = common.isIgnored;
function globSync(pattern, options) {
    if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    return new GlobSync(pattern, options).found;
}
function GlobSync(pattern, options) {
    if (!pattern) throw new Error("must provide pattern");
    if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    if (!(this instanceof GlobSync)) return new GlobSync(pattern, options);
    setopts(this, pattern, options);
    if (this.noprocess) return this;
    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    for(var i = 0; i < n; i++)this._process(this.minimatch.set[i], i, false);
    this._finish();
}
GlobSync.prototype._finish = function() {
    assert.ok(this instanceof GlobSync);
    if (this.realpath) {
        var self = this;
        this.matches.forEach(function(matchset, index) {
            var set = self.matches[index] = Object.create(null);
            for(var p in matchset)try {
                p = self._makeAbs(p);
                var real = rp.realpathSync(p, self.realpathCache);
                set[real] = true;
            } catch (er) {
                if (er.syscall === "stat") set[self._makeAbs(p)] = true;
                else throw er;
            }
        });
    }
    common.finish(this);
};
GlobSync.prototype._process = function(pattern, index, inGlobStar) {
    assert.ok(this instanceof GlobSync);
    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while(typeof pattern[n] === "string")n++;
    // now n is the index of the first one that is *not* a string.
    // See if there's anything else
    var prefix;
    switch(n){
        // if not, then this is rather simple
        case pattern.length:
            this._processSimple(pattern.join("/"), index);
            return;
        case 0:
            // pattern *starts* with some non-trivial item.
            // going to readdir(cwd), but not include the prefix in matches.
            prefix = null;
            break;
        default:
            // pattern has some string bits in the front.
            // whatever it starts with, whether that's 'absolute' like /foo/bar,
            // or 'relative' like '../baz'
            prefix = pattern.slice(0, n).join("/");
            break;
    }
    var remain = pattern.slice(n);
    // get the list of entries.
    var read;
    if (prefix === null) read = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {
        return typeof p === "string" ? p : "[*]";
    }).join("/"))) {
        if (!prefix || !isAbsolute(prefix)) prefix = "/" + prefix;
        read = prefix;
    } else read = prefix;
    var abs = this._makeAbs(read);
    //if ignored, skip processing
    if (childrenIgnored(this, read)) return;
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
};
GlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    // if the abs isn't a dir, then nothing can match!
    if (!entries) return;
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for(var i = 0; i < entries.length; i++){
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
            var m;
            if (negate && !prefix) m = !e.match(pn);
            else m = e.match(pn);
            if (m) matchedEntries.push(e);
        }
    }
    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0) return;
    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.
    if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index]) this.matches[index] = Object.create(null);
        for(var i = 0; i < len; i++){
            var e = matchedEntries[i];
            if (prefix) {
                if (prefix.slice(-1) !== "/") e = prefix + "/" + e;
                else e = prefix + e;
            }
            if (e.charAt(0) === "/" && !this.nomount) e = path.join(this.root, e);
            this._emitMatch(index, e);
        }
        // This was the last one, and no stats were needed
        return;
    }
    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for(var i = 0; i < len; i++){
        var e = matchedEntries[i];
        var newPattern;
        if (prefix) newPattern = [
            prefix,
            e
        ];
        else newPattern = [
            e
        ];
        this._process(newPattern.concat(remain), index, inGlobStar);
    }
};
GlobSync.prototype._emitMatch = function(index, e) {
    if (isIgnored(this, e)) return;
    var abs = this._makeAbs(e);
    if (this.mark) e = this._mark(e);
    if (this.absolute) e = abs;
    if (this.matches[index][e]) return;
    if (this.nodir) {
        var c = this.cache[abs];
        if (c === "DIR" || Array.isArray(c)) return;
    }
    this.matches[index][e] = true;
    if (this.stat) this._stat(e);
};
GlobSync.prototype._readdirInGlobStar = function(abs) {
    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow) return this._readdir(abs, false);
    var entries;
    var lstat;
    var stat;
    try {
        lstat = this.fs.lstatSync(abs);
    } catch (er) {
        if (er.code === "ENOENT") // lstat failed, doesn't exist
        return null;
    }
    var isSym = lstat && lstat.isSymbolicLink();
    this.symlinks[abs] = isSym;
    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) this.cache[abs] = "FILE";
    else entries = this._readdir(abs, false);
    return entries;
};
GlobSync.prototype._readdir = function(abs, inGlobStar) {
    var entries;
    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs);
    if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE") return null;
        if (Array.isArray(c)) return c;
    }
    try {
        return this._readdirEntries(abs, this.fs.readdirSync(abs));
    } catch (er) {
        this._readdirError(abs, er);
        return null;
    }
};
GlobSync.prototype._readdirEntries = function(abs, entries) {
    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) for(var i = 0; i < entries.length; i++){
        var e = entries[i];
        if (abs === "/") e = abs + e;
        else e = abs + "/" + e;
        this.cache[e] = true;
    }
    this.cache[abs] = entries;
    // mark and cache dir-ness
    return entries;
};
GlobSync.prototype._readdirError = function(f, er) {
    // handle errors, and cache the information
    switch(er.code){
        case "ENOTSUP":
        case "ENOTDIR":
            var abs = this._makeAbs(f);
            this.cache[abs] = "FILE";
            if (abs === this.cwdAbs) {
                var error = new Error(er.code + " invalid cwd " + this.cwd);
                error.path = this.cwd;
                error.code = er.code;
                throw error;
            }
            break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
            this.cache[this._makeAbs(f)] = false;
            break;
        default:
            this.cache[this._makeAbs(f)] = false;
            if (this.strict) throw er;
            if (!this.silent) console.error("glob error", er);
            break;
    }
};
GlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries) return;
    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [
        prefix
    ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false);
    var len = entries.length;
    var isSym = this.symlinks[abs];
    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar) return;
    for(var i = 0; i < len; i++){
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot) continue;
        // these two cases enter the inGlobStar state
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true);
    }
};
GlobSync.prototype._processSimple = function(prefix, index) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var exists = this._stat(prefix);
    if (!this.matches[index]) this.matches[index] = Object.create(null);
    // If it doesn't exist, then just mark the lack of results
    if (!exists) return;
    if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") prefix = path.join(this.root, prefix);
        else {
            prefix = path.resolve(this.root, prefix);
            if (trail) prefix += "/";
        }
    }
    if (process.platform === "win32") prefix = prefix.replace(/\\/g, "/");
    // Mark this as a match
    this._emitMatch(index, prefix);
};
// Returns either 'DIR', 'FILE', or false
GlobSync.prototype._stat = function(f) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength) return false;
    if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c)) c = "DIR";
        // It exists, but maybe not how we need it
        if (!needDir || c === "DIR") return c;
        if (needDir && c === "FILE") return false;
    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
    }
    var exists;
    var stat = this.statCache[abs];
    if (!stat) {
        var lstat;
        try {
            lstat = this.fs.lstatSync(abs);
        } catch (er) {
            if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
                this.statCache[abs] = false;
                return false;
            }
        }
        if (lstat && lstat.isSymbolicLink()) try {
            stat = this.fs.statSync(abs);
        } catch (er) {
            stat = lstat;
        }
        else stat = lstat;
    }
    this.statCache[abs] = stat;
    var c = true;
    if (stat) c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE") return false;
    return c;
};
GlobSync.prototype._mark = function(p) {
    return common.mark(this, p);
};
GlobSync.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
};

},{"467787227d10902c":"kKEHw","83d78de11f9d6470":"6GUHv","841c96a31180e00":"i9jym","4bafe0d4367e89fb":"5ozyg","984cec1cc53f7eaf":"h4AnS","8b471a922625721a":"i1BLo","a79c75f0622db82":"bNzhs","21b6e54a40a88ba6":"8GYLN","ccfe6b7406d46377":"lBQ7A"}],"lBQ7A":[function(require,module,exports) {
var process = require("1df3c7b81d434c9f");
exports.setopts = setopts;
exports.ownProp = ownProp;
exports.makeAbs = makeAbs;
exports.finish = finish;
exports.mark = mark;
exports.isIgnored = isIgnored;
exports.childrenIgnored = childrenIgnored;
function ownProp(obj, field) {
    return Object.prototype.hasOwnProperty.call(obj, field);
}
var fs = require("c9770771920bcb52");
var path = require("25a18a83663f3dd1");
var minimatch = require("f93353a70d0020d4");
var isAbsolute = require("9c5b1412b3f3ce34");
var Minimatch = minimatch.Minimatch;
function alphasort(a, b) {
    return a.localeCompare(b, "en");
}
function setupIgnores(self, options) {
    self.ignore = options.ignore || [];
    if (!Array.isArray(self.ignore)) self.ignore = [
        self.ignore
    ];
    if (self.ignore.length) self.ignore = self.ignore.map(ignoreMap);
}
// ignore patterns are always in dot:true mode.
function ignoreMap(pattern) {
    var gmatcher = null;
    if (pattern.slice(-3) === "/**") {
        var gpattern = pattern.replace(/(\/\*\*)+$/, "");
        gmatcher = new Minimatch(gpattern, {
            dot: true
        });
    }
    return {
        matcher: new Minimatch(pattern, {
            dot: true
        }),
        gmatcher: gmatcher
    };
}
function setopts(self, pattern, options) {
    if (!options) options = {};
    // base-matching: just use globstar for that.
    if (options.matchBase && -1 === pattern.indexOf("/")) {
        if (options.noglobstar) throw new Error("base matching requires globstar");
        pattern = "**/" + pattern;
    }
    self.silent = !!options.silent;
    self.pattern = pattern;
    self.strict = options.strict !== false;
    self.realpath = !!options.realpath;
    self.realpathCache = options.realpathCache || Object.create(null);
    self.follow = !!options.follow;
    self.dot = !!options.dot;
    self.mark = !!options.mark;
    self.nodir = !!options.nodir;
    if (self.nodir) self.mark = true;
    self.sync = !!options.sync;
    self.nounique = !!options.nounique;
    self.nonull = !!options.nonull;
    self.nosort = !!options.nosort;
    self.nocase = !!options.nocase;
    self.stat = !!options.stat;
    self.noprocess = !!options.noprocess;
    self.absolute = !!options.absolute;
    self.fs = options.fs || fs;
    self.maxLength = options.maxLength || Infinity;
    self.cache = options.cache || Object.create(null);
    self.statCache = options.statCache || Object.create(null);
    self.symlinks = options.symlinks || Object.create(null);
    setupIgnores(self, options);
    self.changedCwd = false;
    var cwd = process.cwd();
    if (!ownProp(options, "cwd")) self.cwd = cwd;
    else {
        self.cwd = path.resolve(options.cwd);
        self.changedCwd = self.cwd !== cwd;
    }
    self.root = options.root || path.resolve(self.cwd, "/");
    self.root = path.resolve(self.root);
    if (process.platform === "win32") self.root = self.root.replace(/\\/g, "/");
    // TODO: is an absolute `cwd` supposed to be resolved against `root`?
    // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
    self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
    if (process.platform === "win32") self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
    self.nomount = !!options.nomount;
    // disable comments and negation in Minimatch.
    // Note that they are not supported in Glob itself anyway.
    options.nonegate = true;
    options.nocomment = true;
    // always treat \ in patterns as escapes, not path separators
    options.allowWindowsEscape = false;
    self.minimatch = new Minimatch(pattern, options);
    self.options = self.minimatch.options;
}
function finish(self) {
    var nou = self.nounique;
    var all = nou ? [] : Object.create(null);
    for(var i = 0, l = self.matches.length; i < l; i++){
        var matches = self.matches[i];
        if (!matches || Object.keys(matches).length === 0) {
            if (self.nonull) {
                // do like the shell, and spit out the literal glob
                var literal = self.minimatch.globSet[i];
                if (nou) all.push(literal);
                else all[literal] = true;
            }
        } else {
            // had matches
            var m = Object.keys(matches);
            if (nou) all.push.apply(all, m);
            else m.forEach(function(m) {
                all[m] = true;
            });
        }
    }
    if (!nou) all = Object.keys(all);
    if (!self.nosort) all = all.sort(alphasort);
    // at *some* point we statted all of these
    if (self.mark) {
        for(var i = 0; i < all.length; i++)all[i] = self._mark(all[i]);
        if (self.nodir) all = all.filter(function(e) {
            var notDir = !/\/$/.test(e);
            var c = self.cache[e] || self.cache[makeAbs(self, e)];
            if (notDir && c) notDir = c !== "DIR" && !Array.isArray(c);
            return notDir;
        });
    }
    if (self.ignore.length) all = all.filter(function(m) {
        return !isIgnored(self, m);
    });
    self.found = all;
}
function mark(self, p) {
    var abs = makeAbs(self, p);
    var c = self.cache[abs];
    var m = p;
    if (c) {
        var isDir = c === "DIR" || Array.isArray(c);
        var slash = p.slice(-1) === "/";
        if (isDir && !slash) m += "/";
        else if (!isDir && slash) m = m.slice(0, -1);
        if (m !== p) {
            var mabs = makeAbs(self, m);
            self.statCache[mabs] = self.statCache[abs];
            self.cache[mabs] = self.cache[abs];
        }
    }
    return m;
}
// lotta situps...
function makeAbs(self, f) {
    var abs = f;
    if (f.charAt(0) === "/") abs = path.join(self.root, f);
    else if (isAbsolute(f) || f === "") abs = f;
    else if (self.changedCwd) abs = path.resolve(self.cwd, f);
    else abs = path.resolve(f);
    if (process.platform === "win32") abs = abs.replace(/\\/g, "/");
    return abs;
}
// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
function isIgnored(self, path) {
    if (!self.ignore.length) return false;
    return self.ignore.some(function(item) {
        return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path));
    });
}
function childrenIgnored(self, path) {
    if (!self.ignore.length) return false;
    return self.ignore.some(function(item) {
        return !!(item.gmatcher && item.gmatcher.match(path));
    });
}

},{"1df3c7b81d434c9f":"kKEHw","c9770771920bcb52":"4oI9L","25a18a83663f3dd1":"i1BLo","f93353a70d0020d4":"i9jym","9c5b1412b3f3ce34":"8GYLN"}],"elnyH":[function(require,module,exports) {
var process = require("db67f849dc77d8a1");
var wrappy = require("9bd7c900d7c9671e");
var reqs = Object.create(null);
var once = require("624d99b4d14e271f");
module.exports = wrappy(inflight);
function inflight(key, cb) {
    if (reqs[key]) {
        reqs[key].push(cb);
        return null;
    } else {
        reqs[key] = [
            cb
        ];
        return makeres(key);
    }
}
function makeres(key) {
    return once(function RES() {
        var cbs = reqs[key];
        var len = cbs.length;
        var args = slice(arguments);
        // XXX It's somewhat ambiguous whether a new callback added in this
        // pass should be queued for later execution if something in the
        // list of callbacks throws, or if it should just be discarded.
        // However, it's such an edge case that it hardly matters, and either
        // choice is likely as surprising as the other.
        // As it happens, we do go ahead and schedule it for later execution.
        try {
            for(var i = 0; i < len; i++)cbs[i].apply(null, args);
        } finally{
            if (cbs.length > len) {
                // added more in the interim.
                // de-zalgo, just in case, but don't call again.
                cbs.splice(0, len);
                process.nextTick(function() {
                    RES.apply(null, args);
                });
            } else delete reqs[key];
        }
    });
}
function slice(args) {
    var length = args.length;
    var array = [];
    for(var i = 0; i < length; i++)array[i] = args[i];
    return array;
}

},{"db67f849dc77d8a1":"kKEHw","9bd7c900d7c9671e":"49aYc","624d99b4d14e271f":"horxu"}],"49aYc":[function(require,module,exports) {
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy;
function wrappy(fn, cb) {
    if (fn && cb) return wrappy(fn)(cb);
    if (typeof fn !== "function") throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        var ret = fn.apply(this, args);
        var cb = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb) Object.keys(cb).forEach(function(k) {
            ret[k] = cb[k];
        });
        return ret;
    }
}

},{}],"horxu":[function(require,module,exports) {
var wrappy = require("f5faee48a759335a");
module.exports = wrappy(once);
module.exports.strict = wrappy(onceStrict);
once.proto = once(function() {
    Object.defineProperty(Function.prototype, "once", {
        value: function() {
            return once(this);
        },
        configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
            return onceStrict(this);
        },
        configurable: true
    });
});
function once(fn) {
    var f = function() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
}
function onceStrict(fn) {
    var f = function() {
        if (f.called) throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
}

},{"f5faee48a759335a":"49aYc"}],"bj54g":[function(require,module,exports) {
var process = require("ab6bd9e8f6c561f0");
"use strict";
const npg = require("5699f546eb107834");
const versioning = require("5011fa8edd6bf110");
const napi = require("8c26a25e1e57d912");
const existsSync = require("77de982b372bd148").existsSync || require("ebebfac242d2889a").existsSync;
const path = require("ebebfac242d2889a");
module.exports = exports;
exports.usage = "Finds the require path for the node-pre-gyp installed module";
exports.validate = function(package_json, opts) {
    versioning.validate_config(package_json, opts);
};
exports.find = function(package_json_path, opts) {
    if (!existsSync(package_json_path)) throw new Error(package_json_path + "does not exist");
    const prog = new npg.Run({
        package_json_path,
        argv: process.argv
    });
    prog.setBinaryHostProperty();
    const package_json = prog.package_json;
    versioning.validate_config(package_json, opts);
    let napi_build_version;
    if (napi.get_napi_build_versions(package_json, opts)) napi_build_version = napi.get_best_napi_build_version(package_json, opts);
    opts = opts || {};
    if (!opts.module_root) opts.module_root = path.dirname(package_json_path);
    const meta = versioning.evaluate(package_json, opts, napi_build_version);
    return meta.module;
};

},{"ab6bd9e8f6c561f0":"kKEHw","5699f546eb107834":"71swr","5011fa8edd6bf110":"fa0d6","8c26a25e1e57d912":"1SHwg","77de982b372bd148":"4oI9L","ebebfac242d2889a":"i1BLo"}],"fa0d6":[function(require,module,exports) {
var process = require("759e666d7bd66025");
"use strict";
module.exports = exports;
const path = require("2acbeff0326c470c");
const semver = require("fe50dac538e49360");
const url = require("d61377a079b5baee");
const detect_libc = require("c157c9dd2e77d6f3");
const napi = require("c63ce35ce3074cbd");
let abi_crosswalk;
abi_crosswalk = require("cdce8c032d5f0921");
const major_versions = {};
Object.keys(abi_crosswalk).forEach((v)=>{
    const major = v.split(".")[0];
    if (!major_versions[major]) major_versions[major] = v;
});
function get_electron_abi(runtime, target_version) {
    if (!runtime) throw new Error("get_electron_abi requires valid runtime arg");
    if (typeof target_version === "undefined") // erroneous CLI call
    throw new Error("Empty target version is not supported if electron is the target.");
    // Electron guarantees that patch version update won't break native modules.
    const sem_ver = semver.parse(target_version);
    return runtime + "-v" + sem_ver.major + "." + sem_ver.minor;
}
module.exports.get_electron_abi = get_electron_abi;
function get_node_webkit_abi(runtime, target_version) {
    if (!runtime) throw new Error("get_node_webkit_abi requires valid runtime arg");
    if (typeof target_version === "undefined") // erroneous CLI call
    throw new Error("Empty target version is not supported if node-webkit is the target.");
    return runtime + "-v" + target_version;
}
module.exports.get_node_webkit_abi = get_node_webkit_abi;
function get_node_abi(runtime, versions) {
    if (!runtime) throw new Error("get_node_abi requires valid runtime arg");
    if (!versions) throw new Error("get_node_abi requires valid process.versions object");
    const sem_ver = semver.parse(versions.node);
    if (sem_ver.major === 0 && sem_ver.minor % 2) // https://github.com/mapbox/node-pre-gyp/issues/124
    return runtime + "-v" + versions.node;
    else // process.versions.modules added in >= v0.10.4 and v0.11.7
    // https://github.com/joyent/node/commit/ccabd4a6fa8a6eb79d29bc3bbe9fe2b6531c2d8e
    return versions.modules ? runtime + "-v" + +versions.modules : "v8-" + versions.v8.split(".").slice(0, 2).join(".");
}
module.exports.get_node_abi = get_node_abi;
function get_runtime_abi(runtime, target_version) {
    if (!runtime) throw new Error("get_runtime_abi requires valid runtime arg");
    if (runtime === "node-webkit") return get_node_webkit_abi(runtime, target_version || process.versions["node-webkit"]);
    else if (runtime === "electron") return get_electron_abi(runtime, target_version || process.versions.electron);
    else {
        if (runtime !== "node") throw new Error("Unknown Runtime: '" + runtime + "'");
        if (!target_version) return get_node_abi(runtime, process.versions);
        else {
            let cross_obj;
            // abi_crosswalk generated with ./scripts/abi_crosswalk.js
            if (abi_crosswalk[target_version]) cross_obj = abi_crosswalk[target_version];
            else {
                const target_parts = target_version.split(".").map((i)=>{
                    return +i;
                });
                if (target_parts.length !== 3) throw new Error("Unknown target version: " + target_version);
                /*
                    The below code tries to infer the last known ABI compatible version
                    that we have recorded in the abi_crosswalk.json when an exact match
                    is not possible. The reasons for this to exist are complicated:

                       - We support passing --target to be able to allow developers to package binaries for versions of node
                         that are not the same one as they are running. This might also be used in combination with the
                         --target_arch or --target_platform flags to also package binaries for alternative platforms
                       - When --target is passed we can't therefore determine the ABI (process.versions.modules) from the node
                         version that is running in memory
                       - So, therefore node-pre-gyp keeps an "ABI crosswalk" (lib/util/abi_crosswalk.json) to be able to look
                         this info up for all versions
                       - But we cannot easily predict what the future ABI will be for released versions
                       - And node-pre-gyp needs to be a `bundledDependency` in apps that depend on it in order to work correctly
                         by being fully available at install time.
                       - So, the speed of node releases and the bundled nature of node-pre-gyp mean that a new node-pre-gyp release
                         need to happen for every node.js/io.js/node-webkit/nw.js/atom-shell/etc release that might come online if
                         you want the `--target` flag to keep working for the latest version
                       - Which is impractical ^^
                       - Hence the below code guesses about future ABI to make the need to update node-pre-gyp less demanding.

                    In practice then you can have a dependency of your app like `node-sqlite3` that bundles a `node-pre-gyp` that
                    only knows about node v0.10.33 in the `abi_crosswalk.json` but target node v0.10.34 (which is assumed to be
                    ABI compatible with v0.10.33).

                    TODO: use semver module instead of custom version parsing
                */ const major = target_parts[0];
                let minor = target_parts[1];
                let patch = target_parts[2];
                // io.js: yeah if node.js ever releases 1.x this will break
                // but that is unlikely to happen: https://github.com/iojs/io.js/pull/253#issuecomment-69432616
                if (major === 1) // look for last release that is the same major version
                // e.g. we assume io.js 1.x is ABI compatible with >= 1.0.0
                while(true){
                    if (minor > 0) --minor;
                    if (patch > 0) --patch;
                    const new_iojs_target = "" + major + "." + minor + "." + patch;
                    if (abi_crosswalk[new_iojs_target]) {
                        cross_obj = abi_crosswalk[new_iojs_target];
                        console.log("Warning: node-pre-gyp could not find exact match for " + target_version);
                        console.log("Warning: but node-pre-gyp successfully choose " + new_iojs_target + " as ABI compatible target");
                        break;
                    }
                    if (minor === 0 && patch === 0) break;
                }
                else if (major >= 2) // look for last release that is the same major version
                {
                    if (major_versions[major]) {
                        cross_obj = abi_crosswalk[major_versions[major]];
                        console.log("Warning: node-pre-gyp could not find exact match for " + target_version);
                        console.log("Warning: but node-pre-gyp successfully choose " + major_versions[major] + " as ABI compatible target");
                    }
                } else if (major === 0) {
                    if (target_parts[1] % 2 === 0) // look for the last release that is the same minor release
                    // e.g. we assume node 0.10.x is ABI compatible with >= 0.10.0
                    while(--patch > 0){
                        const new_node_target = "" + major + "." + minor + "." + patch;
                        if (abi_crosswalk[new_node_target]) {
                            cross_obj = abi_crosswalk[new_node_target];
                            console.log("Warning: node-pre-gyp could not find exact match for " + target_version);
                            console.log("Warning: but node-pre-gyp successfully choose " + new_node_target + " as ABI compatible target");
                            break;
                        }
                    }
                }
            }
            if (!cross_obj) throw new Error("Unsupported target version: " + target_version);
            // emulate process.versions
            const versions_obj = {
                node: target_version,
                v8: cross_obj.v8 + ".0",
                // abi_crosswalk uses 1 for node versions lacking process.versions.modules
                // process.versions.modules added in >= v0.10.4 and v0.11.7
                modules: cross_obj.node_abi > 1 ? cross_obj.node_abi : undefined
            };
            return get_node_abi(runtime, versions_obj);
        }
    }
}
module.exports.get_runtime_abi = get_runtime_abi;
const required_parameters = [
    "module_name",
    "module_path",
    "host"
];
function validate_config(package_json, opts) {
    const msg = package_json.name + " package.json is not node-pre-gyp ready:\n";
    const missing = [];
    if (!package_json.main) missing.push("main");
    if (!package_json.version) missing.push("version");
    if (!package_json.name) missing.push("name");
    if (!package_json.binary) missing.push("binary");
    const o = package_json.binary;
    if (o) required_parameters.forEach((p)=>{
        if (!o[p] || typeof o[p] !== "string") missing.push("binary." + p);
    });
    if (missing.length >= 1) throw new Error(msg + "package.json must declare these properties: \n" + missing.join("\n"));
    if (o) {
        // enforce https over http
        const protocol = url.parse(o.host).protocol;
        if (protocol === "http:") throw new Error("'host' protocol (" + protocol + ") is invalid - only 'https:' is accepted");
    }
    napi.validate_package_json(package_json, opts);
}
module.exports.validate_config = validate_config;
function eval_template(template, opts) {
    Object.keys(opts).forEach((key)=>{
        const pattern = "{" + key + "}";
        while(template.indexOf(pattern) > -1)template = template.replace(pattern, opts[key]);
    });
    return template;
}
// url.resolve needs single trailing slash
// to behave correctly, otherwise a double slash
// may end up in the url which breaks requests
// and a lacking slash may not lead to proper joining
function fix_slashes(pathname) {
    if (pathname.slice(-1) !== "/") return pathname + "/";
    return pathname;
}
// remove double slashes
// note: path.normalize will not work because
// it will convert forward to back slashes
function drop_double_slashes(pathname) {
    return pathname.replace(/\/\//g, "/");
}
function get_process_runtime(versions) {
    let runtime = "node";
    if (versions["node-webkit"]) runtime = "node-webkit";
    else if (versions.electron) runtime = "electron";
    return runtime;
}
module.exports.get_process_runtime = get_process_runtime;
const default_package_name = "{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz";
const default_remote_path = "";
module.exports.evaluate = function(package_json, options, napi_build_version) {
    options = options || {};
    validate_config(package_json, options); // options is a suitable substitute for opts in this case
    const v = package_json.version;
    const module_version = semver.parse(v);
    const runtime = options.runtime || get_process_runtime(process.versions);
    const opts = {
        name: package_json.name,
        configuration: options.debug ? "Debug" : "Release",
        debug: options.debug,
        module_name: package_json.binary.module_name,
        version: module_version.version,
        prerelease: module_version.prerelease.length ? module_version.prerelease.join(".") : "",
        build: module_version.build.length ? module_version.build.join(".") : "",
        major: module_version.major,
        minor: module_version.minor,
        patch: module_version.patch,
        runtime: runtime,
        node_abi: get_runtime_abi(runtime, options.target),
        node_abi_napi: napi.get_napi_version(options.target) ? "napi" : get_runtime_abi(runtime, options.target),
        napi_version: napi.get_napi_version(options.target),
        napi_build_version: napi_build_version || "",
        node_napi_label: napi_build_version ? "napi-v" + napi_build_version : get_runtime_abi(runtime, options.target),
        target: options.target || "",
        platform: options.target_platform || process.platform,
        target_platform: options.target_platform || process.platform,
        arch: options.target_arch || process.arch,
        target_arch: options.target_arch || process.arch,
        libc: options.target_libc || detect_libc.familySync() || "unknown",
        module_main: package_json.main,
        toolset: options.toolset || "",
        bucket: package_json.binary.bucket,
        region: package_json.binary.region,
        s3ForcePathStyle: package_json.binary.s3ForcePathStyle || false
    };
    // support host mirror with npm config `--{module_name}_binary_host_mirror`
    // e.g.: https://github.com/node-inspector/v8-profiler/blob/master/package.json#L25
    // > npm install v8-profiler --profiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/
    const validModuleName = opts.module_name.replace("-", "_");
    const host = process.env["npm_config_" + validModuleName + "_binary_host_mirror"] || package_json.binary.host;
    opts.host = fix_slashes(eval_template(host, opts));
    opts.module_path = eval_template(package_json.binary.module_path, opts);
    // now we resolve the module_path to ensure it is absolute so that binding.gyp variables work predictably
    if (options.module_root) // resolve relative to known module root: works for pre-binding require
    opts.module_path = path.join(options.module_root, opts.module_path);
    else // resolve relative to current working directory: works for node-pre-gyp commands
    opts.module_path = path.resolve(opts.module_path);
    opts.module = path.join(opts.module_path, opts.module_name + ".node");
    opts.remote_path = package_json.binary.remote_path ? drop_double_slashes(fix_slashes(eval_template(package_json.binary.remote_path, opts))) : default_remote_path;
    const package_name = package_json.binary.package_name ? package_json.binary.package_name : default_package_name;
    opts.package_name = eval_template(package_name, opts);
    opts.staged_tarball = path.join("build/stage", opts.remote_path, opts.package_name);
    opts.hosted_path = url.resolve(opts.host, opts.remote_path);
    opts.hosted_tarball = url.resolve(opts.hosted_path, opts.package_name);
    return opts;
};

},{"759e666d7bd66025":"kKEHw","2acbeff0326c470c":"i1BLo","fe50dac538e49360":"5Vqvw","d61377a079b5baee":"e4taF","c157c9dd2e77d6f3":"1R12H","c63ce35ce3074cbd":"1SHwg","cdce8c032d5f0921":"8L4YL"}],"5Vqvw":[function(require,module,exports) {
// just pre-load all the stuff that index.js lazily exports
const internalRe = require("2ef367e729437dbf");
const constants = require("15796d6f714ec7ac");
const SemVer = require("784948b06600d9b2");
const identifiers = require("70f963db887a798c");
const parse = require("3f445ade66470b21");
const valid = require("f44378b7de87a0b4");
const clean = require("7742c78cf22bae39");
const inc = require("a751dd1df28d6bbb");
const diff = require("e000803318fe9f2f");
const major = require("d290038a9a954b0a");
const minor = require("c5e4bbab325a5aae");
const patch = require("5c0bb8d32de60bb3");
const prerelease = require("323f12e5af5ebd1e");
const compare = require("29cf114a56181e64");
const rcompare = require("827db0815bb2f2cd");
const compareLoose = require("b644f26560ec8124");
const compareBuild = require("606d0e43dd66a24c");
const sort = require("1560ed361cfa42e6");
const rsort = require("f9e1f00918a8cfd7");
const gt = require("3694a9720f15d6ac");
const lt = require("4559dbda8a777185");
const eq = require("14a4b88a0b1fd3a5");
const neq = require("416d9b63c3df2ead");
const gte = require("d39630b19344a843");
const lte = require("3fb74c9a41c1cef6");
const cmp = require("3435ca1bbec7b99");
const coerce = require("d67409238c8fc031");
const Comparator = require("1d07035d00450bca");
const Range = require("b280ab3e26924ac1");
const satisfies = require("ba9d0d2a3e49b569");
const toComparators = require("e6b2802b2233287d");
const maxSatisfying = require("2bfdfb0adcbcb71b");
const minSatisfying = require("264df1ba0d261fad");
const minVersion = require("cd4980125683761f");
const validRange = require("a0319a4a98954087");
const outside = require("fc457e2bda4345b2");
const gtr = require("c885d2b556186a1a");
const ltr = require("58740c779f187b15");
const intersects = require("22421cf146448c92");
const simplifyRange = require("439ddbc649d6486");
const subset = require("f1e57a2c808f532d");
module.exports = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
};

},{"2ef367e729437dbf":"6vyDt","15796d6f714ec7ac":"c0kFn","784948b06600d9b2":"lcyOI","70f963db887a798c":"UnGIf","3f445ade66470b21":"1lLlk","f44378b7de87a0b4":"gOAC7","7742c78cf22bae39":"81JEa","a751dd1df28d6bbb":"6FC27","e000803318fe9f2f":"93MCI","d290038a9a954b0a":"hsEYR","c5e4bbab325a5aae":"ceRH2","5c0bb8d32de60bb3":"g8OTj","323f12e5af5ebd1e":"8ZfuC","29cf114a56181e64":"cre3U","827db0815bb2f2cd":"95HAo","b644f26560ec8124":"69cM7","606d0e43dd66a24c":"gp33k","1560ed361cfa42e6":"cBShw","f9e1f00918a8cfd7":"h62GL","3694a9720f15d6ac":"9J4RQ","4559dbda8a777185":"hlvwb","14a4b88a0b1fd3a5":"7qrw9","416d9b63c3df2ead":"2z6uz","d39630b19344a843":"gHK3G","3fb74c9a41c1cef6":"g5h6W","3435ca1bbec7b99":"SwfMS","d67409238c8fc031":"6bpHW","1d07035d00450bca":"cuEM4","b280ab3e26924ac1":"gvtFF","ba9d0d2a3e49b569":"6TP70","e6b2802b2233287d":"6QcSL","2bfdfb0adcbcb71b":"bYO47","264df1ba0d261fad":"h4BPj","cd4980125683761f":"fOe2G","a0319a4a98954087":"cVVL7","fc457e2bda4345b2":"4A9DG","c885d2b556186a1a":"6UlUJ","58740c779f187b15":"jsUKZ","22421cf146448c92":"enXaw","439ddbc649d6486":"c5sog","f1e57a2c808f532d":"bGtnP"}],"6vyDt":[function(require,module,exports) {
const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = require("9328c2484f003df4");
const debug = require("9075cfb365332427");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        "\\s",
        1
    ],
    [
        "\\d",
        MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken("FULL", `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
createToken("GTLT", "((?:<|>)?=?)");
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?` + `(?:${src[t.BUILD]})?` + `(?:$|[^\\d])`);
createToken("COERCERTL", src[t.COERCE], true);
createToken("COERCERTLFULL", src[t.COERCEFULL], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken("LONETILDE", "(?:~>?)");
createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = "$1~";
createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken("LONECARET", "(?:\\^)");
createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = "$1^";
createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = "$1$2$3";
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken("STAR", "(<|>)?=?\\s*\\*");
// >=0.0.0 is like a star
createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");

},{"9328c2484f003df4":"c0kFn","9075cfb365332427":"2RM3A"}],"c0kFn":[function(require,module,exports) {
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = "2.0.0";
const MAX_LENGTH = 256;
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
const RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
module.exports = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};

},{}],"2RM3A":[function(require,module,exports) {
var process = require("3e9ec50def946db3");
const debug = (typeof process === "object" && process.env && undefined, ()=>{});
module.exports = debug;

},{"3e9ec50def946db3":"kKEHw"}],"lcyOI":[function(require,module,exports) {
const debug = require("595c172e7d863d06");
const { MAX_LENGTH, MAX_SAFE_INTEGER } = require("bd8d57fbca62978a");
const { safeRe: re, t } = require("2b364a26e67d9817");
const parseOptions = require("f1a723539d6cc9b5");
const { compareIdentifiers } = require("2451a15946a38fcd");
class SemVer {
    constructor(version, options){
        options = parseOptions(options);
        if (version instanceof SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
}
module.exports = SemVer;

},{"595c172e7d863d06":"2RM3A","bd8d57fbca62978a":"c0kFn","2b364a26e67d9817":"6vyDt","f1a723539d6cc9b5":"2cLuM","2451a15946a38fcd":"UnGIf"}],"2cLuM":[function(require,module,exports) {
// parse out just the options we care about
const looseOption = Object.freeze({
    loose: true
});
const emptyOpts = Object.freeze({});
const parseOptions = (options)=>{
    if (!options) return emptyOpts;
    if (typeof options !== "object") return looseOption;
    return options;
};
module.exports = parseOptions;

},{}],"UnGIf":[function(require,module,exports) {
const numeric = /^[0-9]+$/;
const compareIdentifiers = (a, b)=>{
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const rcompareIdentifiers = (a, b)=>compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
};

},{}],"1lLlk":[function(require,module,exports) {
const SemVer = require("575e97778d3944c0");
const parse = (version, options, throwErrors = false)=>{
    if (version instanceof SemVer) return version;
    try {
        return new SemVer(version, options);
    } catch (er) {
        if (!throwErrors) return null;
        throw er;
    }
};
module.exports = parse;

},{"575e97778d3944c0":"lcyOI"}],"gOAC7":[function(require,module,exports) {
const parse = require("6a6e19c11f3ced24");
const valid = (version, options)=>{
    const v = parse(version, options);
    return v ? v.version : null;
};
module.exports = valid;

},{"6a6e19c11f3ced24":"1lLlk"}],"81JEa":[function(require,module,exports) {
const parse = require("661ff2c6ff41830b");
const clean = (version, options)=>{
    const s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
};
module.exports = clean;

},{"661ff2c6ff41830b":"1lLlk"}],"6FC27":[function(require,module,exports) {
const SemVer = require("9a4ed023da196604");
const inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = inc;

},{"9a4ed023da196604":"lcyOI"}],"93MCI":[function(require,module,exports) {
const parse = require("3b6d0e3ec696b30a");
const diff = (version1, version2)=>{
    const v1 = parse(version1, null, true);
    const v2 = parse(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) return null;
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) return "major";
        // Otherwise it can be determined by checking the high version
        if (highVersion.patch) // anything higher than a patch bump would result in the wrong version
        return "patch";
        if (highVersion.minor) // anything higher than a minor bump would result in the wrong version
        return "minor";
        // bumping major/minor/patch all have same result
        return "major";
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) return prefix + "major";
    if (v1.minor !== v2.minor) return prefix + "minor";
    if (v1.patch !== v2.patch) return prefix + "patch";
    // high and low are preleases
    return "prerelease";
};
module.exports = diff;

},{"3b6d0e3ec696b30a":"1lLlk"}],"hsEYR":[function(require,module,exports) {
const SemVer = require("53a097ab5c27a647");
const major = (a, loose)=>new SemVer(a, loose).major;
module.exports = major;

},{"53a097ab5c27a647":"lcyOI"}],"ceRH2":[function(require,module,exports) {
const SemVer = require("f130a90acb01ac10");
const minor = (a, loose)=>new SemVer(a, loose).minor;
module.exports = minor;

},{"f130a90acb01ac10":"lcyOI"}],"g8OTj":[function(require,module,exports) {
const SemVer = require("54b9ac3bbdf83b31");
const patch = (a, loose)=>new SemVer(a, loose).patch;
module.exports = patch;

},{"54b9ac3bbdf83b31":"lcyOI"}],"8ZfuC":[function(require,module,exports) {
const parse = require("ff5ab55da1933db3");
const prerelease = (version, options)=>{
    const parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = prerelease;

},{"ff5ab55da1933db3":"1lLlk"}],"cre3U":[function(require,module,exports) {
const SemVer = require("f16c9f4397244ee0");
const compare = (a, b, loose)=>new SemVer(a, loose).compare(new SemVer(b, loose));
module.exports = compare;

},{"f16c9f4397244ee0":"lcyOI"}],"95HAo":[function(require,module,exports) {
const compare = require("4bfcc14a9711a47b");
const rcompare = (a, b, loose)=>compare(b, a, loose);
module.exports = rcompare;

},{"4bfcc14a9711a47b":"cre3U"}],"69cM7":[function(require,module,exports) {
const compare = require("95c8404dc369c13b");
const compareLoose = (a, b)=>compare(a, b, true);
module.exports = compareLoose;

},{"95c8404dc369c13b":"cre3U"}],"gp33k":[function(require,module,exports) {
const SemVer = require("3659675d95d38f3");
const compareBuild = (a, b, loose)=>{
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = compareBuild;

},{"3659675d95d38f3":"lcyOI"}],"cBShw":[function(require,module,exports) {
const compareBuild = require("7c22e552e691e157");
const sort = (list, loose)=>list.sort((a, b)=>compareBuild(a, b, loose));
module.exports = sort;

},{"7c22e552e691e157":"gp33k"}],"h62GL":[function(require,module,exports) {
const compareBuild = require("468f4992c854a69a");
const rsort = (list, loose)=>list.sort((a, b)=>compareBuild(b, a, loose));
module.exports = rsort;

},{"468f4992c854a69a":"gp33k"}],"9J4RQ":[function(require,module,exports) {
const compare = require("85515ef2889f4f89");
const gt = (a, b, loose)=>compare(a, b, loose) > 0;
module.exports = gt;

},{"85515ef2889f4f89":"cre3U"}],"hlvwb":[function(require,module,exports) {
const compare = require("9d2d7734c37f90e6");
const lt = (a, b, loose)=>compare(a, b, loose) < 0;
module.exports = lt;

},{"9d2d7734c37f90e6":"cre3U"}],"7qrw9":[function(require,module,exports) {
const compare = require("d6abf8ed12ec38c1");
const eq = (a, b, loose)=>compare(a, b, loose) === 0;
module.exports = eq;

},{"d6abf8ed12ec38c1":"cre3U"}],"2z6uz":[function(require,module,exports) {
const compare = require("5232df27c4c4faa9");
const neq = (a, b, loose)=>compare(a, b, loose) !== 0;
module.exports = neq;

},{"5232df27c4c4faa9":"cre3U"}],"gHK3G":[function(require,module,exports) {
const compare = require("9183f7fbecba58ae");
const gte = (a, b, loose)=>compare(a, b, loose) >= 0;
module.exports = gte;

},{"9183f7fbecba58ae":"cre3U"}],"g5h6W":[function(require,module,exports) {
const compare = require("e55eadc974580af5");
const lte = (a, b, loose)=>compare(a, b, loose) <= 0;
module.exports = lte;

},{"e55eadc974580af5":"cre3U"}],"SwfMS":[function(require,module,exports) {
const eq = require("bff7f16298b8dbaa");
const neq = require("6a1bb69c2d499261");
const gt = require("dca4b9c05150a919");
const gte = require("7b5dc70556970d6c");
const lt = require("a3a3bcc6e4d6bbdf");
const lte = require("5f1835ee4d0596f3");
const cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return eq(a, b, loose);
        case "!=":
            return neq(a, b, loose);
        case ">":
            return gt(a, b, loose);
        case ">=":
            return gte(a, b, loose);
        case "<":
            return lt(a, b, loose);
        case "<=":
            return lte(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = cmp;

},{"bff7f16298b8dbaa":"7qrw9","6a1bb69c2d499261":"2z6uz","dca4b9c05150a919":"9J4RQ","7b5dc70556970d6c":"gHK3G","a3a3bcc6e4d6bbdf":"hlvwb","5f1835ee4d0596f3":"g5h6W"}],"6bpHW":[function(require,module,exports) {
const SemVer = require("25529d97ade3ccdf");
const parse = require("90724e3140f56906");
const { safeRe: re, t } = require("49971e907f1359e9");
const coerce = (version, options)=>{
    if (version instanceof SemVer) return version;
    if (typeof version === "number") version = String(version);
    if (typeof version !== "string") return null;
    options = options || {};
    let match = null;
    if (!options.rtl) match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) return null;
    const major = match[2];
    const minor = match[3] || "0";
    const patch = match[4] || "0";
    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
};
module.exports = coerce;

},{"25529d97ade3ccdf":"lcyOI","90724e3140f56906":"1lLlk","49971e907f1359e9":"6vyDt"}],"cuEM4":[function(require,module,exports) {
const ANY = Symbol("SemVer ANY");
// hoisted class for cyclic dependency
class Comparator {
    static get ANY() {
        return ANY;
    }
    constructor(comp, options){
        options = parseOptions(options);
        if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            else comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) this.value = "";
        else this.value = this.operator + this.semver.version;
        debug("comp", this);
    }
    parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== undefined ? m[1] : "";
        if (this.operator === "=") this.operator = "";
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) this.semver = ANY;
        else this.semver = new SemVer(m[2], this.options.loose);
    }
    toString() {
        return this.value;
    }
    test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) return true;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
        if (this.operator === "") {
            if (this.value === "") return true;
            return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
            if (comp.value === "") return true;
            return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
        // Same direction increasing (> or >=)
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
        // opposite directions less than
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
        // opposite directions greater than
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
        return false;
    }
}
module.exports = Comparator;
const parseOptions = require("b6563e9809bd921f");
const { safeRe: re, t } = require("f844ee6695e23038");
const cmp = require("e62b495d112b67cb");
const debug = require("13b490d953a8241f");
const SemVer = require("f688b7fbae163ad8");
const Range = require("b8839ba12a91a5c9");

},{"b6563e9809bd921f":"2cLuM","f844ee6695e23038":"6vyDt","e62b495d112b67cb":"SwfMS","13b490d953a8241f":"2RM3A","f688b7fbae163ad8":"lcyOI","b8839ba12a91a5c9":"gvtFF"}],"gvtFF":[function(require,module,exports) {
// hoisted class for cyclic dependency
class Range {
    constructor(range, options){
        options = parseOptions(options);
        if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
            else return new Range(range.raw, options);
        }
        if (range instanceof Comparator) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.format();
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().split(/\s+/).join(" ");
        // First, split on ||
        this.set = this.raw.split("||")// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!isNullSet(c[0]));
            if (this.set.length === 0) this.set = [
                first
            ];
            else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set)if (c.length === 1 && isAny(c[0])) {
                    this.set = [
                        c
                    ];
                    break;
                }
            }
        }
        this.format();
    }
    format() {
        this.range = this.set.map((comps)=>comps.join(" ").trim()).join("||").trim();
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) return cached;
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(" ").map((comp)=>parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>replaceGTE0(comp, this.options));
        if (loose) // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter((comp)=>{
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
        });
        debug("range list", rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));
        for (const comp of comparators){
            if (isNullSet(comp)) return [
                comp
            ];
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
        const result = [
            ...rangeMap.values()
        ];
        cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof Range)) throw new TypeError("a Range is required");
        return this.set.some((thisComparators)=>{
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) return false;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        for(let i = 0; i < this.set.length; i++){
            if (testSet(this.set[i], version, this.options)) return true;
        }
        return false;
    }
}
module.exports = Range;
const LRU = require("f98d093917001b0e");
const cache = new LRU({
    max: 1000
});
const parseOptions = require("17bb122b9b0740d9");
const Comparator = require("df9131adcc191f91");
const debug = require("1c7c6c8abfe9bd3b");
const SemVer = require("d77fd978650b507f");
const { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = require("9bd5ca5276add1c4");
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require("8c8074dc7fc46964");
const isNullSet = (c)=>c.value === "<0.0.0-0";
const isAny = (c)=>c.value === "";
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options)=>{
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
};
const isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceTilde(c, options)).join(" ");
};
const replaceTilde = (comp, options)=>{
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        else if (isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        else if (pr) {
            debug("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        debug("tilde return", ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceCaret(c, options)).join(" ");
};
const replaceCaret = (comp, options)=>{
    debug("caret", comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        else if (isX(p)) {
            if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        } else if (pr) {
            debug("replaceCaret pr", pr);
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        } else {
            debug("no pr");
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
        debug("caret return", ret);
        return ret;
    });
};
const replaceXRanges = (comp, options)=>{
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c)=>replaceXRange(c, options)).join(" ");
};
const replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) gtlt = "";
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
            if (gtlt === ">" || gtlt === "<") // nothing is allowed
            ret = "<0.0.0-0";
            else // nothing is forbidden
            ret = "*";
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) m = 0;
            p = 0;
            if (gtlt === ">") {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = ">=";
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === "<=") {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = "<";
                if (xm) M = +M + 1;
                else m = +m + 1;
            }
            if (gtlt === "<") pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        debug("xRange return", ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options)=>{
    debug("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], "");
};
const replaceGTE0 = (comp, options)=>{
    debug("replaceGTE0", comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb)=>{
        if (isX(fM)) from = "";
        else if (isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        else if (isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        else if (fpr) from = `>=${from}`;
        else from = `>=${from}${incPr ? "-0" : ""}`;
        if (isX(tM)) to = "";
        else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
        else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
        else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
        else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
        else to = `<=${to}`;
        return `${from} ${to}`.trim();
    };
const testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) return false;
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) continue;
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};

},{"f98d093917001b0e":"aSXqN","17bb122b9b0740d9":"2cLuM","df9131adcc191f91":"cuEM4","1c7c6c8abfe9bd3b":"2RM3A","d77fd978650b507f":"lcyOI","9bd5ca5276add1c4":"6vyDt","8c8074dc7fc46964":"c0kFn"}],"aSXqN":[function(require,module,exports) {
"use strict";
// A linked list to keep track of recently-used-ness
const Yallist = require("74ed0a3e7f9c78af");
const MAX = Symbol("max");
const LENGTH = Symbol("length");
const LENGTH_CALCULATOR = Symbol("lengthCalculator");
const ALLOW_STALE = Symbol("allowStale");
const MAX_AGE = Symbol("maxAge");
const DISPOSE = Symbol("dispose");
const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
const LRU_LIST = Symbol("lruList");
const CACHE = Symbol("cache");
const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
const naiveLength = ()=>1;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
    constructor(options){
        if (typeof options === "number") options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
        // Kind of weird to have a default max of Infinity, but oh well.
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
    }
    get max() {
        return this[MAX];
    }
    set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
    }
    get maxAge() {
        return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== "function") lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit)=>{
                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                this[LENGTH] += hit.length;
            });
        }
        trim(this);
    }
    get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
    }
    get length() {
        return this[LENGTH];
    }
    get itemCount() {
        return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].head; walker !== null;){
            const next = walker.next;
            forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[LRU_LIST].toArray().map((k)=>k.key);
    }
    values() {
        return this[LRU_LIST].toArray().map((k)=>k.value);
    }
    reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value));
        this[CACHE] = new Map() // hash of items by key
        ;
        this[LRU_LIST] = new Yallist() // list of items in order of use recency
        ;
        this[LENGTH] = 0 // length of items in the list
        ;
    }
    dump() {
        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h)=>h);
    }
    dumpLru() {
        return this[LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
                del(this, this[CACHE].get(key));
                return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[MAX]) {
            if (this[DISPOSE]) this[DISPOSE](key, value);
            return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
    }
    has(key) {
        if (!this[CACHE].has(key)) return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
    }
    get(key) {
        return get(this, key, true);
    }
    peek(key) {
        return get(this, key, false);
    }
    pop() {
        const node = this[LRU_LIST].tail;
        if (!node) return null;
        del(this, node);
        return node.value;
    }
    del(key) {
        del(this, this[CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
            }
        }
    }
    prune() {
        this[CACHE].forEach((value, key)=>get(this, key, false));
    }
}
const get = (self, key, doUse)=>{
    const node = self[CACHE].get(key);
    if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
            del(self, node);
            if (!self[ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
const isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};
const trim = (self)=>{
    if (self[LENGTH] > self[MAX]) for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        del(self, walker);
        walker = prev;
    }
};
const del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
    }
};
class Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
module.exports = LRUCache;

},{"74ed0a3e7f9c78af":"1wx4I"}],"1wx4I":[function(require,module,exports) {
"use strict";
module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;
function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) self = new Yallist();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error("removing node which does not belong to this list");
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)push(this, arguments[i]);
    return this.length;
};
Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)unshift(this, arguments[i]);
    return this.length;
};
Yallist.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
Yallist.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = insert(this, walker, nodes[i]);
    return ret;
};
Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function insert(self, node, value) {
    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function Node(value, prev, next, list) {
    if (!(this instanceof Node)) return new Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}
try {
    // add if support for Symbol.iterator is present
    require("f42a47fd4aac7ece")(Yallist);
} catch (er) {}

},{"f42a47fd4aac7ece":"hQagT"}],"hQagT":[function(require,module,exports) {
"use strict";
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next)yield walker.value;
    };
};

},{}],"6TP70":[function(require,module,exports) {
const Range = require("b60a47303a13d107");
const satisfies = (version, range, options)=>{
    try {
        range = new Range(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = satisfies;

},{"b60a47303a13d107":"gvtFF"}],"6QcSL":[function(require,module,exports) {
const Range = require("f497be9904aac7c0");
// Mostly just for testing and legacy API reasons
const toComparators = (range, options)=>new Range(range, options).set.map((comp)=>comp.map((c)=>c.value).join(" ").trim().split(" "));
module.exports = toComparators;

},{"f497be9904aac7c0":"gvtFF"}],"bYO47":[function(require,module,exports) {
const SemVer = require("96d622a81d57358d");
const Range = require("f2865e94142488ab");
const maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new SemVer(max, options);
            }
        }
    });
    return max;
};
module.exports = maxSatisfying;

},{"96d622a81d57358d":"lcyOI","f2865e94142488ab":"gvtFF"}],"h4BPj":[function(require,module,exports) {
const SemVer = require("fea3851ba09d8834");
const Range = require("9d2799b098b5c4c7");
const minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new SemVer(min, options);
            }
        }
    });
    return min;
};
module.exports = minSatisfying;

},{"fea3851ba09d8834":"lcyOI","9d2799b098b5c4c7":"gvtFF"}],"fOe2G":[function(require,module,exports) {
const SemVer = require("4c531b1d555da497");
const Range = require("76327127dc36ed58");
const gt = require("a5ac47b45ae8684c");
const minVersion = (range, loose)=>{
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver)) return minver;
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) return minver;
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new SemVer(comparator.semver.version);
            switch(comparator.operator){
                case ">":
                    if (compver.prerelease.length === 0) compver.patch++;
                    else compver.prerelease.push(0);
                    compver.raw = compver.format();
                /* fallthrough */ case "":
                case ">=":
                    if (!setMin || gt(compver, setMin)) setMin = compver;
                    break;
                case "<":
                case "<=":
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || gt(minver, setMin))) minver = setMin;
    }
    if (minver && range.test(minver)) return minver;
    return null;
};
module.exports = minVersion;

},{"4c531b1d555da497":"lcyOI","76327127dc36ed58":"gvtFF","a5ac47b45ae8684c":"9J4RQ"}],"cVVL7":[function(require,module,exports) {
const Range = require("fd2c35053245b1fd");
const validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || "*";
    } catch (er) {
        return null;
    }
};
module.exports = validRange;

},{"fd2c35053245b1fd":"gvtFF"}],"4A9DG":[function(require,module,exports) {
const SemVer = require("65977c6c7fab41e0");
const Comparator = require("8b0890ac7a0294ed");
const { ANY } = Comparator;
const Range = require("9baad77301d611e2");
const satisfies = require("1a3d276234841886");
const gt = require("8f784c6ef2cd1972");
const lt = require("3c234e2ddd9db68a");
const lte = require("88893a74cd9f934");
const gte = require("6cccfcce37ef6329");
const outside = (version, range, hilo, options)=>{
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
        case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) return false;
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === ANY) comparator = new Comparator(">=0.0.0");
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) high = comparator;
            else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) return false;
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
        else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
};
module.exports = outside;

},{"65977c6c7fab41e0":"lcyOI","8b0890ac7a0294ed":"cuEM4","9baad77301d611e2":"gvtFF","1a3d276234841886":"6TP70","8f784c6ef2cd1972":"9J4RQ","3c234e2ddd9db68a":"hlvwb","88893a74cd9f934":"g5h6W","6cccfcce37ef6329":"gHK3G"}],"6UlUJ":[function(require,module,exports) {
// Determine if version is greater than all the versions possible in the range.
const outside = require("be5e984e16e512b9");
const gtr = (version, range, options)=>outside(version, range, ">", options);
module.exports = gtr;

},{"be5e984e16e512b9":"4A9DG"}],"jsUKZ":[function(require,module,exports) {
const outside = require("b7f00e21a32b75a5");
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options)=>outside(version, range, "<", options);
module.exports = ltr;

},{"b7f00e21a32b75a5":"4A9DG"}],"enXaw":[function(require,module,exports) {
const Range = require("5205f80872e81710");
const intersects = (r1, r2, options)=>{
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2, options);
};
module.exports = intersects;

},{"5205f80872e81710":"gvtFF"}],"c5sog":[function(require,module,exports) {
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = require("e72123f17434788");
const compare = require("3eb9817061c82995");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>compare(a, b, options));
    for (const version of v){
        const included = satisfies(version, range, options);
        if (included) {
            prev = version;
            if (!first) first = version;
        } else {
            if (prev) set.push([
                first,
                prev
            ]);
            prev = null;
            first = null;
        }
    }
    if (first) set.push([
        first,
        null
    ]);
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) ranges.push(min);
        else if (!max && min === v[0]) ranges.push("*");
        else if (!max) ranges.push(`>=${min}`);
        else if (min === v[0]) ranges.push(`<=${max}`);
        else ranges.push(`${min} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};

},{"e72123f17434788":"6TP70","3eb9817061c82995":"cre3U"}],"bGtnP":[function(require,module,exports) {
const Range = require("c141b0432e6ae71b");
const Comparator = require("94bed966a1054073");
const { ANY } = Comparator;
const satisfies = require("acfaf6445a9794b");
const compare = require("d9ed82a69c119cf4");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const subset = (sub, dom, options = {})=>{
    if (sub === dom) return true;
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) return false;
    }
    return true;
};
const minimumVersionWithPreRelease = [
    new Comparator(">=0.0.0-0")
];
const minimumVersion = [
    new Comparator(">=0.0.0")
];
const simpleSubset = (sub, dom, options)=>{
    if (sub === dom) return true;
    if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) return true;
        else if (options.includePrerelease) sub = minimumVersionWithPreRelease;
        else sub = minimumVersion;
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) return true;
        else dom = minimumVersion;
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === ">" || c.operator === ">=") gt = higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=") lt = lowerLT(lt, c, options);
        else eqSet.add(c.semver);
    }
    if (eqSet.size > 1) return null;
    let gtltComp;
    if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null;
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !satisfies(eq, String(gt), options)) return null;
        if (lt && !satisfies(eq, String(lt), options)) return null;
        for (const c of dom){
            if (!satisfies(eq, String(c), options)) return false;
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
            }
            if (c.operator === ">" || c.operator === ">=") {
                higher = higherGT(gt, c, options);
                if (higher === c && higher !== gt) return false;
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) return false;
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
            }
            if (c.operator === "<" || c.operator === "<=") {
                lower = lowerLT(lt, c, options);
                if (lower === c && lower !== lt) return false;
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) return false;
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) return false;
    return true;
};
// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
};
module.exports = subset;

},{"c141b0432e6ae71b":"gvtFF","94bed966a1054073":"cuEM4","acfaf6445a9794b":"6TP70","d9ed82a69c119cf4":"cre3U"}],"1R12H":[function(require,module,exports) {
// Copyright 2017 Lovell Fuller and others.
// SPDX-License-Identifier: Apache-2.0
"use strict";
const childProcess = require("365b551e7c831c0c");
const { isLinux, getReport } = require("a374c8e3c80ef4e6");
const { LDD_PATH, readFile, readFileSync } = require("630aeb4478b2ca86");
let cachedFamilyFilesystem;
let cachedVersionFilesystem;
const command = "getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true";
let commandOut = "";
const safeCommand = ()=>{
    if (!commandOut) return new Promise((resolve)=>{
        childProcess.exec(command, (err, out)=>{
            commandOut = err ? " " : out;
            resolve(commandOut);
        });
    });
    return commandOut;
};
const safeCommandSync = ()=>{
    if (!commandOut) try {
        commandOut = childProcess.execSync(command, {
            encoding: "utf8"
        });
    } catch (_err) {
        commandOut = " ";
    }
    return commandOut;
};
/**
 * A String constant containing the value `glibc`.
 * @type {string}
 * @public
 */ const GLIBC = "glibc";
/**
 * A Regexp constant to get the GLIBC Version.
 * @type {string}
 */ const RE_GLIBC_VERSION = /GLIBC\s(\d+\.\d+)/;
/**
 * A String constant containing the value `musl`.
 * @type {string}
 * @public
 */ const MUSL = "musl";
/**
 * This string is used to find if the {@link LDD_PATH} is GLIBC
 * @type {string}
 */ const GLIBC_ON_LDD = GLIBC.toUpperCase();
/**
 * This string is used to find if the {@link LDD_PATH} is musl
 * @type {string}
 */ const MUSL_ON_LDD = MUSL.toLowerCase();
const isFileMusl = (f)=>f.includes("libc.musl-") || f.includes("ld-musl-");
const familyFromReport = ()=>{
    const report = getReport();
    if (report.header && report.header.glibcVersionRuntime) return GLIBC;
    if (Array.isArray(report.sharedObjects)) {
        if (report.sharedObjects.some(isFileMusl)) return MUSL;
    }
    return null;
};
const familyFromCommand = (out)=>{
    const [getconf, ldd1] = out.split(/[\r\n]+/);
    if (getconf && getconf.includes(GLIBC)) return GLIBC;
    if (ldd1 && ldd1.includes(MUSL)) return MUSL;
    return null;
};
const getFamilyFromLddContent = (content)=>{
    if (content.includes(MUSL_ON_LDD)) return MUSL;
    if (content.includes(GLIBC_ON_LDD)) return GLIBC;
    return null;
};
const familyFromFilesystem = async ()=>{
    if (cachedFamilyFilesystem !== undefined) return cachedFamilyFilesystem;
    cachedFamilyFilesystem = null;
    try {
        const lddContent = await readFile(LDD_PATH);
        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);
    } catch (e) {}
    return cachedFamilyFilesystem;
};
const familyFromFilesystemSync = ()=>{
    if (cachedFamilyFilesystem !== undefined) return cachedFamilyFilesystem;
    cachedFamilyFilesystem = null;
    try {
        const lddContent = readFileSync(LDD_PATH);
        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);
    } catch (e) {}
    return cachedFamilyFilesystem;
};
/**
 * Resolves with the libc family when it can be determined, `null` otherwise.
 * @returns {Promise<?string>}
 */ const family = async ()=>{
    let family = null;
    if (isLinux()) {
        family = await familyFromFilesystem();
        if (!family) family = familyFromReport();
        if (!family) {
            const out = await safeCommand();
            family = familyFromCommand(out);
        }
    }
    return family;
};
/**
 * Returns the libc family when it can be determined, `null` otherwise.
 * @returns {?string}
 */ const familySync = ()=>{
    let family = null;
    if (isLinux()) {
        family = familyFromFilesystemSync();
        if (!family) family = familyFromReport();
        if (!family) {
            const out = safeCommandSync();
            family = familyFromCommand(out);
        }
    }
    return family;
};
/**
 * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.
 * @returns {Promise<boolean>}
 */ const isNonGlibcLinux = async ()=>isLinux() && await family() !== GLIBC;
/**
 * Returns `true` only when the platform is Linux and the libc family is not `glibc`.
 * @returns {boolean}
 */ const isNonGlibcLinuxSync = ()=>isLinux() && familySync() !== GLIBC;
const versionFromFilesystem = async ()=>{
    if (cachedVersionFilesystem !== undefined) return cachedVersionFilesystem;
    cachedVersionFilesystem = null;
    try {
        const lddContent = await readFile(LDD_PATH);
        const versionMatch = lddContent.match(RE_GLIBC_VERSION);
        if (versionMatch) cachedVersionFilesystem = versionMatch[1];
    } catch (e) {}
    return cachedVersionFilesystem;
};
const versionFromFilesystemSync = ()=>{
    if (cachedVersionFilesystem !== undefined) return cachedVersionFilesystem;
    cachedVersionFilesystem = null;
    try {
        const lddContent = readFileSync(LDD_PATH);
        const versionMatch = lddContent.match(RE_GLIBC_VERSION);
        if (versionMatch) cachedVersionFilesystem = versionMatch[1];
    } catch (e) {}
    return cachedVersionFilesystem;
};
const versionFromReport = ()=>{
    const report = getReport();
    if (report.header && report.header.glibcVersionRuntime) return report.header.glibcVersionRuntime;
    return null;
};
const versionSuffix = (s)=>s.trim().split(/\s+/)[1];
const versionFromCommand = (out)=>{
    const [getconf, ldd1, ldd2] = out.split(/[\r\n]+/);
    if (getconf && getconf.includes(GLIBC)) return versionSuffix(getconf);
    if (ldd1 && ldd2 && ldd1.includes(MUSL)) return versionSuffix(ldd2);
    return null;
};
/**
 * Resolves with the libc version when it can be determined, `null` otherwise.
 * @returns {Promise<?string>}
 */ const version = async ()=>{
    let version = null;
    if (isLinux()) {
        version = await versionFromFilesystem();
        if (!version) version = versionFromReport();
        if (!version) {
            const out = await safeCommand();
            version = versionFromCommand(out);
        }
    }
    return version;
};
/**
 * Returns the libc version when it can be determined, `null` otherwise.
 * @returns {?string}
 */ const versionSync = ()=>{
    let version = null;
    if (isLinux()) {
        version = versionFromFilesystemSync();
        if (!version) version = versionFromReport();
        if (!version) {
            const out = safeCommandSync();
            version = versionFromCommand(out);
        }
    }
    return version;
};
module.exports = {
    GLIBC,
    MUSL,
    family,
    familySync,
    isNonGlibcLinux,
    isNonGlibcLinuxSync,
    version,
    versionSync
};

},{"365b551e7c831c0c":"4oI9L","a374c8e3c80ef4e6":"jyu6J","630aeb4478b2ca86":"knckT"}],"jyu6J":[function(require,module,exports) {
// Copyright 2017 Lovell Fuller and others.
// SPDX-License-Identifier: Apache-2.0
var process = require("ecea3960781e2c81");
"use strict";
const isLinux = ()=>process.platform === "linux";
let report = null;
const getReport = ()=>{
    if (!report) /* istanbul ignore next */ report = isLinux() && process.report ? process.report.getReport() : {};
    return report;
};
module.exports = {
    isLinux,
    getReport
};

},{"ecea3960781e2c81":"kKEHw"}],"knckT":[function(require,module,exports) {
// Copyright 2017 Lovell Fuller and others.
// SPDX-License-Identifier: Apache-2.0
"use strict";
const fs = require("dca349af26e6d855");
/**
 * The path where we can find the ldd
 */ const LDD_PATH = "/usr/bin/ldd";
/**
 * Read the content of a file synchronous
 *
 * @param {string} path
 * @returns {string}
 */ const readFileSync = (path)=>fs.readFileSync(path, "utf-8");
/**
 * Read the content of a file
 *
 * @param {string} path
 * @returns {Promise<string>}
 */ const readFile = (path)=>new Promise((resolve, reject)=>{
        fs.readFile(path, "utf-8", (err, data)=>{
            if (err) reject(err);
            else resolve(data);
        });
    });
module.exports = {
    LDD_PATH,
    readFileSync,
    readFile
};

},{"dca349af26e6d855":"4oI9L"}],"8L4YL":[function(require,module,exports) {
module.exports = JSON.parse('{"0.1.14":{"node_abi":null,"v8":"1.3"},"0.1.15":{"node_abi":null,"v8":"1.3"},"0.1.16":{"node_abi":null,"v8":"1.3"},"0.1.17":{"node_abi":null,"v8":"1.3"},"0.1.18":{"node_abi":null,"v8":"1.3"},"0.1.19":{"node_abi":null,"v8":"2.0"},"0.1.20":{"node_abi":null,"v8":"2.0"},"0.1.21":{"node_abi":null,"v8":"2.0"},"0.1.22":{"node_abi":null,"v8":"2.0"},"0.1.23":{"node_abi":null,"v8":"2.0"},"0.1.24":{"node_abi":null,"v8":"2.0"},"0.1.25":{"node_abi":null,"v8":"2.0"},"0.1.26":{"node_abi":null,"v8":"2.0"},"0.1.27":{"node_abi":null,"v8":"2.1"},"0.1.28":{"node_abi":null,"v8":"2.1"},"0.1.29":{"node_abi":null,"v8":"2.1"},"0.1.30":{"node_abi":null,"v8":"2.1"},"0.1.31":{"node_abi":null,"v8":"2.1"},"0.1.32":{"node_abi":null,"v8":"2.1"},"0.1.33":{"node_abi":null,"v8":"2.1"},"0.1.90":{"node_abi":null,"v8":"2.2"},"0.1.91":{"node_abi":null,"v8":"2.2"},"0.1.92":{"node_abi":null,"v8":"2.2"},"0.1.93":{"node_abi":null,"v8":"2.2"},"0.1.94":{"node_abi":null,"v8":"2.2"},"0.1.95":{"node_abi":null,"v8":"2.2"},"0.1.96":{"node_abi":null,"v8":"2.2"},"0.1.97":{"node_abi":null,"v8":"2.2"},"0.1.98":{"node_abi":null,"v8":"2.2"},"0.1.99":{"node_abi":null,"v8":"2.2"},"0.1.100":{"node_abi":null,"v8":"2.2"},"0.1.101":{"node_abi":null,"v8":"2.3"},"0.1.102":{"node_abi":null,"v8":"2.3"},"0.1.103":{"node_abi":null,"v8":"2.3"},"0.1.104":{"node_abi":null,"v8":"2.3"},"0.2.0":{"node_abi":1,"v8":"2.3"},"0.2.1":{"node_abi":1,"v8":"2.3"},"0.2.2":{"node_abi":1,"v8":"2.3"},"0.2.3":{"node_abi":1,"v8":"2.3"},"0.2.4":{"node_abi":1,"v8":"2.3"},"0.2.5":{"node_abi":1,"v8":"2.3"},"0.2.6":{"node_abi":1,"v8":"2.3"},"0.3.0":{"node_abi":1,"v8":"2.5"},"0.3.1":{"node_abi":1,"v8":"2.5"},"0.3.2":{"node_abi":1,"v8":"3.0"},"0.3.3":{"node_abi":1,"v8":"3.0"},"0.3.4":{"node_abi":1,"v8":"3.0"},"0.3.5":{"node_abi":1,"v8":"3.0"},"0.3.6":{"node_abi":1,"v8":"3.0"},"0.3.7":{"node_abi":1,"v8":"3.0"},"0.3.8":{"node_abi":1,"v8":"3.1"},"0.4.0":{"node_abi":1,"v8":"3.1"},"0.4.1":{"node_abi":1,"v8":"3.1"},"0.4.2":{"node_abi":1,"v8":"3.1"},"0.4.3":{"node_abi":1,"v8":"3.1"},"0.4.4":{"node_abi":1,"v8":"3.1"},"0.4.5":{"node_abi":1,"v8":"3.1"},"0.4.6":{"node_abi":1,"v8":"3.1"},"0.4.7":{"node_abi":1,"v8":"3.1"},"0.4.8":{"node_abi":1,"v8":"3.1"},"0.4.9":{"node_abi":1,"v8":"3.1"},"0.4.10":{"node_abi":1,"v8":"3.1"},"0.4.11":{"node_abi":1,"v8":"3.1"},"0.4.12":{"node_abi":1,"v8":"3.1"},"0.5.0":{"node_abi":1,"v8":"3.1"},"0.5.1":{"node_abi":1,"v8":"3.4"},"0.5.2":{"node_abi":1,"v8":"3.4"},"0.5.3":{"node_abi":1,"v8":"3.4"},"0.5.4":{"node_abi":1,"v8":"3.5"},"0.5.5":{"node_abi":1,"v8":"3.5"},"0.5.6":{"node_abi":1,"v8":"3.6"},"0.5.7":{"node_abi":1,"v8":"3.6"},"0.5.8":{"node_abi":1,"v8":"3.6"},"0.5.9":{"node_abi":1,"v8":"3.6"},"0.5.10":{"node_abi":1,"v8":"3.7"},"0.6.0":{"node_abi":1,"v8":"3.6"},"0.6.1":{"node_abi":1,"v8":"3.6"},"0.6.2":{"node_abi":1,"v8":"3.6"},"0.6.3":{"node_abi":1,"v8":"3.6"},"0.6.4":{"node_abi":1,"v8":"3.6"},"0.6.5":{"node_abi":1,"v8":"3.6"},"0.6.6":{"node_abi":1,"v8":"3.6"},"0.6.7":{"node_abi":1,"v8":"3.6"},"0.6.8":{"node_abi":1,"v8":"3.6"},"0.6.9":{"node_abi":1,"v8":"3.6"},"0.6.10":{"node_abi":1,"v8":"3.6"},"0.6.11":{"node_abi":1,"v8":"3.6"},"0.6.12":{"node_abi":1,"v8":"3.6"},"0.6.13":{"node_abi":1,"v8":"3.6"},"0.6.14":{"node_abi":1,"v8":"3.6"},"0.6.15":{"node_abi":1,"v8":"3.6"},"0.6.16":{"node_abi":1,"v8":"3.6"},"0.6.17":{"node_abi":1,"v8":"3.6"},"0.6.18":{"node_abi":1,"v8":"3.6"},"0.6.19":{"node_abi":1,"v8":"3.6"},"0.6.20":{"node_abi":1,"v8":"3.6"},"0.6.21":{"node_abi":1,"v8":"3.6"},"0.7.0":{"node_abi":1,"v8":"3.8"},"0.7.1":{"node_abi":1,"v8":"3.8"},"0.7.2":{"node_abi":1,"v8":"3.8"},"0.7.3":{"node_abi":1,"v8":"3.9"},"0.7.4":{"node_abi":1,"v8":"3.9"},"0.7.5":{"node_abi":1,"v8":"3.9"},"0.7.6":{"node_abi":1,"v8":"3.9"},"0.7.7":{"node_abi":1,"v8":"3.9"},"0.7.8":{"node_abi":1,"v8":"3.9"},"0.7.9":{"node_abi":1,"v8":"3.11"},"0.7.10":{"node_abi":1,"v8":"3.9"},"0.7.11":{"node_abi":1,"v8":"3.11"},"0.7.12":{"node_abi":1,"v8":"3.11"},"0.8.0":{"node_abi":1,"v8":"3.11"},"0.8.1":{"node_abi":1,"v8":"3.11"},"0.8.2":{"node_abi":1,"v8":"3.11"},"0.8.3":{"node_abi":1,"v8":"3.11"},"0.8.4":{"node_abi":1,"v8":"3.11"},"0.8.5":{"node_abi":1,"v8":"3.11"},"0.8.6":{"node_abi":1,"v8":"3.11"},"0.8.7":{"node_abi":1,"v8":"3.11"},"0.8.8":{"node_abi":1,"v8":"3.11"},"0.8.9":{"node_abi":1,"v8":"3.11"},"0.8.10":{"node_abi":1,"v8":"3.11"},"0.8.11":{"node_abi":1,"v8":"3.11"},"0.8.12":{"node_abi":1,"v8":"3.11"},"0.8.13":{"node_abi":1,"v8":"3.11"},"0.8.14":{"node_abi":1,"v8":"3.11"},"0.8.15":{"node_abi":1,"v8":"3.11"},"0.8.16":{"node_abi":1,"v8":"3.11"},"0.8.17":{"node_abi":1,"v8":"3.11"},"0.8.18":{"node_abi":1,"v8":"3.11"},"0.8.19":{"node_abi":1,"v8":"3.11"},"0.8.20":{"node_abi":1,"v8":"3.11"},"0.8.21":{"node_abi":1,"v8":"3.11"},"0.8.22":{"node_abi":1,"v8":"3.11"},"0.8.23":{"node_abi":1,"v8":"3.11"},"0.8.24":{"node_abi":1,"v8":"3.11"},"0.8.25":{"node_abi":1,"v8":"3.11"},"0.8.26":{"node_abi":1,"v8":"3.11"},"0.8.27":{"node_abi":1,"v8":"3.11"},"0.8.28":{"node_abi":1,"v8":"3.11"},"0.9.0":{"node_abi":1,"v8":"3.11"},"0.9.1":{"node_abi":10,"v8":"3.11"},"0.9.2":{"node_abi":10,"v8":"3.11"},"0.9.3":{"node_abi":10,"v8":"3.13"},"0.9.4":{"node_abi":10,"v8":"3.13"},"0.9.5":{"node_abi":10,"v8":"3.13"},"0.9.6":{"node_abi":10,"v8":"3.15"},"0.9.7":{"node_abi":10,"v8":"3.15"},"0.9.8":{"node_abi":10,"v8":"3.15"},"0.9.9":{"node_abi":11,"v8":"3.15"},"0.9.10":{"node_abi":11,"v8":"3.15"},"0.9.11":{"node_abi":11,"v8":"3.14"},"0.9.12":{"node_abi":11,"v8":"3.14"},"0.10.0":{"node_abi":11,"v8":"3.14"},"0.10.1":{"node_abi":11,"v8":"3.14"},"0.10.2":{"node_abi":11,"v8":"3.14"},"0.10.3":{"node_abi":11,"v8":"3.14"},"0.10.4":{"node_abi":11,"v8":"3.14"},"0.10.5":{"node_abi":11,"v8":"3.14"},"0.10.6":{"node_abi":11,"v8":"3.14"},"0.10.7":{"node_abi":11,"v8":"3.14"},"0.10.8":{"node_abi":11,"v8":"3.14"},"0.10.9":{"node_abi":11,"v8":"3.14"},"0.10.10":{"node_abi":11,"v8":"3.14"},"0.10.11":{"node_abi":11,"v8":"3.14"},"0.10.12":{"node_abi":11,"v8":"3.14"},"0.10.13":{"node_abi":11,"v8":"3.14"},"0.10.14":{"node_abi":11,"v8":"3.14"},"0.10.15":{"node_abi":11,"v8":"3.14"},"0.10.16":{"node_abi":11,"v8":"3.14"},"0.10.17":{"node_abi":11,"v8":"3.14"},"0.10.18":{"node_abi":11,"v8":"3.14"},"0.10.19":{"node_abi":11,"v8":"3.14"},"0.10.20":{"node_abi":11,"v8":"3.14"},"0.10.21":{"node_abi":11,"v8":"3.14"},"0.10.22":{"node_abi":11,"v8":"3.14"},"0.10.23":{"node_abi":11,"v8":"3.14"},"0.10.24":{"node_abi":11,"v8":"3.14"},"0.10.25":{"node_abi":11,"v8":"3.14"},"0.10.26":{"node_abi":11,"v8":"3.14"},"0.10.27":{"node_abi":11,"v8":"3.14"},"0.10.28":{"node_abi":11,"v8":"3.14"},"0.10.29":{"node_abi":11,"v8":"3.14"},"0.10.30":{"node_abi":11,"v8":"3.14"},"0.10.31":{"node_abi":11,"v8":"3.14"},"0.10.32":{"node_abi":11,"v8":"3.14"},"0.10.33":{"node_abi":11,"v8":"3.14"},"0.10.34":{"node_abi":11,"v8":"3.14"},"0.10.35":{"node_abi":11,"v8":"3.14"},"0.10.36":{"node_abi":11,"v8":"3.14"},"0.10.37":{"node_abi":11,"v8":"3.14"},"0.10.38":{"node_abi":11,"v8":"3.14"},"0.10.39":{"node_abi":11,"v8":"3.14"},"0.10.40":{"node_abi":11,"v8":"3.14"},"0.10.41":{"node_abi":11,"v8":"3.14"},"0.10.42":{"node_abi":11,"v8":"3.14"},"0.10.43":{"node_abi":11,"v8":"3.14"},"0.10.44":{"node_abi":11,"v8":"3.14"},"0.10.45":{"node_abi":11,"v8":"3.14"},"0.10.46":{"node_abi":11,"v8":"3.14"},"0.10.47":{"node_abi":11,"v8":"3.14"},"0.10.48":{"node_abi":11,"v8":"3.14"},"0.11.0":{"node_abi":12,"v8":"3.17"},"0.11.1":{"node_abi":12,"v8":"3.18"},"0.11.2":{"node_abi":12,"v8":"3.19"},"0.11.3":{"node_abi":12,"v8":"3.19"},"0.11.4":{"node_abi":12,"v8":"3.20"},"0.11.5":{"node_abi":12,"v8":"3.20"},"0.11.6":{"node_abi":12,"v8":"3.20"},"0.11.7":{"node_abi":12,"v8":"3.20"},"0.11.8":{"node_abi":13,"v8":"3.21"},"0.11.9":{"node_abi":13,"v8":"3.22"},"0.11.10":{"node_abi":13,"v8":"3.22"},"0.11.11":{"node_abi":14,"v8":"3.22"},"0.11.12":{"node_abi":14,"v8":"3.22"},"0.11.13":{"node_abi":14,"v8":"3.25"},"0.11.14":{"node_abi":14,"v8":"3.26"},"0.11.15":{"node_abi":14,"v8":"3.28"},"0.11.16":{"node_abi":14,"v8":"3.28"},"0.12.0":{"node_abi":14,"v8":"3.28"},"0.12.1":{"node_abi":14,"v8":"3.28"},"0.12.2":{"node_abi":14,"v8":"3.28"},"0.12.3":{"node_abi":14,"v8":"3.28"},"0.12.4":{"node_abi":14,"v8":"3.28"},"0.12.5":{"node_abi":14,"v8":"3.28"},"0.12.6":{"node_abi":14,"v8":"3.28"},"0.12.7":{"node_abi":14,"v8":"3.28"},"0.12.8":{"node_abi":14,"v8":"3.28"},"0.12.9":{"node_abi":14,"v8":"3.28"},"0.12.10":{"node_abi":14,"v8":"3.28"},"0.12.11":{"node_abi":14,"v8":"3.28"},"0.12.12":{"node_abi":14,"v8":"3.28"},"0.12.13":{"node_abi":14,"v8":"3.28"},"0.12.14":{"node_abi":14,"v8":"3.28"},"0.12.15":{"node_abi":14,"v8":"3.28"},"0.12.16":{"node_abi":14,"v8":"3.28"},"0.12.17":{"node_abi":14,"v8":"3.28"},"0.12.18":{"node_abi":14,"v8":"3.28"},"1.0.0":{"node_abi":42,"v8":"3.31"},"1.0.1":{"node_abi":42,"v8":"3.31"},"1.0.2":{"node_abi":42,"v8":"3.31"},"1.0.3":{"node_abi":42,"v8":"4.1"},"1.0.4":{"node_abi":42,"v8":"4.1"},"1.1.0":{"node_abi":43,"v8":"4.1"},"1.2.0":{"node_abi":43,"v8":"4.1"},"1.3.0":{"node_abi":43,"v8":"4.1"},"1.4.1":{"node_abi":43,"v8":"4.1"},"1.4.2":{"node_abi":43,"v8":"4.1"},"1.4.3":{"node_abi":43,"v8":"4.1"},"1.5.0":{"node_abi":43,"v8":"4.1"},"1.5.1":{"node_abi":43,"v8":"4.1"},"1.6.0":{"node_abi":43,"v8":"4.1"},"1.6.1":{"node_abi":43,"v8":"4.1"},"1.6.2":{"node_abi":43,"v8":"4.1"},"1.6.3":{"node_abi":43,"v8":"4.1"},"1.6.4":{"node_abi":43,"v8":"4.1"},"1.7.1":{"node_abi":43,"v8":"4.1"},"1.8.1":{"node_abi":43,"v8":"4.1"},"1.8.2":{"node_abi":43,"v8":"4.1"},"1.8.3":{"node_abi":43,"v8":"4.1"},"1.8.4":{"node_abi":43,"v8":"4.1"},"2.0.0":{"node_abi":44,"v8":"4.2"},"2.0.1":{"node_abi":44,"v8":"4.2"},"2.0.2":{"node_abi":44,"v8":"4.2"},"2.1.0":{"node_abi":44,"v8":"4.2"},"2.2.0":{"node_abi":44,"v8":"4.2"},"2.2.1":{"node_abi":44,"v8":"4.2"},"2.3.0":{"node_abi":44,"v8":"4.2"},"2.3.1":{"node_abi":44,"v8":"4.2"},"2.3.2":{"node_abi":44,"v8":"4.2"},"2.3.3":{"node_abi":44,"v8":"4.2"},"2.3.4":{"node_abi":44,"v8":"4.2"},"2.4.0":{"node_abi":44,"v8":"4.2"},"2.5.0":{"node_abi":44,"v8":"4.2"},"3.0.0":{"node_abi":45,"v8":"4.4"},"3.1.0":{"node_abi":45,"v8":"4.4"},"3.2.0":{"node_abi":45,"v8":"4.4"},"3.3.0":{"node_abi":45,"v8":"4.4"},"3.3.1":{"node_abi":45,"v8":"4.4"},"4.0.0":{"node_abi":46,"v8":"4.5"},"4.1.0":{"node_abi":46,"v8":"4.5"},"4.1.1":{"node_abi":46,"v8":"4.5"},"4.1.2":{"node_abi":46,"v8":"4.5"},"4.2.0":{"node_abi":46,"v8":"4.5"},"4.2.1":{"node_abi":46,"v8":"4.5"},"4.2.2":{"node_abi":46,"v8":"4.5"},"4.2.3":{"node_abi":46,"v8":"4.5"},"4.2.4":{"node_abi":46,"v8":"4.5"},"4.2.5":{"node_abi":46,"v8":"4.5"},"4.2.6":{"node_abi":46,"v8":"4.5"},"4.3.0":{"node_abi":46,"v8":"4.5"},"4.3.1":{"node_abi":46,"v8":"4.5"},"4.3.2":{"node_abi":46,"v8":"4.5"},"4.4.0":{"node_abi":46,"v8":"4.5"},"4.4.1":{"node_abi":46,"v8":"4.5"},"4.4.2":{"node_abi":46,"v8":"4.5"},"4.4.3":{"node_abi":46,"v8":"4.5"},"4.4.4":{"node_abi":46,"v8":"4.5"},"4.4.5":{"node_abi":46,"v8":"4.5"},"4.4.6":{"node_abi":46,"v8":"4.5"},"4.4.7":{"node_abi":46,"v8":"4.5"},"4.5.0":{"node_abi":46,"v8":"4.5"},"4.6.0":{"node_abi":46,"v8":"4.5"},"4.6.1":{"node_abi":46,"v8":"4.5"},"4.6.2":{"node_abi":46,"v8":"4.5"},"4.7.0":{"node_abi":46,"v8":"4.5"},"4.7.1":{"node_abi":46,"v8":"4.5"},"4.7.2":{"node_abi":46,"v8":"4.5"},"4.7.3":{"node_abi":46,"v8":"4.5"},"4.8.0":{"node_abi":46,"v8":"4.5"},"4.8.1":{"node_abi":46,"v8":"4.5"},"4.8.2":{"node_abi":46,"v8":"4.5"},"4.8.3":{"node_abi":46,"v8":"4.5"},"4.8.4":{"node_abi":46,"v8":"4.5"},"4.8.5":{"node_abi":46,"v8":"4.5"},"4.8.6":{"node_abi":46,"v8":"4.5"},"4.8.7":{"node_abi":46,"v8":"4.5"},"4.9.0":{"node_abi":46,"v8":"4.5"},"4.9.1":{"node_abi":46,"v8":"4.5"},"5.0.0":{"node_abi":47,"v8":"4.6"},"5.1.0":{"node_abi":47,"v8":"4.6"},"5.1.1":{"node_abi":47,"v8":"4.6"},"5.2.0":{"node_abi":47,"v8":"4.6"},"5.3.0":{"node_abi":47,"v8":"4.6"},"5.4.0":{"node_abi":47,"v8":"4.6"},"5.4.1":{"node_abi":47,"v8":"4.6"},"5.5.0":{"node_abi":47,"v8":"4.6"},"5.6.0":{"node_abi":47,"v8":"4.6"},"5.7.0":{"node_abi":47,"v8":"4.6"},"5.7.1":{"node_abi":47,"v8":"4.6"},"5.8.0":{"node_abi":47,"v8":"4.6"},"5.9.0":{"node_abi":47,"v8":"4.6"},"5.9.1":{"node_abi":47,"v8":"4.6"},"5.10.0":{"node_abi":47,"v8":"4.6"},"5.10.1":{"node_abi":47,"v8":"4.6"},"5.11.0":{"node_abi":47,"v8":"4.6"},"5.11.1":{"node_abi":47,"v8":"4.6"},"5.12.0":{"node_abi":47,"v8":"4.6"},"6.0.0":{"node_abi":48,"v8":"5.0"},"6.1.0":{"node_abi":48,"v8":"5.0"},"6.2.0":{"node_abi":48,"v8":"5.0"},"6.2.1":{"node_abi":48,"v8":"5.0"},"6.2.2":{"node_abi":48,"v8":"5.0"},"6.3.0":{"node_abi":48,"v8":"5.0"},"6.3.1":{"node_abi":48,"v8":"5.0"},"6.4.0":{"node_abi":48,"v8":"5.0"},"6.5.0":{"node_abi":48,"v8":"5.1"},"6.6.0":{"node_abi":48,"v8":"5.1"},"6.7.0":{"node_abi":48,"v8":"5.1"},"6.8.0":{"node_abi":48,"v8":"5.1"},"6.8.1":{"node_abi":48,"v8":"5.1"},"6.9.0":{"node_abi":48,"v8":"5.1"},"6.9.1":{"node_abi":48,"v8":"5.1"},"6.9.2":{"node_abi":48,"v8":"5.1"},"6.9.3":{"node_abi":48,"v8":"5.1"},"6.9.4":{"node_abi":48,"v8":"5.1"},"6.9.5":{"node_abi":48,"v8":"5.1"},"6.10.0":{"node_abi":48,"v8":"5.1"},"6.10.1":{"node_abi":48,"v8":"5.1"},"6.10.2":{"node_abi":48,"v8":"5.1"},"6.10.3":{"node_abi":48,"v8":"5.1"},"6.11.0":{"node_abi":48,"v8":"5.1"},"6.11.1":{"node_abi":48,"v8":"5.1"},"6.11.2":{"node_abi":48,"v8":"5.1"},"6.11.3":{"node_abi":48,"v8":"5.1"},"6.11.4":{"node_abi":48,"v8":"5.1"},"6.11.5":{"node_abi":48,"v8":"5.1"},"6.12.0":{"node_abi":48,"v8":"5.1"},"6.12.1":{"node_abi":48,"v8":"5.1"},"6.12.2":{"node_abi":48,"v8":"5.1"},"6.12.3":{"node_abi":48,"v8":"5.1"},"6.13.0":{"node_abi":48,"v8":"5.1"},"6.13.1":{"node_abi":48,"v8":"5.1"},"6.14.0":{"node_abi":48,"v8":"5.1"},"6.14.1":{"node_abi":48,"v8":"5.1"},"6.14.2":{"node_abi":48,"v8":"5.1"},"6.14.3":{"node_abi":48,"v8":"5.1"},"6.14.4":{"node_abi":48,"v8":"5.1"},"6.15.0":{"node_abi":48,"v8":"5.1"},"6.15.1":{"node_abi":48,"v8":"5.1"},"6.16.0":{"node_abi":48,"v8":"5.1"},"6.17.0":{"node_abi":48,"v8":"5.1"},"6.17.1":{"node_abi":48,"v8":"5.1"},"7.0.0":{"node_abi":51,"v8":"5.4"},"7.1.0":{"node_abi":51,"v8":"5.4"},"7.2.0":{"node_abi":51,"v8":"5.4"},"7.2.1":{"node_abi":51,"v8":"5.4"},"7.3.0":{"node_abi":51,"v8":"5.4"},"7.4.0":{"node_abi":51,"v8":"5.4"},"7.5.0":{"node_abi":51,"v8":"5.4"},"7.6.0":{"node_abi":51,"v8":"5.5"},"7.7.0":{"node_abi":51,"v8":"5.5"},"7.7.1":{"node_abi":51,"v8":"5.5"},"7.7.2":{"node_abi":51,"v8":"5.5"},"7.7.3":{"node_abi":51,"v8":"5.5"},"7.7.4":{"node_abi":51,"v8":"5.5"},"7.8.0":{"node_abi":51,"v8":"5.5"},"7.9.0":{"node_abi":51,"v8":"5.5"},"7.10.0":{"node_abi":51,"v8":"5.5"},"7.10.1":{"node_abi":51,"v8":"5.5"},"8.0.0":{"node_abi":57,"v8":"5.8"},"8.1.0":{"node_abi":57,"v8":"5.8"},"8.1.1":{"node_abi":57,"v8":"5.8"},"8.1.2":{"node_abi":57,"v8":"5.8"},"8.1.3":{"node_abi":57,"v8":"5.8"},"8.1.4":{"node_abi":57,"v8":"5.8"},"8.2.0":{"node_abi":57,"v8":"5.8"},"8.2.1":{"node_abi":57,"v8":"5.8"},"8.3.0":{"node_abi":57,"v8":"6.0"},"8.4.0":{"node_abi":57,"v8":"6.0"},"8.5.0":{"node_abi":57,"v8":"6.0"},"8.6.0":{"node_abi":57,"v8":"6.0"},"8.7.0":{"node_abi":57,"v8":"6.1"},"8.8.0":{"node_abi":57,"v8":"6.1"},"8.8.1":{"node_abi":57,"v8":"6.1"},"8.9.0":{"node_abi":57,"v8":"6.1"},"8.9.1":{"node_abi":57,"v8":"6.1"},"8.9.2":{"node_abi":57,"v8":"6.1"},"8.9.3":{"node_abi":57,"v8":"6.1"},"8.9.4":{"node_abi":57,"v8":"6.1"},"8.10.0":{"node_abi":57,"v8":"6.2"},"8.11.0":{"node_abi":57,"v8":"6.2"},"8.11.1":{"node_abi":57,"v8":"6.2"},"8.11.2":{"node_abi":57,"v8":"6.2"},"8.11.3":{"node_abi":57,"v8":"6.2"},"8.11.4":{"node_abi":57,"v8":"6.2"},"8.12.0":{"node_abi":57,"v8":"6.2"},"8.13.0":{"node_abi":57,"v8":"6.2"},"8.14.0":{"node_abi":57,"v8":"6.2"},"8.14.1":{"node_abi":57,"v8":"6.2"},"8.15.0":{"node_abi":57,"v8":"6.2"},"8.15.1":{"node_abi":57,"v8":"6.2"},"8.16.0":{"node_abi":57,"v8":"6.2"},"8.16.1":{"node_abi":57,"v8":"6.2"},"8.16.2":{"node_abi":57,"v8":"6.2"},"8.17.0":{"node_abi":57,"v8":"6.2"},"9.0.0":{"node_abi":59,"v8":"6.2"},"9.1.0":{"node_abi":59,"v8":"6.2"},"9.2.0":{"node_abi":59,"v8":"6.2"},"9.2.1":{"node_abi":59,"v8":"6.2"},"9.3.0":{"node_abi":59,"v8":"6.2"},"9.4.0":{"node_abi":59,"v8":"6.2"},"9.5.0":{"node_abi":59,"v8":"6.2"},"9.6.0":{"node_abi":59,"v8":"6.2"},"9.6.1":{"node_abi":59,"v8":"6.2"},"9.7.0":{"node_abi":59,"v8":"6.2"},"9.7.1":{"node_abi":59,"v8":"6.2"},"9.8.0":{"node_abi":59,"v8":"6.2"},"9.9.0":{"node_abi":59,"v8":"6.2"},"9.10.0":{"node_abi":59,"v8":"6.2"},"9.10.1":{"node_abi":59,"v8":"6.2"},"9.11.0":{"node_abi":59,"v8":"6.2"},"9.11.1":{"node_abi":59,"v8":"6.2"},"9.11.2":{"node_abi":59,"v8":"6.2"},"10.0.0":{"node_abi":64,"v8":"6.6"},"10.1.0":{"node_abi":64,"v8":"6.6"},"10.2.0":{"node_abi":64,"v8":"6.6"},"10.2.1":{"node_abi":64,"v8":"6.6"},"10.3.0":{"node_abi":64,"v8":"6.6"},"10.4.0":{"node_abi":64,"v8":"6.7"},"10.4.1":{"node_abi":64,"v8":"6.7"},"10.5.0":{"node_abi":64,"v8":"6.7"},"10.6.0":{"node_abi":64,"v8":"6.7"},"10.7.0":{"node_abi":64,"v8":"6.7"},"10.8.0":{"node_abi":64,"v8":"6.7"},"10.9.0":{"node_abi":64,"v8":"6.8"},"10.10.0":{"node_abi":64,"v8":"6.8"},"10.11.0":{"node_abi":64,"v8":"6.8"},"10.12.0":{"node_abi":64,"v8":"6.8"},"10.13.0":{"node_abi":64,"v8":"6.8"},"10.14.0":{"node_abi":64,"v8":"6.8"},"10.14.1":{"node_abi":64,"v8":"6.8"},"10.14.2":{"node_abi":64,"v8":"6.8"},"10.15.0":{"node_abi":64,"v8":"6.8"},"10.15.1":{"node_abi":64,"v8":"6.8"},"10.15.2":{"node_abi":64,"v8":"6.8"},"10.15.3":{"node_abi":64,"v8":"6.8"},"10.16.0":{"node_abi":64,"v8":"6.8"},"10.16.1":{"node_abi":64,"v8":"6.8"},"10.16.2":{"node_abi":64,"v8":"6.8"},"10.16.3":{"node_abi":64,"v8":"6.8"},"10.17.0":{"node_abi":64,"v8":"6.8"},"10.18.0":{"node_abi":64,"v8":"6.8"},"10.18.1":{"node_abi":64,"v8":"6.8"},"10.19.0":{"node_abi":64,"v8":"6.8"},"10.20.0":{"node_abi":64,"v8":"6.8"},"10.20.1":{"node_abi":64,"v8":"6.8"},"10.21.0":{"node_abi":64,"v8":"6.8"},"10.22.0":{"node_abi":64,"v8":"6.8"},"10.22.1":{"node_abi":64,"v8":"6.8"},"10.23.0":{"node_abi":64,"v8":"6.8"},"10.23.1":{"node_abi":64,"v8":"6.8"},"10.23.2":{"node_abi":64,"v8":"6.8"},"10.23.3":{"node_abi":64,"v8":"6.8"},"10.24.0":{"node_abi":64,"v8":"6.8"},"10.24.1":{"node_abi":64,"v8":"6.8"},"11.0.0":{"node_abi":67,"v8":"7.0"},"11.1.0":{"node_abi":67,"v8":"7.0"},"11.2.0":{"node_abi":67,"v8":"7.0"},"11.3.0":{"node_abi":67,"v8":"7.0"},"11.4.0":{"node_abi":67,"v8":"7.0"},"11.5.0":{"node_abi":67,"v8":"7.0"},"11.6.0":{"node_abi":67,"v8":"7.0"},"11.7.0":{"node_abi":67,"v8":"7.0"},"11.8.0":{"node_abi":67,"v8":"7.0"},"11.9.0":{"node_abi":67,"v8":"7.0"},"11.10.0":{"node_abi":67,"v8":"7.0"},"11.10.1":{"node_abi":67,"v8":"7.0"},"11.11.0":{"node_abi":67,"v8":"7.0"},"11.12.0":{"node_abi":67,"v8":"7.0"},"11.13.0":{"node_abi":67,"v8":"7.0"},"11.14.0":{"node_abi":67,"v8":"7.0"},"11.15.0":{"node_abi":67,"v8":"7.0"},"12.0.0":{"node_abi":72,"v8":"7.4"},"12.1.0":{"node_abi":72,"v8":"7.4"},"12.2.0":{"node_abi":72,"v8":"7.4"},"12.3.0":{"node_abi":72,"v8":"7.4"},"12.3.1":{"node_abi":72,"v8":"7.4"},"12.4.0":{"node_abi":72,"v8":"7.4"},"12.5.0":{"node_abi":72,"v8":"7.5"},"12.6.0":{"node_abi":72,"v8":"7.5"},"12.7.0":{"node_abi":72,"v8":"7.5"},"12.8.0":{"node_abi":72,"v8":"7.5"},"12.8.1":{"node_abi":72,"v8":"7.5"},"12.9.0":{"node_abi":72,"v8":"7.6"},"12.9.1":{"node_abi":72,"v8":"7.6"},"12.10.0":{"node_abi":72,"v8":"7.6"},"12.11.0":{"node_abi":72,"v8":"7.7"},"12.11.1":{"node_abi":72,"v8":"7.7"},"12.12.0":{"node_abi":72,"v8":"7.7"},"12.13.0":{"node_abi":72,"v8":"7.7"},"12.13.1":{"node_abi":72,"v8":"7.7"},"12.14.0":{"node_abi":72,"v8":"7.7"},"12.14.1":{"node_abi":72,"v8":"7.7"},"12.15.0":{"node_abi":72,"v8":"7.7"},"12.16.0":{"node_abi":72,"v8":"7.8"},"12.16.1":{"node_abi":72,"v8":"7.8"},"12.16.2":{"node_abi":72,"v8":"7.8"},"12.16.3":{"node_abi":72,"v8":"7.8"},"12.17.0":{"node_abi":72,"v8":"7.8"},"12.18.0":{"node_abi":72,"v8":"7.8"},"12.18.1":{"node_abi":72,"v8":"7.8"},"12.18.2":{"node_abi":72,"v8":"7.8"},"12.18.3":{"node_abi":72,"v8":"7.8"},"12.18.4":{"node_abi":72,"v8":"7.8"},"12.19.0":{"node_abi":72,"v8":"7.8"},"12.19.1":{"node_abi":72,"v8":"7.8"},"12.20.0":{"node_abi":72,"v8":"7.8"},"12.20.1":{"node_abi":72,"v8":"7.8"},"12.20.2":{"node_abi":72,"v8":"7.8"},"12.21.0":{"node_abi":72,"v8":"7.8"},"12.22.0":{"node_abi":72,"v8":"7.8"},"12.22.1":{"node_abi":72,"v8":"7.8"},"12.22.2":{"node_abi":72,"v8":"7.8"},"12.22.3":{"node_abi":72,"v8":"7.8"},"12.22.4":{"node_abi":72,"v8":"7.8"},"12.22.5":{"node_abi":72,"v8":"7.8"},"12.22.6":{"node_abi":72,"v8":"7.8"},"12.22.7":{"node_abi":72,"v8":"7.8"},"13.0.0":{"node_abi":79,"v8":"7.8"},"13.0.1":{"node_abi":79,"v8":"7.8"},"13.1.0":{"node_abi":79,"v8":"7.8"},"13.2.0":{"node_abi":79,"v8":"7.9"},"13.3.0":{"node_abi":79,"v8":"7.9"},"13.4.0":{"node_abi":79,"v8":"7.9"},"13.5.0":{"node_abi":79,"v8":"7.9"},"13.6.0":{"node_abi":79,"v8":"7.9"},"13.7.0":{"node_abi":79,"v8":"7.9"},"13.8.0":{"node_abi":79,"v8":"7.9"},"13.9.0":{"node_abi":79,"v8":"7.9"},"13.10.0":{"node_abi":79,"v8":"7.9"},"13.10.1":{"node_abi":79,"v8":"7.9"},"13.11.0":{"node_abi":79,"v8":"7.9"},"13.12.0":{"node_abi":79,"v8":"7.9"},"13.13.0":{"node_abi":79,"v8":"7.9"},"13.14.0":{"node_abi":79,"v8":"7.9"},"14.0.0":{"node_abi":83,"v8":"8.1"},"14.1.0":{"node_abi":83,"v8":"8.1"},"14.2.0":{"node_abi":83,"v8":"8.1"},"14.3.0":{"node_abi":83,"v8":"8.1"},"14.4.0":{"node_abi":83,"v8":"8.1"},"14.5.0":{"node_abi":83,"v8":"8.3"},"14.6.0":{"node_abi":83,"v8":"8.4"},"14.7.0":{"node_abi":83,"v8":"8.4"},"14.8.0":{"node_abi":83,"v8":"8.4"},"14.9.0":{"node_abi":83,"v8":"8.4"},"14.10.0":{"node_abi":83,"v8":"8.4"},"14.10.1":{"node_abi":83,"v8":"8.4"},"14.11.0":{"node_abi":83,"v8":"8.4"},"14.12.0":{"node_abi":83,"v8":"8.4"},"14.13.0":{"node_abi":83,"v8":"8.4"},"14.13.1":{"node_abi":83,"v8":"8.4"},"14.14.0":{"node_abi":83,"v8":"8.4"},"14.15.0":{"node_abi":83,"v8":"8.4"},"14.15.1":{"node_abi":83,"v8":"8.4"},"14.15.2":{"node_abi":83,"v8":"8.4"},"14.15.3":{"node_abi":83,"v8":"8.4"},"14.15.4":{"node_abi":83,"v8":"8.4"},"14.15.5":{"node_abi":83,"v8":"8.4"},"14.16.0":{"node_abi":83,"v8":"8.4"},"14.16.1":{"node_abi":83,"v8":"8.4"},"14.17.0":{"node_abi":83,"v8":"8.4"},"14.17.1":{"node_abi":83,"v8":"8.4"},"14.17.2":{"node_abi":83,"v8":"8.4"},"14.17.3":{"node_abi":83,"v8":"8.4"},"14.17.4":{"node_abi":83,"v8":"8.4"},"14.17.5":{"node_abi":83,"v8":"8.4"},"14.17.6":{"node_abi":83,"v8":"8.4"},"14.18.0":{"node_abi":83,"v8":"8.4"},"14.18.1":{"node_abi":83,"v8":"8.4"},"15.0.0":{"node_abi":88,"v8":"8.6"},"15.0.1":{"node_abi":88,"v8":"8.6"},"15.1.0":{"node_abi":88,"v8":"8.6"},"15.2.0":{"node_abi":88,"v8":"8.6"},"15.2.1":{"node_abi":88,"v8":"8.6"},"15.3.0":{"node_abi":88,"v8":"8.6"},"15.4.0":{"node_abi":88,"v8":"8.6"},"15.5.0":{"node_abi":88,"v8":"8.6"},"15.5.1":{"node_abi":88,"v8":"8.6"},"15.6.0":{"node_abi":88,"v8":"8.6"},"15.7.0":{"node_abi":88,"v8":"8.6"},"15.8.0":{"node_abi":88,"v8":"8.6"},"15.9.0":{"node_abi":88,"v8":"8.6"},"15.10.0":{"node_abi":88,"v8":"8.6"},"15.11.0":{"node_abi":88,"v8":"8.6"},"15.12.0":{"node_abi":88,"v8":"8.6"},"15.13.0":{"node_abi":88,"v8":"8.6"},"15.14.0":{"node_abi":88,"v8":"8.6"},"16.0.0":{"node_abi":93,"v8":"9.0"},"16.1.0":{"node_abi":93,"v8":"9.0"},"16.2.0":{"node_abi":93,"v8":"9.0"},"16.3.0":{"node_abi":93,"v8":"9.0"},"16.4.0":{"node_abi":93,"v8":"9.1"},"16.4.1":{"node_abi":93,"v8":"9.1"},"16.4.2":{"node_abi":93,"v8":"9.1"},"16.5.0":{"node_abi":93,"v8":"9.1"},"16.6.0":{"node_abi":93,"v8":"9.2"},"16.6.1":{"node_abi":93,"v8":"9.2"},"16.6.2":{"node_abi":93,"v8":"9.2"},"16.7.0":{"node_abi":93,"v8":"9.2"},"16.8.0":{"node_abi":93,"v8":"9.2"},"16.9.0":{"node_abi":93,"v8":"9.3"},"16.9.1":{"node_abi":93,"v8":"9.3"},"16.10.0":{"node_abi":93,"v8":"9.3"},"16.11.0":{"node_abi":93,"v8":"9.4"},"16.11.1":{"node_abi":93,"v8":"9.4"},"16.12.0":{"node_abi":93,"v8":"9.4"},"16.13.0":{"node_abi":93,"v8":"9.4"},"17.0.0":{"node_abi":102,"v8":"9.5"},"17.0.1":{"node_abi":102,"v8":"9.5"},"17.1.0":{"node_abi":102,"v8":"9.5"}}');

},{}],"1EQtr":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@mapbox/node-pre-gyp","description":"Node.js native addon binary install tool","version":"1.0.9","keywords":["native","addon","module","c","c++","bindings","binary"],"license":"BSD-3-Clause","author":"Dane Springmeyer <dane@mapbox.com>","repository":{"type":"git","url":"git://github.com/mapbox/node-pre-gyp.git"},"bin":"./bin/node-pre-gyp","main":"./lib/node-pre-gyp.js","dependencies":{"detect-libc":"^2.0.0","https-proxy-agent":"^5.0.0","make-dir":"^3.1.0","node-fetch":"^2.6.7","nopt":"^5.0.0","npmlog":"^5.0.1","rimraf":"^3.0.2","semver":"^7.3.5","tar":"^6.1.11"},"devDependencies":{"@mapbox/cloudfriend":"^5.1.0","@mapbox/eslint-config-mapbox":"^3.0.0","aws-sdk":"^2.1087.0","codecov":"^3.8.3","eslint":"^7.32.0","eslint-plugin-node":"^11.1.0","mock-aws-s3":"^4.0.2","nock":"^12.0.3","node-addon-api":"^4.3.0","nyc":"^15.1.0","tape":"^5.5.2","tar-fs":"^2.1.1"},"nyc":{"all":true,"skip-full":false,"exclude":["test/**"]},"scripts":{"coverage":"nyc --all --include index.js --include lib/ npm test","upload-coverage":"nyc report --reporter json && codecov --clear --flags=unit --file=./coverage/coverage-final.json","lint":"eslint bin/node-pre-gyp lib/*js lib/util/*js test/*js scripts/*js","fix":"npm run lint -- --fix","update-crosswalk":"node scripts/abi_crosswalk.js","test":"tape test/*test.js"}}');

},{}],"66q6O":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.node = void 0;
/**
 * Public API symbols under the tf.node.* namespace.
 */ var callbacks_1 = require("26d66e67c488f39b");
var image_1 = require("178a4696a62df3bf");
var saved_model_1 = require("bd7a72126490d1c6");
var tensorboard_1 = require("cbcc7e6ac8815944");
exports.node = {
    decodeImage: image_1.decodeImage,
    decodeBmp: image_1.decodeBmp,
    decodeGif: image_1.decodeGif,
    decodePng: image_1.decodePng,
    decodeJpeg: image_1.decodeJpeg,
    encodeJpeg: image_1.encodeJpeg,
    encodePng: image_1.encodePng,
    summaryFileWriter: tensorboard_1.summaryFileWriter,
    tensorBoard: callbacks_1.tensorBoard,
    getMetaGraphsFromSavedModel: saved_model_1.getMetaGraphsFromSavedModel,
    getNumOfSavedModels: saved_model_1.getNumOfSavedModels,
    loadSavedModel: saved_model_1.loadSavedModel
};

},{"26d66e67c488f39b":"8AvI3","178a4696a62df3bf":"hbaMS","bd7a72126490d1c6":"3EgIE","cbcc7e6ac8815944":"jstfF"}],"hbaMS":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getImageType = exports.encodePng = exports.encodeJpeg = exports.decodeImage = exports.decodeGif = exports.decodeBmp = exports.decodePng = exports.decodeJpeg = exports.ImageType = void 0;
var tfjs_1 = require("5c40b621f7dca2f1");
var nodejs_kernel_backend_1 = require("9a655ca445eedbec");
var ImageType;
(function(ImageType) {
    ImageType["JPEG"] = "jpeg";
    ImageType["PNG"] = "png";
    ImageType["GIF"] = "gif";
    ImageType["BMP"] = "BMP";
})(ImageType = exports.ImageType || (exports.ImageType = {}));
/**
 * Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.
 *
 * @param contents The JPEG-encoded image in an Uint8Array.
 * @param channels An optional int. Defaults to 0. Accepted values are
 *     0: use the number of channels in the JPEG-encoded image.
 *     1: output a grayscale image.
 *     3: output an RGB image.
 * @param ratio An optional int. Defaults to 1. Downscaling ratio. It is used
 *     when image is type Jpeg.
 * @param fancyUpscaling An optional bool. Defaults to True. If true use a
 *     slower but nicer upscaling of the chroma planes. It is used when image is
 *     type Jpeg.
 * @param tryRecoverTruncated An optional bool. Defaults to False. If true try
 *     to recover an image from truncated input. It is used when image is type
 *     Jpeg.
 * @param acceptableFraction An optional float. Defaults to 1. The minimum
 *     required fraction of lines before a truncated input is accepted. It is
 *     used when image is type Jpeg.
 * @param dctMethod An optional string. Defaults to "". string specifying a hint
 *     about the algorithm used for decompression. Defaults to "" which maps to
 *     a system-specific default. Currently valid values are ["INTEGER_FAST",
 *     "INTEGER_ACCURATE"]. The hint may be ignored (e.g., the internal jpeg
 *     library changes to a version that does not have that specific option.) It
 *     is used when image is type Jpeg.
 * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3].
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {
    if (channels === void 0) channels = 0;
    if (ratio === void 0) ratio = 1;
    if (fancyUpscaling === void 0) fancyUpscaling = true;
    if (tryRecoverTruncated === void 0) tryRecoverTruncated = false;
    if (acceptableFraction === void 0) acceptableFraction = 1;
    if (dctMethod === void 0) dctMethod = "";
    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
    return (0, tfjs_1.tidy)(function() {
        return (0, nodejs_kernel_backend_1.nodeBackend)().decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod).toInt();
    });
}
exports.decodeJpeg = decodeJpeg;
/**
 * Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.
 *
 * @param contents The PNG-encoded image in an Uint8Array.
 * @param channels An optional int. Defaults to 0. Accepted values are
 *      0: use the number of channels in the PNG-encoded image.
 *      1: output a grayscale image.
 *      3: output an RGB image.
 *      4: output an RGBA image.
 * @param dtype The data type of the result. Only `int32` is supported at this
 *     time.
 * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3/4].
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function decodePng(contents, channels, dtype) {
    if (channels === void 0) channels = 0;
    if (dtype === void 0) dtype = "int32";
    tfjs_1.util.assert(dtype === "int32", function() {
        return "decodeImage could only return Tensor of type `int32` for now.";
    });
    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
    return (0, tfjs_1.tidy)(function() {
        return (0, nodejs_kernel_backend_1.nodeBackend)().decodePng(contents, channels).toInt();
    });
}
exports.decodePng = decodePng;
/**
 * Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype
 * `int32`.
 *
 * @param contents The BMP-encoded image in an Uint8Array.
 * @param channels An optional int. Defaults to 0. Accepted values are
 *      0: use the number of channels in the BMP-encoded image.
 *      3: output an RGB image.
 *      4: output an RGBA image.
 * @returns A 3D Tensor of dtype `int32` with shape [height, width, 3/4].
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function decodeBmp(contents, channels) {
    if (channels === void 0) channels = 0;
    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
    return (0, tfjs_1.tidy)(function() {
        return (0, nodejs_kernel_backend_1.nodeBackend)().decodeBmp(contents, channels).toInt();
    });
}
exports.decodeBmp = decodeBmp;
/**
 * Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.
 *
 * @param contents The GIF-encoded image in an Uint8Array.
 * @returns A 4D Tensor of dtype `int32` with shape [num_frames, height, width,
 *     3]. RGB channel order.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function decodeGif(contents) {
    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
    return (0, tfjs_1.tidy)(function() {
        return (0, nodejs_kernel_backend_1.nodeBackend)().decodeGif(contents).toInt();
    });
}
exports.decodeGif = decodeGif;
/**
 * Given the encoded bytes of an image, it returns a 3D or 4D tensor of the
 * decoded image. Supports BMP, GIF, JPEG and PNG formats.
 *
 * @param content The encoded image in an Uint8Array.
 * @param channels An optional int. Defaults to 0, use the number of channels in
 *     the image. Number of color channels for the decoded image. It is used
 *     when image is type Png, Bmp, or Jpeg.
 * @param dtype The data type of the result. Only `int32` is supported at this
 *     time.
 * @param expandAnimations A boolean which controls the shape of the returned
 *     op's output. If True, the returned op will produce a 3-D tensor for PNG,
 *     JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or
 *     not. If, False, the returned op will produce a 3-D tensor for all file
 *     types and will truncate animated GIFs to the first frame.
 * @returns A Tensor with dtype `int32` and a 3- or 4-dimensional shape,
 *     depending on the file type. For gif file the returned Tensor shape is
 *     [num_frames, height, width, 3], and for jpeg/png/bmp the returned Tensor
 *     shape is [height, width, channels]
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function decodeImage(content, channels, dtype, expandAnimations) {
    if (channels === void 0) channels = 0;
    if (dtype === void 0) dtype = "int32";
    if (expandAnimations === void 0) expandAnimations = true;
    tfjs_1.util.assert(dtype === "int32", function() {
        return "decodeImage could only return Tensor of type `int32` for now.";
    });
    var imageType = getImageType(content);
    // The return tensor has dtype uint8, which is not supported in
    // TensorFlow.js, casting it to int32 which is the default dtype for image
    // tensor. If the image is BMP, JPEG or PNG type, expanding the tensors
    // shape so it becomes Tensor4D, which is the default tensor shape for image
    // ([batch,imageHeight,imageWidth, depth]).
    switch(imageType){
        case ImageType.JPEG:
            return decodeJpeg(content, channels);
        case ImageType.PNG:
            return decodePng(content, channels);
        case ImageType.GIF:
            // If not to expand animations, take first frame of the gif and return
            // as a 3D tensor.
            return (0, tfjs_1.tidy)(function() {
                var img = decodeGif(content);
                return expandAnimations ? img : img.slice(0, 1).squeeze([
                    0
                ]);
            });
        case ImageType.BMP:
            return decodeBmp(content, channels);
        default:
            return null;
    }
}
exports.decodeImage = decodeImage;
/**
 * Encodes an image tensor to JPEG.
 *
 * @param image A 3-D uint8 Tensor of shape [height, width, channels].
 * @param format An optional string from: "", "grayscale", "rgb".
 *     Defaults to "". Per pixel image format.
 *     - '': Use a default format based on the number of channels in the image.
 *     - grayscale: Output a grayscale JPEG image. The channels dimension of
 *       image must be 1.
 *     - rgb: Output an RGB JPEG image. The channels dimension of image must
 *       be 3.
 * @param quality An optional int. Defaults to 95. Quality of the compression
 *     from 0 to 100 (higher is better and slower).
 * @param progressive An optional bool. Defaults to False. If True, create a
 *     JPEG that loads progressively (coarse to fine).
 * @param optimizeSize An optional bool. Defaults to False. If True, spend
 *     CPU/RAM to reduce size with no quality change.
 * @param chromaDownsampling  An optional bool. Defaults to True.
 *     See http://en.wikipedia.org/wiki/Chroma_subsampling.
 * @param densityUnit An optional string from: "in", "cm". Defaults to "in".
 *     Unit used to specify x_density and y_density: pixels per inch ('in') or
 *     centimeter ('cm').
 * @param xDensity An optional int. Defaults to 300. Horizontal pixels per
 *     density unit.
 * @param yDensity An optional int. Defaults to 300. Vertical pixels per
 *     density unit.
 * @param xmpMetadata An optional string. Defaults to "". If not empty, embed
 *     this XMP metadata in the image header.
 * @returns The JPEG encoded data as an Uint8Array.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function encodeJpeg(image, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {
    if (format === void 0) format = "";
    if (quality === void 0) quality = 95;
    if (progressive === void 0) progressive = false;
    if (optimizeSize === void 0) optimizeSize = false;
    if (chromaDownsampling === void 0) chromaDownsampling = true;
    if (densityUnit === void 0) densityUnit = "in";
    if (xDensity === void 0) xDensity = 300;
    if (yDensity === void 0) yDensity = 300;
    if (xmpMetadata === void 0) xmpMetadata = "";
    return __awaiter(this, void 0, void 0, function() {
        var backendEncodeImage;
        return __generator(this, function(_a) {
            (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
            backendEncodeImage = function(imageData) {
                return (0, nodejs_kernel_backend_1.nodeBackend)().encodeJpeg(imageData, image.shape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata);
            };
            return [
                2 /*return*/ ,
                encodeImage(image, backendEncodeImage)
            ];
        });
    });
}
exports.encodeJpeg = encodeJpeg;
/**
 * Encodes an image tensor to PNG.
 *
 * @param image A 3-D uint8 Tensor of shape [height, width, channels].
 * @param compression An optional int. Defaults to 1. Compression level.
 * @returns The PNG encoded data as an Uint8Array.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}
 */ function encodePng(image, compression) {
    if (compression === void 0) compression = 1;
    return __awaiter(this, void 0, void 0, function() {
        var backendEncodeImage;
        return __generator(this, function(_a) {
            (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
            backendEncodeImage = function(imageData) {
                return (0, nodejs_kernel_backend_1.nodeBackend)().encodePng(imageData, image.shape, compression);
            };
            return [
                2 /*return*/ ,
                encodeImage(image, backendEncodeImage)
            ];
        });
    });
}
exports.encodePng = encodePng;
function encodeImage(image, backendEncodeImage) {
    return __awaiter(this, void 0, void 0, function() {
        var encodedDataTensor, _a, _b, encodedPngData;
        return __generator(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = backendEncodeImage;
                    _b = Uint8Array.bind;
                    return [
                        4 /*yield*/ ,
                        image.data()
                    ];
                case 1:
                    encodedDataTensor = _a.apply(void 0, [
                        new (_b.apply(Uint8Array, [
                            void 0,
                            _c.sent()
                        ]))()
                    ]);
                    // tslint:disable-next-line:no-any
                    return [
                        4 /*yield*/ ,
                        encodedDataTensor.data()
                    ];
                case 2:
                    encodedPngData = // tslint:disable-next-line:no-any
                    _c.sent()[0];
                    encodedDataTensor.dispose();
                    return [
                        2 /*return*/ ,
                        encodedPngData
                    ];
            }
        });
    });
}
/**
 * Helper function to get image type based on starting bytes of the image file.
 */ function getImageType(content) {
    // Classify the contents of a file based on starting bytes (aka magic number:
    // https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files)
    // This aligns with TensorFlow Core code:
    // https://github.com/tensorflow/tensorflow/blob/4213d5c1bd921f8d5b7b2dc4bbf1eea78d0b5258/tensorflow/core/kernels/decode_image_op.cc#L44
    if (content.length > 3 && content[0] === 255 && content[1] === 216 && content[2] === 255) // JPEG byte chunk starts with `ff d8 ff`
    return ImageType.JPEG;
    else if (content.length > 4 && content[0] === 71 && content[1] === 73 && content[2] === 70 && content[3] === 56) // GIF byte chunk starts with `47 49 46 38`
    return ImageType.GIF;
    else if (content.length > 8 && content[0] === 137 && content[1] === 80 && content[2] === 78 && content[3] === 71 && content[4] === 13 && content[5] === 10 && content[6] === 26 && content[7] === 10) // PNG byte chunk starts with `\211 P N G \r \n \032 \n (89 50 4E 47 0D 0A
    // 1A 0A)`
    return ImageType.PNG;
    else if (content.length > 3 && content[0] === 66 && content[1] === 77) // BMP byte chunk starts with `42 4d`
    return ImageType.BMP;
    else throw new Error("Expected image (BMP, JPEG, PNG, or GIF), but got unsupported image type");
}
exports.getImageType = getImageType;

},{"5c40b621f7dca2f1":"hadS1","9a655ca445eedbec":"4Q85s"}],"3EgIE":[function(require,module,exports) {
"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getNumOfSavedModels = exports.loadSavedModel = exports.TFSavedModel = exports.getSignatureDefEntryFromMetaGraphInfo = exports.getMetaGraphsFromSavedModel = exports.readSavedModelProto = exports.getEnumKeyFromValue = void 0;
var tfjs_1 = require("9b1c3cd1dde2d6dd");
var fs = require("3f5d6067b1b94003");
var util_1 = require("f6cc7b692612905f");
var nodejs_kernel_backend_1 = require("3841c63735b645d");
var readFile = (0, util_1.promisify)(fs.readFile);
// tslint:disable-next-line:no-require-imports
var messages = require("2a6c5fcc52404a63");
var SAVED_MODEL_FILE_NAME = "/saved_model.pb";
var SAVED_MODEL_INIT_OP_KEY = "__saved_model_init_op";
// This map is used to keep track of loaded SavedModel metagraph mapping
// information. The map key is TFSavedModel id in JavaScript, value is
// an object of path to the SavedModel, metagraph tags, and loaded Session ID in
// the c++ bindings. When user loads a SavedModel signature, it will go through
// entries in this map to find if the corresponding SavedModel session has
// already been loaded in C++ addon and will reuse it if existing.
var loadedSavedModelPathMap = new Map();
// The ID of loaded TFSavedModel. This ID is used to keep track of loaded
// TFSavedModel, so the loaded session in c++ bindings for the corresponding
// TFSavedModel can be properly reused/disposed.
var nextTFSavedModelId = 0;
/**
 * Get a key in an object by its value. This is used to get protobuf enum value
 * from index.
 *
 * @param object
 * @param value
 */ // tslint:disable-next-line:no-any
function getEnumKeyFromValue(object, value) {
    return Object.keys(object).find(function(key) {
        return object[key] === value;
    });
}
exports.getEnumKeyFromValue = getEnumKeyFromValue;
/**
 * Read SavedModel proto message from path.
 *
 * @param path Path to SavedModel folder.
 */ function readSavedModelProto(path) {
    return __awaiter(this, void 0, void 0, function() {
        var modelFile, array;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    // Load the SavedModel pb file and deserialize it into message.
                    try {
                        fs.accessSync(path + SAVED_MODEL_FILE_NAME, fs.constants.R_OK);
                    } catch (error) {
                        throw new Error("There is no saved_model.pb file in the directory: " + path);
                    }
                    return [
                        4 /*yield*/ ,
                        readFile(path + SAVED_MODEL_FILE_NAME)
                    ];
                case 1:
                    modelFile = _a.sent();
                    array = new Uint8Array(modelFile);
                    return [
                        2 /*return*/ ,
                        messages.SavedModel.deserializeBinary(array)
                    ];
            }
        });
    });
}
exports.readSavedModelProto = readSavedModelProto;
/**
 * Inspect the MetaGraphs of the SavedModel from the provided path. This
 * function will return an array of `MetaGraphInfo` objects.
 *
 * @param path Path to SavedModel folder.
 *
 * @doc {heading: 'Models', subheading: 'SavedModel', namespace: 'node'}
 */ function getMetaGraphsFromSavedModel(path) {
    return __awaiter(this, void 0, void 0, function() {
        var result, modelMessage, metaGraphList, i, metaGraph, tags, signatureDef, signatureDefMap, signatureDefKeys, key, signatureDefEntry, inputsMapMessage, inputsMapKeys, inputs, inputsMapKey, inputTensor, inputTensorInfo, dtype, outputsMapMessage, outputsMapKeys, outputs, outputsMapKey, outputTensor, outputTensorInfo, dtype;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    result = [];
                    return [
                        4 /*yield*/ ,
                        readSavedModelProto(path)
                    ];
                case 1:
                    modelMessage = _a.sent();
                    metaGraphList = modelMessage.getMetaGraphsList();
                    for(i = 0; i < metaGraphList.length; i++){
                        metaGraph = {};
                        tags = metaGraphList[i].getMetaInfoDef().getTagsList();
                        metaGraph.tags = tags;
                        signatureDef = {};
                        signatureDefMap = metaGraphList[i].getSignatureDefMap();
                        signatureDefKeys = signatureDefMap.keys();
                        // Go through all signatureDefs
                        while(true){
                            key = signatureDefKeys.next();
                            if (key.done) break;
                            // Skip TensorFlow internal Signature '__saved_model_init_op'.
                            if (key.value === SAVED_MODEL_INIT_OP_KEY) continue;
                            signatureDefEntry = signatureDefMap.get(key.value);
                            inputsMapMessage = signatureDefEntry.getInputsMap();
                            inputsMapKeys = inputsMapMessage.keys();
                            inputs = {};
                            while(true){
                                inputsMapKey = inputsMapKeys.next();
                                if (inputsMapKey.done) break;
                                inputTensor = inputsMapMessage.get(inputsMapKey.value);
                                inputTensorInfo = {};
                                dtype = getEnumKeyFromValue(messages.DataType, inputTensor.getDtype());
                                inputTensorInfo.dtype = mapTFDtypeToJSDtype(dtype);
                                inputTensorInfo.tfDtype = dtype;
                                inputTensorInfo.name = inputTensor.getName();
                                inputTensorInfo.shape = inputTensor.getTensorShape().getDimList();
                                inputs[inputsMapKey.value] = inputTensorInfo;
                            }
                            outputsMapMessage = signatureDefEntry.getOutputsMap();
                            outputsMapKeys = outputsMapMessage.keys();
                            outputs = {};
                            while(true){
                                outputsMapKey = outputsMapKeys.next();
                                if (outputsMapKey.done) break;
                                outputTensor = outputsMapMessage.get(outputsMapKey.value);
                                outputTensorInfo = {};
                                dtype = getEnumKeyFromValue(messages.DataType, outputTensor.getDtype());
                                outputTensorInfo.dtype = mapTFDtypeToJSDtype(dtype);
                                outputTensorInfo.tfDtype = dtype;
                                outputTensorInfo.name = outputTensor.getName();
                                outputTensorInfo.shape = outputTensor.getTensorShape().getDimList();
                                outputs[outputsMapKey.value] = outputTensorInfo;
                            }
                            signatureDef[key.value] = {
                                inputs: inputs,
                                outputs: outputs
                            };
                        }
                        metaGraph.signatureDefs = signatureDef;
                        result.push(metaGraph);
                    }
                    return [
                        2 /*return*/ ,
                        result
                    ];
            }
        });
    });
}
exports.getMetaGraphsFromSavedModel = getMetaGraphsFromSavedModel;
/**
 * Get SignatureDefEntry from SavedModel metagraphs info. The SignatureDefEntry
 * will be used when executing a SavedModel signature.
 *
 * @param savedModelInfo The MetaGraphInfo array loaded through
 *     getMetaGraphsFromSavedModel().
 * @param tags The tags of the MetaGraph to get input/output node names from.
 * @param signature The signature to get input/output node names from.
 */ function getSignatureDefEntryFromMetaGraphInfo(savedModelInfo, tags, signature) {
    for(var i = 0; i < savedModelInfo.length; i++){
        var metaGraphInfo = savedModelInfo[i];
        if (stringArraysHaveSameElements(tags, metaGraphInfo.tags)) {
            if (metaGraphInfo.signatureDefs[signature] == null) throw new Error("The SavedModel does not have signature: " + signature);
            return metaGraphInfo.signatureDefs[signature];
        }
    }
    throw new Error("The SavedModel does not have tags: ".concat(tags));
}
exports.getSignatureDefEntryFromMetaGraphInfo = getSignatureDefEntryFromMetaGraphInfo;
/**
 * A `tf.TFSavedModel` is a signature loaded from a SavedModel
 * metagraph, and allows inference execution.
 *
 * @doc {heading: 'Models', subheading: 'SavedModel', namespace: 'node'}
 */ var TFSavedModel = /** @class */ function() {
    function TFSavedModel(sessionId, jsid, signature, backend) {
        this.sessionId = sessionId;
        this.jsid = jsid;
        this.signature = signature;
        this.backend = backend;
        this.disposed = false;
    }
    Object.defineProperty(TFSavedModel.prototype, "inputs", {
        /**
         * Return the array of input tensor info.
         *
         * @doc {heading: 'Models', subheading: 'SavedModel'}
         */ get: function() {
            var entries = this.signature.inputs;
            var results = Object.keys(entries).map(function(key) {
                return entries[key];
            });
            results.forEach(function(info) {
                info.name = info.name.replace(/:0$/, "");
            });
            return results;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TFSavedModel.prototype, "outputs", {
        /**
         * Return the array of output tensor info.
         *
         * @doc {heading: 'Models', subheading: 'SavedModel'}
         */ get: function() {
            var entries = this.signature.outputs;
            var results = Object.keys(entries).map(function(key) {
                return entries[key];
            });
            results.forEach(function(info) {
                info.name = info.name.replace(/:0$/, "");
            });
            return results;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Delete the SavedModel from nodeBackend and delete corresponding session in
     * the C++ backend if the session is only used by this TFSavedModel.
     *
     * @doc {heading: 'Models', subheading: 'SavedModel'}
     */ TFSavedModel.prototype.dispose = function() {
        if (!this.disposed) {
            this.disposed = true;
            loadedSavedModelPathMap.delete(this.jsid);
            for(var _i = 0, _a = Array.from(loadedSavedModelPathMap.keys()); _i < _a.length; _i++){
                var id = _a[_i];
                var value = loadedSavedModelPathMap.get(id);
                if (value.sessionId === this.sessionId) return;
            }
            this.backend.deleteSavedModel(this.sessionId);
        } else throw new Error("This SavedModel has already been deleted.");
    };
    Object.defineProperty(TFSavedModel.prototype, "outputNodeNames", {
        get: function() {
            var _this = this;
            if (this.outputNodeNames_ != null) return this.outputNodeNames_;
            this.outputNodeNames_ = Object.keys(this.signature.outputs).reduce(function(names, key) {
                names[key] = _this.signature.outputs[key].name;
                return names;
            }, {});
            return this.outputNodeNames_;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute the inference for the input tensors.
     *
     * @param input The input tensors, when there is single input for the model,
     * inputs param should be a Tensor. For models with multiple inputs, inputs
     * params should be in either Tensor[] if the input order is fixed, or
     * otherwise NamedTensorMap format. The keys in the NamedTensorMap are the
     * name of input tensors in SavedModel signatureDef. It can be found through
     * `tf.node.getMetaGraphsFromSavedModel()`.
     *
     * For batch inference execution, the tensors for each input need to be
     * concatenated together. For example with mobilenet, the required input shape
     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
     * If we are provide a batched data of 100 images, the input tensor should be
     * in the shape of [100, 244, 244, 3].
     *
     * @param config Prediction configuration for specifying the batch size.
     *
     * @returns Inference result tensors. The output would be single Tensor if
     * model has single output node, otherwise Tensor[] or NamedTensorMap[] will
     * be returned for model with multiple outputs.
     *
     * @doc {heading: 'Models', subheading: 'SavedModel'}
     */ TFSavedModel.prototype.predict = function(inputs, config) {
        var _this = this;
        if (this.disposed) throw new Error("The TFSavedModel has already been deleted!");
        else {
            var inputTensors = [];
            if (inputs instanceof tfjs_1.Tensor) {
                inputTensors.push(inputs);
                var result = this.backend.runSavedModel(this.sessionId, inputTensors, Object.values(this.signature.inputs), Object.values(this.outputNodeNames));
                return result.length > 1 ? result : result[0];
            } else if (Array.isArray(inputs)) {
                inputTensors = inputs;
                return this.backend.runSavedModel(this.sessionId, inputTensors, Object.values(this.signature.inputs), Object.values(this.outputNodeNames));
            } else {
                var inputTensorNames = Object.keys(this.signature.inputs);
                var providedInputNames = Object.keys(inputs);
                if (!stringArraysHaveSameElements(inputTensorNames, providedInputNames)) throw new Error("The model signatureDef input names are ".concat(inputTensorNames.join(), ", however the provided input names are ").concat(providedInputNames.join(), "."));
                var inputNodeNamesArray = [];
                for(var i = 0; i < inputTensorNames.length; i++){
                    inputTensors.push(inputs[inputTensorNames[i]]);
                    inputNodeNamesArray.push(this.signature.inputs[inputTensorNames[i]]);
                }
                var outputTensorNames = Object.keys(this.outputNodeNames);
                var outputNodeNamesArray = [];
                for(var i = 0; i < outputTensorNames.length; i++)outputNodeNamesArray.push(this.outputNodeNames[outputTensorNames[i]]);
                var outputTensors_1 = this.backend.runSavedModel(this.sessionId, inputTensors, inputNodeNamesArray, outputNodeNamesArray);
                tfjs_1.util.assert(outputTensors_1.length === outputNodeNamesArray.length, function() {
                    return "Output tensors do not match output node names, " + "receive ".concat(outputTensors_1.length, ") output tensors but ") + "there are ".concat(_this.outputNodeNames.length, " output nodes.");
                });
                var outputMap = {};
                for(var i = 0; i < outputTensorNames.length; i++)outputMap[outputTensorNames[i]] = outputTensors_1[i];
                return outputMap;
            }
        }
    };
    /**
     * Execute the inference for the input tensors and return activation
     * values for specified output node names without batching.
     *
     * @param input The input tensors, when there is single input for the model,
     * inputs param should be a Tensor. For models with multiple inputs, inputs
     * params should be in either Tensor[] if the input order is fixed, or
     * otherwise NamedTensorMap format.
     *
     * @param outputs string|string[]. List of output node names to retrieve
     * activation from.
     *
     * @returns Activation values for the output nodes result tensors. The return
     * type matches specified parameter outputs type. The output would be single
     * Tensor if single output is specified, otherwise Tensor[] for multiple
     * outputs.
     *
     * @doc {heading: 'Models', subheading: 'SavedModel'}
     */ TFSavedModel.prototype.execute = function(inputs, outputs) {
        throw new Error("execute() of TFSavedModel is not supported yet.");
    };
    return TFSavedModel;
}();
exports.TFSavedModel = TFSavedModel;
/**
 * Load a TensorFlow SavedModel from disk. TensorFlow SavedModel is different
 * from TensorFlow.js model format. A SavedModel is a directory containing
 * serialized signatures and the states needed to run them. The directory has a
 * saved_model.pb (or saved_model.pbtxt) file storing the actual TensorFlow
 * program, or model, and a set of named signatures, each identifying a
 * function. The directory also has a variables directory contains a standard
 * training checkpoint. The directory may also has a assets directory contains
 * files used by the TensorFlow graph, for example text files used to initialize
 * vocabulary tables. These are supported datatypes: float32, int32, complex64,
 * string.For more information, see this guide:
 * https://www.tensorflow.org/guide/saved_model.
 *
 * @param path The path to the SavedModel.
 * @param tags The tags of the MetaGraph to load. The available tags of a
 *     SavedModel can be retrieved through tf.node.getMetaGraphsFromSavedModel()
 *     API. Defaults to ['serve'].
 * @param signature The name of the SignatureDef to load. The available
 *     SignatureDefs of a SavedModel can be retrieved through
 *     tf.node.getMetaGraphsFromSavedModel() API. Defaults to 'serving_default'.
 *
 * @doc {heading: 'Models', subheading: 'SavedModel', namespace: 'node'}
 */ function loadSavedModel(path, tags, signature) {
    if (tags === void 0) tags = [
        "serve"
    ];
    if (signature === void 0) signature = "serving_default";
    return __awaiter(this, void 0, void 0, function() {
        var backend, savedModelInfo, signatureDefEntry, sessionId, _i, _a, id_1, modelInfo, tagsString, id, savedModel;
        return __generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
                    backend = (0, nodejs_kernel_backend_1.nodeBackend)();
                    return [
                        4 /*yield*/ ,
                        getMetaGraphsFromSavedModel(path)
                    ];
                case 1:
                    savedModelInfo = _b.sent();
                    signatureDefEntry = getSignatureDefEntryFromMetaGraphInfo(savedModelInfo, tags, signature);
                    for(_i = 0, _a = Array.from(loadedSavedModelPathMap.keys()); _i < _a.length; _i++){
                        id_1 = _a[_i];
                        modelInfo = loadedSavedModelPathMap.get(id_1);
                        if (modelInfo.path === path && stringArraysHaveSameElements(modelInfo.tags, tags)) sessionId = modelInfo.sessionId;
                    }
                    if (sessionId == null) {
                        tagsString = tags.join(",");
                        sessionId = backend.loadSavedModelMetaGraph(path, tagsString);
                    }
                    id = nextTFSavedModelId++;
                    savedModel = new TFSavedModel(sessionId, id, signatureDefEntry, backend);
                    loadedSavedModelPathMap.set(id, {
                        path: path,
                        tags: tags,
                        sessionId: sessionId
                    });
                    return [
                        2 /*return*/ ,
                        savedModel
                    ];
            }
        });
    });
}
exports.loadSavedModel = loadSavedModel;
/**
 * Compare if two unsorted arrays of string have the same elements.
 * @param arrayA
 * @param arrayB
 */ function stringArraysHaveSameElements(arrayA, arrayB) {
    if (arrayA.length === arrayB.length && arrayA.sort().join() === arrayB.sort().join()) return true;
    return false;
}
function mapTFDtypeToJSDtype(tfDtype) {
    switch(tfDtype){
        case "DT_FLOAT":
            return "float32";
        case "DT_INT64":
        case "DT_INT32":
        case "DT_UINT8":
            return "int32";
        case "DT_BOOL":
            return "bool";
        case "DT_COMPLEX64":
            return "complex64";
        case "DT_STRING":
            return "string";
        default:
            throw new Error("Unsupported tensor DataType: " + tfDtype + ", try to modify the model in python to convert the datatype");
    }
}
function getNumOfSavedModels() {
    (0, nodejs_kernel_backend_1.ensureTensorflowBackend)();
    var backend = (0, nodejs_kernel_backend_1.nodeBackend)();
    return backend.getNumOfSavedModels();
}
exports.getNumOfSavedModels = getNumOfSavedModels;

},{"9b1c3cd1dde2d6dd":"hadS1","3f5d6067b1b94003":"4oI9L","f6cc7b692612905f":"h4AnS","3841c63735b645d":"4Q85s","2a6c5fcc52404a63":"1Mnfm"}],"3VD5v":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@tensorflow/tfjs-node-gpu","version":"4.17.0","main":"dist/index.js","types":"dist/index.d.ts","gypfile":true,"repository":{"type":"git","url":"https://github.com/tensorflow/tfjs.git","directory":"tfjs-node-gpu"},"license":"Apache-2.0","engines":{"node":">=8.11.0"},"scripts":{"build":"tsc && npx mkdirp dist/proto && cp src/proto/api_pb.js dist/proto/api_pb.js","build-ci":"tsc && npx mkdirp dist/proto && cp src/proto/api_pb.js dist/proto/api_pb.js","build-link-package":"cd ../link-package && yarn build-deps-for tfjs-node","build-union":"cd ../tfjs && yarn && yarn build","build-union-ci":"cd ../tfjs && yarn && yarn build-ci","build-deps":"yarn build-link-package && yarn build-union","build-deps-ci":"yarn build-link-package && yarn build-union-ci","build-npm":"yarn prep-gpu && ./scripts/build-npm.sh","build-and-upload-addon":"./scripts/build-and-upload-addon.sh","build-addon-from-source":"node-pre-gyp install --build-from-source","clean-deps":"rm -rf deps && rm -rf lib","coverage":"nyc yarn ts-node -P tsconfig.test.json src/run_tests.ts","enable-gpu":"node scripts/install.js gpu download && yarn && yarn build-addon-from-source","ensure-cpu-gpu-packages-align":"node scripts/ensure-cpu-gpu-packages-align.js","format":"clang-format -i -style=Google binding/*.cc binding/*.h","install":"node scripts/install.js gpu download","install-from-source":"yarn clean-deps && yarn && yarn build-addon-from-source","link-local":"yalc link","lint":"tslint -p . -t verbose","prep":"cd node_modules/@tensorflow/tfjs-core && yarn && yarn build","prep-gpu":"./prep-gpu.sh","prep-gpu-windows":"./prep-gpu-windows.bat","publish-local":"yarn prep && yalc push","publish-npm":"yarn build-and-upload-addon publish && npm publish","test":"yarn && yarn build-deps && yarn build && ts-node --transpile-only --skip-ignore -P tsconfig.test.json src/run_tests.ts","test-dev":"tsc && ts-node --transpile-only --skip-ignore -P tsconfig.test.json src/run_tests.ts","test-ci":"ts-node --transpile-only --skip-ignore -P tsconfig.test.json src/run_tests.ts","upload-windows-addon":"prep-gpu-windows.bat && ./scripts/build-and-upload-windows-addon-gpu.bat"},"devDependencies":{"@tensorflow/tfjs-core":"4.17.0","@types/jasmine":"~4.0.3","@types/node":"^10.5.1","@types/progress":"^2.0.1","@types/rimraf":"~2.0.2","@types/yargs":"^13.0.3","clang-format":"~1.8.0","jasmine":"~4.2.1","node-fetch":"~2.6.1","nyc":"^15.1.0","tmp":"^0.0.33","ts-node":"~8.8.2","tslint":"~6.1.3","tslint-no-circular-imports":"^0.7.0","typescript":"5.0.4","yalc":"~1.0.0-pre.50","yargs":"^16.2.0"},"dependencies":{"@mapbox/node-pre-gyp":"1.0.9","@tensorflow/tfjs":"4.17.0","adm-zip":"^0.5.2","google-protobuf":"^3.9.2","https-proxy-agent":"^2.2.1","progress":"^2.0.0","rimraf":"^2.6.2","tar":"^4.4.6"},"binary":{"module_name":"tfjs_binding","module_path":"./lib/napi-v{napi_build_version}","host":"https://storage.googleapis.com/tf-builds/pre-built-binary","remote_path":"./napi-v{napi_build_version}/{version}/","napi_versions":[3,4,5,6,7,8]}}');

},{}]},["kKT5V","bxRei"], "bxRei", "parcelRequireeebd")

//# sourceMappingURL=dist.ec689cf7.js.map
